> $4000 @org=$4000
b $4000 Loading screen
D $4000 #UDGTABLE { #SCR(loading) | The Hobbit Loading Screen. } TABLE#
@ $4000 label=Loading
B $4000,6144,32 Pixels
B $5800,768,32 Attributes

b $5B00
@ $5B00 expand=#DEF(#MOVEMENT(address) #TABLE(default,centre,centre,centre) { =h Direction | =h Via | =h Destination } { #MAP(#PEEK($address))(?,$01:N,$02:S,$03:E,$04:W,$05:NE,$06:NW,$07:SE,$08:SW,$09:UP,$0A:DN) | #IF(#PEEK($address + 1) > $00)(#OBJECT(#PEEK($address + $01), 1, 1)($),---) | #LOCATION(#PEEK($address + $02), 1, 1)($) - "#LOCATIONNAME(#PEEK($address + $02))" } TABLE#)
@ $5B00 expand=#DEF(#ACTION #MAP(#PEEK(#PC))(?,$00:None,$01:North,$02:South,$03:East,$04:West,$05:Northeast,$06:Northwest,$07:Southeast,$08:Southwest,$09:Up,$0A:Down,$0D:Drop,$0F:Attack,$13:Take,$17:Look,$1A:Inventory,$1C:Examine,$1D:Give To,$1F:Enter,$20:Go Into,$24:Run,$27:Follow,$2A:Throw At,$2D:Burn,$2E:Tie To,$30:Capture,$33:Untie,$35:Talk To,$37:Climb Out Of,$3A:Shoot,$3B:Carry))
@ $5B00 replace=/#WORDINDEX/#R#(#EVAL(#PEEK(#PC + 1) * $100 + #PEEK(#PC) + $6000))

b $5EFF Stack

w $6000 Word Index
@ $6000 label=WordIndex
  $6002,$02 #WORDINDEX("A")
  $6004,$02 #WORDINDEX("B")
  $6006,$02 #WORDINDEX("C")
  $6008,$02 #WORDINDEX("D")
  $600A,$02 #WORDINDEX("E")
  $600C,$02 #WORDINDEX("F")
  $600E,$02 #WORDINDEX("G")
  $6010,$02 #WORDINDEX("H")
  $6012,$02 #WORDINDEX("I")
  $6014,$02 #WORDINDEX("J")
  $6016,$02 #WORDINDEX("K")
  $6018,$02 #WORDINDEX("L")
  $601A,$02 #WORDINDEX("M")
  $601C,$02 #WORDINDEX("N")
  $601E,$02 #WORDINDEX("O")
  $6020,$02 #WORDINDEX("P")
  $6022,$02 #WORDINDEX("Q")
  $6024,$02 #WORDINDEX("R")
  $6026,$02 #WORDINDEX("S")
  $6028,$02 #WORDINDEX("T")
  $602A,$02 #WORDINDEX("U")
  $602C,$02 #WORDINDEX("V")
  $602E,$02 #WORDINDEX("W")
  $6030,$02 "X" (does not exist)
  $6032,$02 #WORDINDEX("Y")
  $6034,$02 "Z" (does not exist)

b $6040 "A"
@ $6040 label=A
N $6040 A
  $6040,$01 #FIRSTLETTER(#PC)
  $6041,$01 #LETTER(#PC)
L $6041,$01,$02
N $6043 ACROSS
  $6043,$01 #FIRSTLETTER(#PC) A (PREPOSITION)
  $6044,$01 #LETTER(#PC)
L $6044,$01,$05
N $6049 AFTER
  $6049,$01 #FIRSTLETTER(#PC) A (PREPOSITION)
  $604A,$01 #LETTER(#PC)
L $604A,$01,$04
N $604E ALL
  $604E,$01 #FIRSTLETTER(#PC) A (SYSTEM_PRONOUN)
  $604F,$01 #LETTER(#PC)
L $604F,$01,$02
N $6051 ALREADY
  $6051,$01 #FIRSTLETTER(#PC) A (ARTICLE_MISC)
  $6052,$01 #LETTER(#PC)
L $6052,$01,$06
N $6058 AN
  $6058,$01 #FIRSTLETTER(#PC) A (ARTICLE_MISC)
  $6059,$01 N
  $605A,$01 @
N $605B AND
  $605B,$01 #FIRSTLETTER(#PC) A (AND)
  $605C,$01 N
  $605D,$01 D
N $605E ANOTHER
  $605E,$01 #FIRSTLETTER(#PC) A (ARTICLE_MISC)
  $605F,$01 N
  $6060,$01 O
  $6061,$01 T
  $6062,$01 H
  $6063,$01 E
  $6064,$01 R
N $6065 ARE
  $6065,$01 #FIRSTLETTER(#PC) A (ARTICLE_MISC)
  $6066,$01 R
  $6067,$01 E
N $6068 ARM
  $6068,$01 #FIRSTLETTER(#PC) A (NOUN)
  $6069,$01 R
  $606A,$01 M
N $606B ARROW
  $606B,$01 #FIRSTLETTER(#PC) A (NOUN)
  $606C,$01 R
  $606D,$01 R
  $606E,$01 O
  $606F,$01 W
N $6070 AT
  $6070,$01 #FIRSTLETTER(#PC) A (PREPOSITION)
  $6071,$01 T
  $6072,$01 @
N $6073 ATTACK
  $6073,$01 #FIRSTLETTER(#PC) A (VERB)
  $6074,$01 T (Beugung: S)
  $6075,$01 T
  $6076,$01 #FIRSTLETTER(#PC) A
  $6077,$01 C
  $6078,$01 K
N $6079 AXE
  $6079,$01 #FIRSTLETTER(#PC) A (NOUN)
  $607A,$01 X
  $607B,$01 E

b $607C "B"
@ $607C label=B
N $607C BACK
  $607C,$01 B (ADJECTIVE)
  $607D,$01 #FIRSTLETTER(#PC) A
  $607E,$01 C
  $607F,$01 K
N $6080 BARD
  $6080,$01 B (NOUN)
  $6081,$01 A
  $6082,$01 R
  $6083,$01 D
N $6084 BARREL
  $6084,$01 B (NOUN)
  $6085,$01 A
  $6086,$01 R
  $6087,$01 R
  $6088,$01 E
  $6089,$01 L
N $608A BARREN
  $608A,$01 B (ADJECTIVE)
  $608B,$01 A
  $608C,$01 R
  $608D,$01 R
  $608E,$01 E
  $608F,$01 N
N $6090 BAY
  $6090,$01 B (NOUN)
  $6091,$01 A
  $6092,$01 Y
N $6093 BEORNS
  $6093,$01 B (ADJECTIVE)
  $6094,$01 E
  $6095,$01 O
  $6096,$01 R
  $6097,$01 N
  $6098,$01 S
N $6099 BEWITCHED
  $6099,$01 B (ADJECTIVE)
  $609A,$01 E
  $609B,$01 W
  $609C,$01 I
  $609D,$01 T
  $609E,$01 C
  $609F,$01 H
  $60A0,$01 E
  $60A1,$01 D
N $60A2 BIG
  $60A2,$01 B (ADJECTIVE)
  $60A3,$01 I
  $60A4,$01 G
N $60A5 BLACK
  $60A5,$01 B (ADJECTIVE)
  $60A6,$01 L
  $60A7,$01 A
  $60A8,$01 C
  $60A9,$01 K
N $60AA BLEAK
  $60AA,$01 B (ADJECTIVE)
  $60AB,$01 L
  $60AC,$01 E
  $60AD,$01 A
  $60AE,$01 K
N $60AF BLOW
  $60AF,$01 B (NOUN)
  $60B0,$01 L
  $60B1,$01 O
  $60B2,$01 W
N $60B3 BLOOD
  $60B3,$01 B (NOUN)
  $60B4,$01 L
  $60B5,$01 O
  $60B6,$01 O
  $60B7,$01 D
N $60B8 BOAT
  $60B8,$01 B (NOUN)
  $60B9,$01 O
  $60BA,$01 A
  $60BB,$01 T
N $60BC BOG
  $60BC,$01 B (NOUN)
  $60BD,$01 O
  $60BE,$01 G
N $60BF BODY
  $60BF,$01 B (NOUN)
  $60C0,$01 O
  $60C1,$01 D
  $60C2,$01 Y
N $60C3 BOW
  $60C3,$01 B (NOUN)
  $60C4,$01 O
  $60C5,$01 W
N $60C6 BREAK
  $60C6,$01 B (VERB)
  $60C7,$01 R (Beugung: S)
  $60C8,$01 E
  $60C9,$01 A
  $60CA,$01 K
W $60CB,$02 Alias of #R$6658.
N $60CD BROKEN
  $60CD,$01 B (ADJECTIVE)
  $60CE,$01 R
  $60CF,$01 O
  $60D0,$01 K
  $60D1,$01 E
  $60D2,$01 N
N $60D3 BURN
  $60D3,$01 B (VERB)
  $60D4,$01 U (Beugung: S)
  $60D5,$01 R
  $60D6,$01 N
N $60D7 BUT
  $60D7,$01 B (SYSTEM_PRONOUN)
  $60D8,$01 U
  $60D9,$01 T
W $60DA,$02 Alias of #R$6245.
N $60DC BUTLER
  $60DC,$01 B (NOUN)
  $60DD,$01 U
  $60DE,$01 T
  $60DF,$01 L
  $60E0,$01 E
  $60E1,$01 R

b $60E2 "C"
@ $60E2 label=C
N $60E2 CACHE
  $60E2,$01 C (NOUN)
  $60E3,$01 A
  $60E4,$01 C
  $60E5,$01 H
  $60E6,$01 E
N $60E7 CAMP
  $60E7,$01 C (NOUN)
  $60E8,$01 A
  $60E9,$01 M
  $60EA,$01 P
N $60EB CAN
  $60EB,$01 C (ARTICLE_MISC)
  $60EC,$01 A
  $60ED,$01 N
N $60EE CANNOT
  $60EE,$01 C (ARTICLE_MISC)
  $60EF,$01 A
  $60F0,$01 N
  $60F1,$01 N
  $60F2,$01 O
  $60F3,$01 T
N $60F4 CAPTURE
  $60F4,$01 C (VERB)
  $60F5,$01 A (Beugung: S)
  $60F6,$01 P
  $60F7,$01 T
  $60F8,$01 U
  $60F9,$01 R
  $60FA,$01 E
W $60FB,$02 Alias of #R$6073.
N $60FD CAREFULLY
  $60FD,$01 C (ADVERB)
  $60FE,$01 A
  $60FF,$01 R
  $6100,$01 E
  $6101,$01 F
  $6102,$01 U
  $6103,$01 L
  $6104,$01 L
  $6105,$01 Y
N $6106 CARROCK
  $6106,$01 C (NOUN)
  $6107,$01 A
  $6108,$01 R
  $6109,$01 R
  $610A,$01 O
  $610B,$01 C
  $610C,$01 K
N $610D CARRY
  $610D,$01 C (VERB)
  $610E,$01 A (Beugung: @IES)
  $610F,$01 R
  $6110,$01 R
  $6111,$01 Y
N $6112 CAVE
  $6112,$01 C (NOUN)
  $6113,$01 A
  $6114,$01 V
  $6115,$01 E
N $6116 CAVERN
  $6116,$01 C (NOUN)
  $6117,$01 A
  $6118,$01 V
  $6119,$01 E
  $611A,$01 R
  $611B,$01 N
N $611C CELLAR
  $611C,$01 C (NOUN)
  $611D,$01 E
  $611E,$01 L
  $611F,$01 L
  $6120,$01 A
  $6121,$01 R
N $6122 CHEST
  $6122,$01 C (NOUN)
  $6123,$01 H
  $6124,$01 E
  $6125,$01 S
  $6126,$01 T
N $6127 CLEARING
  $6127,$01 C (NOUN)
  $6128,$01 L
  $6129,$01 E
  $612A,$01 A
  $612B,$01 R
  $612C,$01 I
  $612D,$01 N
  $612E,$01 G
N $612F CLIMB
  $612F,$01 C (VERB)
  $6130,$01 L (Beugung: S)
  $6131,$01 I
  $6132,$01 M
  $6133,$01 B
N $6134 CLOSE
  $6134,$01 C (VERB)
  $6135,$01 L (Beugung: S)
  $6136,$01 O
  $6137,$01 S
  $6138,$01 E
N $6139 CLOSED
  $6139,$01 C (ADJECTIVE)
  $613A,$01 L
  $613B,$01 O
  $613C,$01 S
  $613D,$01 E
  $613E,$01 D
N $613F COMFORTABLE
  $613F,$01 C (ADJECTIVE)
  $6140,$01 O
  $6141,$01 M
  $6142,$01 F
  $6143,$01 O
  $6144,$01 R
  $6145,$01 T
  $6146,$01 A
  $6147,$01 B
  $6148,$01 L
  $6149,$01 E
N $614A COUNTRY
  $614A,$01 C (NOUN)
  $614B,$01 O
  $614C,$01 U
  $614D,$01 N
  $614E,$01 T
  $614F,$01 R
  $6150,$01 Y
N $6151 CRACK
  $6151,$01 C (NOUN)
  $6152,$01 R
  $6153,$01 A
  $6154,$01 C
  $6155,$01 K
N $6156 CROSS
  $6156,$01 C (VERB)
  $6157,$01 R (Beugung: ES)
  $6158,$01 O
  $6159,$01 S
  $615A,$01 S
N $615B CUPBOARD
  $615B,$01 C (NOUN)
  $615C,$01 U
  $615D,$01 P
  $615E,$01 B
  $615F,$01 O
  $6160,$01 A
  $6161,$01 R
  $6162,$01 D
N $6163 CURIOUS
  $6163,$01 C (ADJECTIVE)
  $6164,$01 U
  $6165,$01 R
  $6166,$01 I
  $6167,$01 O
  $6168,$01 U
  $6169,$01 S
N $616A CURTAIN
  $616A,$01 C (NOUN)
  $616B,$01 U
  $616C,$01 R
  $616D,$01 T
  $616E,$01 A
  $616F,$01 I
  $6170,$01 N
N $6171 CUNNING
  $6171,$01 C (ADJECTIVE)
  $6172,$01 U
  $6173,$01 N
  $6174,$01 N
  $6175,$01 I
  $6176,$01 N
  $6177,$01 G
N $6178 CUT
  $6178,$01 C (VERB)
  $6179,$01 U (Beugung: S)
  $617A,$01 T
  $617B,$01 @

b $617C "D"
@ $617C label=D
N $617C D
  $617C,$01 D (MOVE_DIR)
  $617D,$01 @
  $617E,$01 @
W $617F,$02 Alias of #R$61C4.
N $6181 DALE
  $6181,$01 D (NOUN)
  $6182,$01 A
  $6183,$01 L
  $6184,$01 E
N $6185 DANGEROUS
  $6185,$01 D (ADJECTIVE)
  $6186,$01 A
  $6187,$01 N
  $6188,$01 G
  $6189,$01 E
  $618A,$01 R
  $618B,$01 O
  $618C,$01 U
  $618D,$01 S
N $618E DARK
  $618E,$01 D (ADJECTIVE)
  $618F,$01 A
  $6190,$01 R
  $6191,$01 K
N $6192 DEAD
  $6192,$01 D (ADJECTIVE)
  $6193,$01 E
  $6194,$01 A
  $6195,$01 D
N $6196 DEEP
  $6196,$01 D (ADJECTIVE)
  $6197,$01 E
  $6198,$01 E
  $6199,$01 P
N $619A DENSE
  $619A,$01 D (ADJECTIVE)
  $619B,$01 E
  $619C,$01 N
  $619D,$01 S
  $619E,$01 E
N $619F DESOLATION
  $619F,$01 D (NOUN)
  $61A0,$01 E
  $61A1,$01 S
  $61A2,$01 O
  $61A3,$01 L
  $61A4,$01 A
  $61A5,$01 T
  $61A6,$01 I
  $61A7,$01 O
  $61A8,$01 N
N $61A9 DIG
  $61A9,$01 D (VERB)
  $61AA,$01 I (Beugung: S)
  $61AB,$01 G
  $61AC,$01 @
N $61AD DIRECTION
  $61AD,$01 D (ARTICLE_MISC)
  $61AE,$01 I
  $61AF,$01 R
  $61B0,$01 E
  $61B1,$01 C
  $61B2,$01 T
  $61B3,$01 I
  $61B4,$01 O
  $61B5,$01 N
N $61B6 DISGUSTING
  $61B6,$01 D (ADJECTIVE)
  $61B7,$01 I
  $61B8,$01 S
  $61B9,$01 G
  $61BA,$01 U
  $61BB,$01 S
  $61BC,$01 T
  $61BD,$01 I
  $61BE,$01 N
  $61BF,$01 G
N $61C0 DOOR
  $61C0,$01 D (NOUN)
  $61C1,$01 O
  $61C2,$01 O
  $61C3,$01 R
N $61C4 DOWN
  $61C4,$01 D (MOVE_DIR)
  $61C5,$01 O
  $61C6,$01 W
  $61C7,$01 N
N $61C8 DRAGON
  $61C8,$01 D (NOUN)
  $61C9,$01 R
  $61CA,$01 A
  $61CB,$01 G
  $61CC,$01 O
  $61CD,$01 N
N $61CE DRAGONS
  $61CE,$01 D (ADJECTIVE)
  $61CF,$01 R
  $61D0,$01 A
  $61D1,$01 G
  $61D2,$01 O
  $61D3,$01 N
  $61D4,$01 S
N $61D5 DREADFUL
  $61D5,$01 D (ADJECTIVE)
  $61D6,$01 R
  $61D7,$01 E
  $61D8,$01 A
  $61D9,$01 D
  $61DA,$01 F
  $61DB,$01 U
  $61DC,$01 L
N $61DD DREARY
  $61DD,$01 D (ADJECTIVE)
  $61DE,$01 R
  $61DF,$01 E
  $61E0,$01 A
  $61E1,$01 R
  $61E2,$01 Y
N $61E3 DRINK
  $61E3,$01 D (VERB)
  $61E4,$01 R (Beugung: S)
  $61E5,$01 I
  $61E6,$01 N
  $61E7,$01 K
N $61E8 DROP
  $61E8,$01 D (VERB)
  $61E9,$01 R (Beugung: S)
  $61EA,$01 O
  $61EB,$01 P
N $61EC DRY
  $61EC,$01 D (ADJECTIVE)
  $61ED,$01 R
  $61EE,$01 Y
N $61EF DUNGEON
  $61EF,$01 D (NOUN)
  $61F0,$01 U
  $61F1,$01 N
  $61F2,$01 G
  $61F3,$01 E
  $61F4,$01 O
  $61F5,$01 N

b $61F6 "E"
@ $61F6 label=E
N $61F6 E
  $61F6,01 E (MOVE_DIR)
  $61F7,01 @
  $61F8,01 @
W $61F9,$02 Alias of #R$61FE.
N $61FB EAR
  $61FB,01 E (NOUN)
  $61FC,01 A
  $61FD,01 R
N $61FE EAST
  $61FE,01 E (MOVE_DIR)
  $61FF,01 A
  $6200,01 S
  $6201,01 T
N $6202 EAT
  $6202,01 E (VERB)
  $6203,01 A
  $6204,01 T
  $6205,01 @
N $6206 EDGE
  $6206,01 E (ADJECTIVE)
  $6207,01 D
  $6208,01 G
  $6209,01 E
N $620A ELF
  $620A,01 E (NOUN)
  $620B,01 L
  $620C,01 F
N $620D ELROND
  $620D,01 E (NOUN)
  $620E,01 L
  $620F,01 R
  $6210,01 O
  $6211,01 N
  $6212,01 D
N $6213 ELVENKINGS
  $6213,01 E (ADJECTIVE)
  $6214,01 L
  $6215,01 V
  $6216,01 E
  $6217,01 N
  $6218,01 K
  $6219,01 I
  $621A,01 N
  $621B,01 G
  $621C,01 S
N $621D ELVES
  $621D,01 E (NOUN)
  $621E,01 L
  $621F,01 V
  $6220,01 E
  $6221,01 S
N $6222 ELVISH
  $6222,01 E (ADJECTIVE)
  $6223,01 L
  $6224,01 V
  $6225,01 I
  $6226,01 S
  $6227,01 H
N $6228 EMPTY
  $6228,01 E (VERB)
  $6229,01 M
  $622A,01 P
  $622B,01 T
  $622C,01 Y
N $622D ENTER
  $622D,01 E (VERB)
  $622E,01 N
  $622F,01 T
  $6230,01 E
  $6231,01 R
N $6232 EVERYTHING
  $6232,01 E (SYSTEM_PRONOUN)
  $6233,01 V
  $6234,01 E
  $6235,01 R
  $6236,01 Y
  $6237,01 T
  $6238,01 H
  $6239,01 I
  $623A,01 N
  $623B,01 G
W $623C,$02 Alias of #R$604E.
N $623E EXAMINE
  $623E,01 E (VERB)
  $623F,01 X
  $6240,01 A
  $6241,01 M
  $6242,01 I
  $6243,01 N
  $6244,01 E
N $6245 EXCEPT
  $6245,01 E (SYSTEM_PRONOUN)
  $6246,01 X
  $6247,01 C
  $6248,01 E
  $6249,01 P
  $624A,01 T
N $624B EYES
  $624B,01 E (NOUN)
  $624C,01 Y
  $624D,01 E
  $624E,01 S

b $624F "F"
@ $624F label=F
N $624F FALL
  $624F,01 F (VERB)
  $6250,01 A
  $6251,01 L
  $6252,01 L
N $6253 FAST
  $6253,01 F (ADJECTIVE)
  $6254,01 A
  $6255,01 S
  $6256,01 T
N $6257 FEEBLY
  $6257,01 F (ADVERB)
  $6258,01 E
  $6259,01 E
  $625A,01 B
  $625B,01 L
  $625C,01 Y
N $625D FEET
  $625D,01 F (NOUN)
  $625E,01 E
  $625F,01 E
  $6260,01 T
N $6261 FILL
  $6261,01 F (VERB)
  $6262,01 I
  $6263,01 L
  $6264,01 L
N $6265 FINGER
  $6265,01 F (NOUN)
  $6266,01 I
  $6267,01 N
  $6268,01 G
  $6269,01 E
  $626A,01 R
N $626B FIST
  $626B,01 F (NOUN)
  $626C,01 I
  $626D,01 S
  $626E,01 T
N $626F FLAMES
  $626F,01 F (NOUN)
  $6270,01 L
  $6271,01 A
  $6272,01 M
  $6273,01 E
  $6274,01 S
N $6275 FLAT
  $6275,01 F (ADJECTIVE)
  $6276,01 L
  $6277,01 A
  $6278,01 T
N $6279 FLOOR
  $6279,01 F (NOUN)
  $627A,01 L
  $627B,01 O
  $627C,01 O
  $627D,01 R
N $627E FLOWING
  $627E,01 F (ADJECTIVE)
  $627F,01 L
  $6280,01 O
  $6281,01 W
  $6282,01 I
  $6283,01 N
  $6284,01 G
N $6285 FOLLOW
  $6285,01 F (VERB)
  $6286,01 O
  $6287,01 L
  $6288,01 L
  $6289,01 O
  $628A,01 W
N $628B FOOD
  $628B,01 F (NOUN)
  $628C,01 O
  $628D,01 O
  $628E,01 D
N $628F FOR
  $628F,01 F (PREPOSITION)
  $6290,01 O
  $6291,01 R
N $6292 FORCEFULLY
  $6292,01 F (ADVERB)
  $6293,01 O
  $6294,01 R
  $6295,01 C
  $6296,01 E
  $6297,01 F
  $6298,01 U
  $6299,01 L
  $629A,01 L
  $629B,01 Y
N $629C FORD
  $629C,01 F (NOUN)
  $629D,01 O
  $629E,01 R
  $629F,01 D
N $62A0 FOREST
  $62A0,01 F (NOUN)
  $62A1,01 O
  $62A2,01 R
  $62A3,01 E
  $62A4,01 S
  $62A5,01 T
N $62A6 FORESTRIVER
  $62A6,01 F (NOUN)
  $62A7,01 O
  $62A8,01 R
  $62A9,01 E
  $62AA,01 S
  $62AB,01 T
  $62AC,01 R
  $62AD,01 I
  $62AE,01 V
  $62AF,01 E
  $62B0,01 R
N $62B1 FOUL
  $62B1,01 F (ADJECTIVE)
  $62B2,01 O
  $62B3,01 U
  $62B4,01 L
N $62B5 FROM
  $62B5,01 F (PREPOSITION)
  $62B6,01 R
  $62B7,01 O
  $62B8,01 M
N $62B9 FULL
  $62B9,01 F (ADJECTIVE)
  $62BA,01 U
  $62BB,01 L
  $62BC,01 L

b $62BD "G"
@ $62BD label=G
N $62BD GANDALF
  $62BD,$01 G (NOUN)
  $62BE,$01 A
  $62BF,$01 N
  $62C0,$01 D
  $62C1,$01 A
  $62C2,$01 L
  $62C3,$01 F
N $62C4 GATE
  $62C4,$01 G (NOUN)
  $62C5,$01 A
  $62C6,$01 T
  $62C7,$01 E
N $62C8 GENTLY
  $62C8,$01 G (ADJECTIVE)
  $62C9,$01 E
  $62CA,$01 N
  $62CB,$01 T
  $62CC,$01 L
  $62CD,$01 Y
N $62CE GET
  $62CE,$01 G (VERB)
  $62CF,$01 E
  $62D0,$01 T
  $62D1,$01 @
W $62D2,$02 Alias of #R$668C.
N $62D4 GIVE
  $62D4,$01 G (VERB)
  $62D5,$01 I
  $62D6,$01 V
  $62D7,$01 E
N $62D8 GLOOMY
  $62D8,$01 G (ADJECTIVE)
  $62D9,$01 L
  $62DA,$01 O
  $62DB,$01 O
  $62DC,$01 M
  $62DD,$01 Y
N $62DE GO
  $62DE,$01 G (GO_RUN)
  $62DF,$01 O
  $62E0,$01 @
N $62E2 GOBLIN
  $62E2,$01 G (NOUN)
  $62E3,$01 O
  $62E4,$01 B
  $62E5,$01 L
  $62E6,$01 I
  $62E7,$01 N
N $62E8 GOBLINS
  $62E8,$01 G (ADJECTIVE)
  $62E9,$01 O
  $62EA,$01 B
  $62EB,$01 L
  $62EC,$01 I
  $62ED,$01 N
  $62EE,$01 S
N $62EF GOLD
  $62EF,$01 G (NOUN)
  $62F0,$01 O
  $62F1,$01 L
  $62F2,$01 D
N $62F3 GOLDEN
  $62F3,$01 G (ADJECTIVE)
  $62F4,$01 O
  $62F5,$01 L
  $62F6,$01 D
  $62F7,$01 E
  $62F8,$01 N
N $62F9 GOLLUM
  $62F9,$01 G (NOUN)
  $62FA,$01 O
  $62FB,$01 L
  $62FC,$01 L
  $62FD,$01 U
  $62FE,$01 M
N $62FF GREAT
  $62FF,$01 G (ADJECTIVE)
  $6300,$01 R
  $6301,$01 E
  $6302,$01 A
  $6303,$01 T
N $6304 GREEN
  $6304,$01 G (ADJECTIVE)
  $6305,$01 R
  $6306,$01 E
  $6307,$01 E
  $6308,$01 N

b $6309 "H"
@ $6309 label=H
N $6309 HALL
  $6309,$01 H (NOUN)
  $630A,$01 A
  $630B,$01 L
  $630C,$01 L
N $630D HALLS
  $630D,$01 H (NOUN)
  $630E,$01 A
  $630F,$01 L
  $6310,$01 L
  $6311,$01 S
N $6312 HAND
  $6312,$01 H (NOUN)
  $6313,$01 A
  $6314,$01 N
  $6315,$01 D
N $6316 HARD
  $6316,$01 H (ADJECTIVE)
  $6317,$01 A
  $6318,$01 R
  $6319,$01 D
N $631A HEAD
  $631A,$01 H (NOUN)
  $631B,$01 E
  $631C,$01 A
  $631D,$01 D
N $631E HELP
  $631E,$01 H (SYSTEM_PRONOUN)
  $631F,$01 E
  $6320,$01 L
  $6321,$01 P
N $6322 HEART
  $6322,$01 H (NOUN)
  $6323,$01 E
  $6324,$01 A
  $6325,$01 R
  $6326,$01 T
N $6327 HEAVY
  $6327,$01 H (ADJECTIVE)
  $6328,$01 E
  $6329,$01 A
  $632A,$01 V
  $632B,$01 Y
N $632C HELLO
  $632C,$01 H (VERB)
  $632D,$01 E
  $632E,$01 L
  $632F,$01 L
  $6330,$01 O
N $6331 HIDDEN
  $6331,$01 H (ADJECTIVE)
  $6332,$01 I
  $6333,$01 D
  $6334,$01 D
  $6335,$01 E
  $6336,$01 N
N $6337 HIDEOUS
  $6337,$01 H (ADJECTIVE)
  $6338,$01 I
  $6339,$01 D
  $633A,$01 E
  $633B,$01 O
  $633C,$01 U
  $633D,$01 S
N $633E HILL
  $633E,$01 H (NOUN)
  $633F,$01 I
  $6340,$01 L
  $6341,$01 L
N $6342 HILLS
  $6342,$01 H (NOUN)
  $6343,$01 I
  $6344,$01 L
  $6345,$01 L
  $6346,$01 S
N $6347 HIT
  $6347,$01 H (VERB)
  $6348,$01 I
  $6349,$01 T
  $634A,$01 @
W $634B,$02 Alias of #R$6073.
N $634D HOBBIT
  $634D,$01 H (ADJECTIVE)
  $634E,$01 O
  $634F,$01 B
  $6350,$01 B
  $6351,$01 I
  $6352,$01 T
N $6353 HOBBITLAND
  $6353,$01 H (NOUN)
  $6354,$01 O
  $6355,$01 B
  $6356,$01 B
  $6357,$01 I
  $6358,$01 T
  $6359,$01 L
  $635A,$01 A
  $635B,$01 N
  $635C,$01 D
N $635D HOLE
  $635D,$01 H (NOUN)
  $635E,$01 O
  $635F,$01 L
  $6360,$01 E
N $6361 HORRIBLE
  $6361,$01 H (ADJECTIVE)
  $6362,$01 O
  $6363,$01 R
  $6364,$01 R
  $6365,$01 I
  $6366,$01 B
  $6367,$01 L
  $6368,$01 E
N $6369 HOUSE
  $6369,$01 H (ADJECTIVE)
  $636A,$01 O
  $636B,$01 U
  $636C,$01 S
  $636D,$01 E
N $636E HURRY
  $636E,$01 H (VERB)
  $636F,$01 U
  $6370,$01 R
  $6371,$01 R
  $6372,$01 Y

b $6373 "I"
@ $6373 label=I
N $6373 I
  $6373,$01 I (ADVERB)
  $6374,$01 @
  $6375,$01 @
W $6376,$02 Alias of #R$6392.
N $6378 IN
  $6378,$01 I (IN_INTO)
  $6379,$01 N
  $637A,$01 @
N $637B INSIDE
  $637B,$01 I (PREPOSITION)
  $637C,$01 N
  $637D,$01 S
  $637E,$01 I
  $637F,$01 D
  $6380,$01 E
N $6381 INSIGNIFICANT
  $6381,$01 I (ADJECTIVE)
  $6382,$01 N
  $6383,$01 S
  $6384,$01 I
  $6385,$01 G
  $6386,$01 N
  $6387,$01 I
  $6388,$01 F
  $6389,$01 I
  $638A,$01 C
  $638B,$01 A
  $638C,$01 N
  $638D,$01 T
N $638E INTO
  $638E,$01 I (IN_INTO)
  $638F,$01 N
  $6390,$01 T
  $6391,$01 O
N $6392 INVENTORY
  $6392,$01 I (VERB)
  $6393,$01 N
  $6394,$01 V
  $6395,$01 E
  $6396,$01 N
  $6397,$01 T
  $6398,$01 O
  $6399,$01 R
  $639A,$01 Y
N $639B IS
  $639B,$01 I (ARTICLE_MISC)
  $639C,$01 S
  $639D,$01 @
N $639E IT
  $639E,$01 I (SYSTEM_PRONOUN)
  $639F,$01 T
  $63A0,$01 @

b $63A1 "J"
@ $63A1 label=J
N $63A1 JUMP
  $63A1,$01 J (VERB)
  $63A2,$01 U
  $63A3,$01 M
  $63A4,$01 P

b $63A5 "K"
@ $63A5 label=K
N $63A5 KEY
  $63A5,$01 K (NOUN)
  $63A6,$01 E
  $63A7,$01 Y
N $63A8 KILL
  $63A8,$01 K (VERB)
  $63A9,$01 I
  $63AA,$01 L
  $63AB,$01 L
W $63AC,$02 Alias of #R$6073.
N $63AE KING
  $63AE,$01 K (NOUN)
  $63AF,$01 I
  $63B0,$01 N
  $63B1,$01 G

b $63B2 "L"
@ $63B2 label=L
N $63B2 L
  $63B2,$01 L (ADVERB)
  $63B3,$01 @
  $63B4,$01 @
W $63B5,$02 Alias of #R$6413.
N $63B7 LAKE
  $63B7,$01 L (NOUN)
  $63B8,$01 A
  $63B9,$01 K
  $63BA,$01 E
N $63BB LAND
  $63BB,$01 L (NOUN)
  $63BC,$01 A
  $63BD,$01 N
  $63BE,$01 D
N $63BF LARGE
  $63BF,$01 L (ADJECTIVE)
  $63C0,$01 A
  $63C1,$01 R
  $63C2,$01 G
  $63C3,$01 E
N $63C4 LEAVE
  $63C4,$01 L (VERB)
  $63C5,$01 E
  $63C6,$01 A
  $63C7,$01 V
  $63C8,$01 E
N $63C9 LEG
  $63C9,$01 L (NOUN)
  $63CA,$01 E
  $63CB,$01 G
N $63CC LEVELLED
  $63CC,$01 L (ADJECTIVE)
  $63CD,$01 E
  $63CE,$01 V
  $63CF,$01 E
  $63D0,$01 L
  $63D1,$01 L
  $63D2,$01 E
  $63D3,$01 D
N $63D4 LIFT
  $63D4,$01 L (VERB)
  $63D5,$01 I
  $63D6,$01 F
  $63D7,$01 T
W $63D8,$02 Alias of #R$668C.
N $63DA LIKE
  $63DA,$01 L (ADJECTIVE)
  $63DB,$01 I
  $63DC,$01 K
  $63DD,$01 E
N $63DE LIGHT
  $63DE,$01 L (VERB)
  $63DF,$01 I
  $63E0,$01 G
  $63E1,$01 H
  $63E2,$01 T
N $63E3 LITTLE
  $63E3,$01 L (ADJECTIVE)
  $63E4,$01 I
  $63E5,$01 T
  $63E6,$01 T
  $63E7,$01 L
  $63E8,$01 E
N $63E9 LO
  $63E9,$01 L (ADVERB)
  $63EA,$01 O
  $63EB,$01 @
W $63EC,$02 Alias of #R$6413.
N $63EE LOAD
  $63EE,$01 L (SYSTEM_PRONOUN)
  $63EF,$01 O
  $63F0,$01 A
  $63F1,$01 D
N $63F2 LOCK
  $63F2,$01 L (VERB)
  $63F3,$01 O
  $63F4,$01 C
  $63F5,$01 K
N $63F6 LOCKED
  $63F6,$01 L (ADJECTIVE)
  $63F7,$01 O
  $63F8,$01 C
  $63F9,$01 K
  $63FA,$01 E
  $63FB,$01 D
N $63FC LOGS
  $63FC,$01 L (NOUN)
  $63FD,$01 O
  $63FE,$01 G
  $63FF,$01 S
N $6400 LONELANDS
  $6400,$01 L (NOUN)
  $6401,$01 O
  $6402,$01 N
  $6403,$01 E
  $6404,$01 L
  $6405,$01 A
  $6406,$01 N
  $6407,$01 D
  $6408,$01 S
N $6409 LONELY
  $6409,$01 L (ADJECTIVE)
  $640A,$01 O
  $640B,$01 N
  $640C,$01 E
  $640D,$01 L
  $640E,$01 Y
N $640F LONG
  $640F,$01 L (ADJECTIVE)
  $6410,$01 O
  $6411,$01 N
  $6412,$01 G
N $6413 LOOK
  $6413,$01 L (VERB)
  $6414,$01 O
  $6415,$01 O
  $6416,$01 K
N $6417 LOW
  $6417,$01 L (ADJECTIVE)
  $6418,$01 O
  $6419,$01 W
N $641A LOWER
  $641A,$01 L (ADJECTIVE)
  $641B,$01 O
  $641C,$01 W
  $641D,$01 E
  $641E,$01 R
N $641F LUNCH
  $641F,$01 L (NOUN)
  $6420,$01 U
  $6421,$01 N
  $6422,$01 C
  $6423,$01 H

b $6424 "M"
@ $6424 label=M
N $6424 MAGIC
  $6424,$01 M (ADJECTIVE)
  $6425,$01 A
  $6426,$01 G
  $6427,$01 I
  $6428,$01 C
N $6429 MAN
  $6429,$01 M (NOUN)
  $642A,$01 A
  $642B,$01 N
N $642C MAP
  $642C,$01 M (NOUN)
  $642D,$01 A
  $642E,$01 P
N $642F ME
  $642F,$01 M (NOUN)
  $6430,$01 E
  $6431,$01 @
W $6432,$02 Alias of #R$67A8.
N $6434 MEAN
  $6434,$01 M (ADJECTIVE)
  $6435,$01 E
  $6436,$01 A
  $6437,$01 N
N $6438 MIRKWOOD
  $6438,$01 M (NOUN)
  $6439,$01 I
  $643A,$01 R
  $643B,$01 K
  $643C,$01 W
  $643D,$01 O
  $643E,$01 O
  $643F,$01 D
N $6440 MISTY
  $6440,$01 M (ADJECTIVE)
  $6441,$01 I
  $6442,$01 S
  $6443,$01 T
  $6444,$01 Y
N $6445 MONSTROUS
  $6445,$01 M (ADJECTIVE)
  $6446,$01 O
  $6447,$01 N
  $6448,$01 S
  $6449,$01 T
  $644A,$01 R
  $644B,$01 O
  $644C,$01 U
  $644D,$01 S
N $644E MOUNTAIN
  $644E,$01 M (NOUN)
  $644F,$01 O
  $6450,$01 U
  $6451,$01 N
  $6452,$01 T
  $6453,$01 A
  $6454,$01 I
  $6455,$01 N
N $6456 MOUNTAINS
  $6456,$01 M (NOUN)
  $6457,$01 O
  $6458,$01 U
  $6459,$01 N
  $645A,$01 T
  $645B,$01 A
  $645C,$01 I
  $645D,$01 N
  $645E,$01 S

b $645F "N"
@ $645F label=N
N $645F N
  $645F,$01 N (MOVE_DIR)
  $6460,$01 @
  $6461,$01 @
W $6462,$02 Alias of #R$6480.
N $6464 NARROW
  $6464,$01 N (ADJECTIVE)
  $6465,$01 A
  $6466,$01 R
  $6467,$01 R
  $6468,$01 O
  $6469,$01 W
N $646A NASTY
  $646A,$01 N (ADJECTIVE)
  $646B,$01 A
  $646C,$01 S
  $646D,$01 T
  $646E,$01 Y
N $646F NE
  $646F,$01 N (MOVE_DIR)
  $6470,$01 E
  $6471,$01 @
W $6472,$02 Alias of #R$6485.
N $6474 NIGHT
  $6474,$01 N (NOUN)
  $6475,$01 I
  $6476,$01 G
  $6477,$01 H
  $6478,$01 T
N $6479 NOPRINT
  $6479,$01 N (SYSTEM_PRONOUN)
  $647A,$01 O
  $647B,$01 P
  $647C,$01 R
  $647D,$01 I
  $647E,$01 N
  $647F,$01 T
N $6480 NORTH
  $6480,$01 N (MOVE_DIR)
  $6481,$01 O
  $6482,$01 R
  $6483,$01 T
  $6484,$01 H
N $6485 NORTHEAST
  $6485,$01 N (MOVE_DIR)
  $6486,$01 O
  $6487,$01 R
  $6488,$01 T
  $6489,$01 H
  $648A,$01 E
  $648B,$01 A
  $648C,$01 S
  $648D,$01 T
N $648E NORTHWEST
  $648E,$01 N (MOVE_DIR)
  $648F,$01 O
  $6490,$01 R
  $6491,$01 T
  $6492,$01 H
  $6493,$01 W
  $6494,$01 E
  $6495,$01 S
  $6496,$01 T
N $6497 NW
  $6497,$01 N (MOVE_DIR)
  $6498,$01 W
  $6499,$01 @
W $649A,$02 Alias of #R$648E.

b $649C "O"
@ $649C label=O
N $649C OF
  $649C,$01 O (PREPOSITION)
  $649D,$01 F
  $649E,$01 @
N $649F OFF
  $649F,$01 O (PREPOSITION)
  $64A0,$01 F
  $64A1,$01 F
N $64A2 OFFER
  $64A2,$01 O (VERB)
  $64A3,$01 F
  $64A4,$01 F
  $64A5,$01 E
  $64A6,$01 R
N $64A7 OLD
  $64A7,$01 O (ADJECTIVE)
  $64A8,$01 L
  $64A9,$01 D
N $64AA ON
  $64AA,$01 O (PREPOSITION)
  $64AB,$01 N
  $64AC,$01 @
N $64AD ONE
  $64AD,$01 O (SYSTEM_PRONOUN)
  $64AE,$01 N
  $64AF,$01 E
N $64B0 ONTO
  $64B0,$01 O (PREPOSITION)
  $64B1,$01 N
  $64B2,$01 T
  $64B3,$01 O
N $64B4 OPEN
  $64B4,$01 O (VERB)
  $64B5,$01 P
  $64B6,$01 E
  $64B7,$01 N
N $64B8 OPENING
  $64B8,$01 O (NOUN)
  $64B9,$01 P
  $64BA,$01 E
  $64BB,$01 N
  $64BC,$01 I
  $64BD,$01 N
  $64BE,$01 G
N $64BF OUT
  $64BF,$01 O (PREPOSITION)
  $64C0,$01 U
  $64C1,$01 T
N $64C2 OUTSIDE
  $64C2,$01 O (ADJECTIVE)
  $64C3,$01 U
  $64C4,$01 T
  $64C5,$01 S
  $64C6,$01 I
  $64C7,$01 D
  $64C8,$01 E
N $64C9 OVER
  $64C9,$01 O (PREPOSITION)
  $64CA,$01 V
  $64CB,$01 E
  $64CC,$01 R

b $64CD "P"
@ $64CD label=P
N $64CD PASSAGE
  $64CD,$01 P (NOUN)
  $64CE,$01 A
  $64CF,$01 S
  $64D0,$01 S
  $64D1,$01 A
  $64D2,$01 G
  $64D3,$01 E
N $64D4 PATH
  $64D4,$01 P (NOUN)
  $64D5,$01 A
  $64D6,$01 T
  $64D7,$01 H
N $64D8 PAUSE
  $64D8,$01 P (SYSTEM_PRONOUN)
  $64D9,$01 A
  $64DA,$01 U
  $64DB,$01 S
  $64DC,$01 E
N $64DD PICK
  $64DD,$01 P (VERB)
  $64DE,$01 I
  $64DF,$01 C
  $64E0,$01 K
W $64E1,$02 Alias of #R$610D.
N $64E3 PIT
  $64E3,$01 P (NOUN)
  $64E4,$01 I
  $64E5,$01 T
N $64E6 PLACE
  $64E6,$01 P (NOUN)
  $64E7,$01 L
  $64E8,$01 A
  $64E9,$01 C
  $64EA,$01 E
N $64EB PLEASE
  $64EB,$01 P (ADVERB)
  $64EC,$01 L
  $64ED,$01 E
  $64EE,$01 A
  $64EF,$01 S
  $64F0,$01 E
N $64F1 PORTCULLIS
  $64F1,$01 P (NOUN)
  $64F2,$01 O
  $64F3,$01 R
  $64F4,$01 T
  $64F5,$01 C
  $64F6,$01 U
  $64F7,$01 L
  $64F8,$01 L
  $64F9,$01 I
  $64FA,$01 S
N $64FB PRINT
  $64FB,$01 P (SYSTEM_PRONOUN)
  $64FC,$01 R
  $64FD,$01 I
  $64FE,$01 N
  $64FF,$01 T
N $6500 PULL
  $6500,$01 P (VERB)
  $6501,$01 U
  $6502,$01 L
  $6503,$01 L
N $6504 PUSH
  $6504,$01 P (VERB)
  $6505,$01 U
  $6506,$01 S
  $6507,$01 H
N $6508 PUT
  $6508,$01 P (VERB)
  $6509,$01 U
  $650A,$01 T
  $650B,$01 @

b $650C "Q"
@ $650C label=Q
N $650C QUICKLY
  $650C,$01 Q (ADVERB)
  $650D,$01 U
  $650E,$01 I
  $650F,$01 C
  $6510,$01 K
  $6511,$01 L
  $6512,$01 Y
N $6513 QUIET
  $6513,$01 Q (ADVERB)
  $6514,$01 U
  $6515,$01 I
  $6516,$01 E
  $6517,$01 T
N $6518 QUIT
  $6518,$01 Q (SYSTEM_PRONOUN)
  $6519,$01 U
  $651A,$01 I
  $651B,$01 T
N $651C QUITE
  $651C,$01 Q (ADJECTIVE)
  $651D,$01 U
  $651E,$01 I
  $651F,$01 T
  $6520,$01 E

b $6521 "R"
@ $6521 label=R
N $6521 RAVENHILL
  $6521,$01 R (NOUN)
  $6522,$01 A
  $6523,$01 V
  $6524,$01 E
  $6525,$01 N
  $6526,$01 H
  $6527,$01 I
  $6528,$01 L
  $6529,$01 L
N $652A RAVINE
  $652A,$01 R (NOUN)
  $652B,$01 A
  $652C,$01 V
  $652D,$01 I
  $652E,$01 N
  $652F,$01 E
N $6530 READ
  $6530,$01 R (VERB)
  $6531,$01 E
  $6532,$01 A
  $6533,$01 D
W $6534,$02 Alias of #R$623E.
N $6536 RED
  $6536,$01 R (ADJECTIVE)
  $6537,$01 E
  $6538,$01 D
N $6539 RIBS
  $6539,$01 R (NOUN)
  $653A,$01 I
  $653B,$01 B
  $653C,$01 S
N $653D RING
  $653D,$01 R (NOUN)
  $653E,$01 I
  $653F,$01 N
  $6540,$01 G
N $6541 RIVENDELL
  $6541,$01 R (NOUN)
  $6542,$01 I
  $6543,$01 V
  $6544,$01 E
  $6545,$01 N
  $6546,$01 D
  $6547,$01 E
  $6548,$01 L
  $6549,$01 L
N $654A RIVER
  $654A,$01 R (NOUN)
  $654B,$01 I
  $654C,$01 V
  $654D,$01 E
  $654E,$01 R
N $654F ROAD
  $654F,$01 R (NOUN)
  $6550,$01 O
  $6551,$01 A
  $6552,$01 D
N $6553 ROCK
  $6553,$01 R (ADJECTIVE)
  $6554,$01 O
  $6555,$01 C
  $6556,$01 K
N $6557 ROOM
  $6557,$01 R (NOUN)
  $6558,$01 O
  $6559,$01 O
  $655A,$01 M
N $655B ROPE
  $655B,$01 R (NOUN)
  $655C,$01 O
  $655D,$01 P
  $655E,$01 E
N $655F ROUND
  $655F,$01 R (ADJECTIVE)
  $6560,$01 O
  $6561,$01 U
  $6562,$01 N
  $6563,$01 D
N $6564 RUG
  $6564,$01 R (NOUN)
  $6565,$01 U
  $6566,$01 G
N $6567 RUINS
  $6567,$01 R (NOUN)
  $6568,$01 U
  $6569,$01 I
  $656A,$01 N
  $656B,$01 S
N $656C RUN
  $656C,$01 R (GO_RUN)
  $656D,$01 U
  $656E,$01 N
  $656F,$01 @
N $6570 RUNNING
  $6570,$01 R (NOUN)
  $6571,$01 U
  $6572,$01 N
  $6573,$01 N
  $6574,$01 I
  $6575,$01 N
  $6576,$01 G

b $6577 "S"
@ $6577 label=S
N $6577 S
  $6577,$01 S (MOVE_DIR)
  $6578,$01 @
  $6579,$01 @
W $657A,$02 Alias of #R$6607.
N $657C SAND
  $657C,$01 S (NOUN)
  $657D,$01 A
  $657E,$01 N
  $657F,$01 D
N $6580 SAVE
  $6580,$01 S (SYSTEM_PRONOUN)
  $6581,$01 A
  $6582,$01 V
  $6583,$01 E
N $6584 SAY
  $6584,$01 S (VERB)
  $6585,$01 A
  $6586,$01 Y
  $6587,$01 @
W $6588,$02 Alias of #R$6690.
N $658A SCORE
  $658A,$01 S (SYSTEM_PRONOUN)
  $658B,$01 C
  $658C,$01 O
  $658D,$01 R
  $658E,$01 E
N $658F SE
  $658F,$01 S (MOVE_DIR)
  $6590,$01 E
  $6591,$01 @
W $6592,$02 Alias of #R$660C.
N $6594 SHOOT
  $6594,$01 S (VERB)
  $6595,$01 H
  $6596,$01 O
  $6597,$01 O
  $6598,$01 T
N $6599 SHORT
  $6599,$01 S (ADJECTIVE)
  $659A,$01 H
  $659B,$01 O
  $659C,$01 R
  $659D,$01 T
N $659E SHOULDER
  $659E,$01 S (NOUN)
  $659F,$01 H
  $65A0,$01 O
  $65A1,$01 U
  $65A2,$01 L
  $65A3,$01 D
  $65A4,$01 E
  $65A5,$01 R
N $65A6 SIDE
  $65A6,$01 S (ADJECTIVE)
  $65A7,$01 I
  $65A8,$01 D
  $65A9,$01 E
N $65AA SIDEDOOR
  $65AA,$01 S (NOUN)
  $65AB,$01 I
  $65AC,$01 D
  $65AD,$01 E
  $65AE,$01 D
  $65AF,$01 O
  $65B0,$01 O
  $65B1,$01 R
N $65B2 SIGN
  $65B2,$01 S (NOUN)
  $65B3,$01 I
  $65B4,$01 G
  $65B5,$01 N
N $65B6 SING
  $65B6,$01 S (VERB)
  $65B7,$01 I
  $65B8,$01 N
  $65B9,$01 G
N $65BA SIT
  $65BA,$01 S (VERB)
  $65BB,$01 I
  $65BC,$01 T
  $65BD,$01 @
N $65BE SKULL
  $65BE,$01 S (NOUN)
  $65BF,$01 K
  $65C0,$01 U
  $65C1,$01 L
  $65C2,$01 L
N $65C3 SLASH
  $65C3,$01 S (VERB)
  $65C4,$01 L
  $65C5,$01 A
  $65C6,$01 S
  $65C7,$01 H
W $65C8,$02 Alias of #R$6073.
N $65CA SLEEP
  $65CA,$01 S (VERB)
  $65CB,$01 L
  $65CC,$01 E
  $65CD,$01 E
  $65CE,$01 P
N $65CF SLICE
  $65CF,$01 S (VERB)
  $65D0,$01 L
  $65D1,$01 I
  $65D2,$01 C
  $65D3,$01 E
W $65D4,$02 Alias of #R$6073.
N $65D6 SLIMY
  $65D6,$01 S (ADJECTIVE)
  $65D7,$01 L
  $65D8,$01 I
  $65D9,$01 M
  $65DA,$01 Y
N $65DB SLOWLY
  $65DB,$01 S (ADVERB)
  $65DC,$01 L
  $65DD,$01 O
  $65DE,$01 W
  $65DF,$01 L
  $65E0,$01 Y
N $65E1 SMALL
  $65E1,$01 S (ADJECTIVE)
  $65E2,$01 M
  $65E3,$01 A
  $65E4,$01 L
  $65E5,$01 L
N $65E6 SMASH
  $65E6,$01 S (VERB)
  $65E7,$01 M
  $65E8,$01 A
  $65E9,$01 S
  $65EA,$01 H
W $65EB,$02 Alias of #R$6658.
N $65ED SMOOTH
  $65ED,$01 S (ADJECTIVE)
  $65EE,$01 M
  $65EF,$01 O
  $65F0,$01 O
  $65F1,$01 T
  $65F2,$01 H
N $65F3 SMOTHERING
  $65F3,$01 S (ADJECTIVE)
  $65F4,$01 M
  $65F5,$01 O
  $65F6,$01 T
  $65F7,$01 H
  $65F8,$01 E
  $65F9,$01 R
  $65FA,$01 I
  $65FB,$01 N
  $65FC,$01 G
N $65FD SOFTLY
  $65FD,$01 S (ADVERB)
  $65FE,$01 O
  $65FF,$01 F
  $6600,$01 T
  $6601,$01 L
  $6602,$01 Y
N $6603 SOME
  $6603,$01 S (ADJECTIVE)
  $6604,$01 O
  $6605,$01 M
  $6606,$01 E
N $6607 SOUTH
  $6607,$01 S (MOVE_DIR)
  $6608,$01 O
  $6609,$01 U
  $660A,$01 T
  $660B,$01 H
N $660C SOUTHEAST
  $660C,$01 S (MOVE_DIR)
  $660D,$01 O
  $660E,$01 U
  $660F,$01 T
  $6610,$01 H
  $6611,$01 E
  $6612,$01 A
  $6613,$01 S
  $6614,$01 T
N $6615 SOUTHWEST
  $6615,$01 S (MOVE_DIR)
  $6616,$01 O
  $6617,$01 U
  $6618,$01 T
  $6619,$01 H
  $661A,$01 W
  $661B,$01 E
  $661C,$01 S
  $661D,$01 T
N $661E SPACE
  $661E,$01 S (NOUN)
  $661F,$01 P
  $6620,$01 A
  $6621,$01 C
  $6622,$01 E
N $6623 SPIDER
  $6623,$01 S (ADJECTIVE)
  $6624,$01 P
  $6625,$01 I
  $6626,$01 D
  $6627,$01 E
  $6628,$01 R
N $6629 STAIRS
  $6629,$01 S (NOUN)
  $662A,$01 T
  $662B,$01 A
  $662C,$01 I
  $662D,$01 R
  $662E,$01 S
N $662F STATUE
  $662F,$01 S (NOUN)
  $6630,$01 T
  $6631,$01 A
  $6632,$01 T
  $6633,$01 U
  $6634,$01 E
N $6635 STEAL
  $6635,$01 S (VERB)
  $6636,$01 T
  $6637,$01 E
  $6638,$01 A
  $6639,$01 L
W $663A,$02 Alias of #R$668C.
N $663C STEEP
  $663C,$01 S (ADJECTIVE)
  $663D,$01 T
  $663E,$01 E
  $663F,$01 E
  $6640,$01 P
N $6641 STONE
  $6641,$01 S (NOUN)
  $6642,$01 T
  $6643,$01 O
  $6644,$01 N
  $6645,$01 E
N $6646 STRAIGHT
  $6646,$01 S (ADJECTIVE)
  $6647,$01 T
  $6648,$01 R
  $6649,$01 A
  $664A,$01 I
  $664B,$01 G
  $664C,$01 H
  $664D,$01 T
N $664E STRETCHING
  $664E,$01 S (ADJECTIVE)
  $664F,$01 T
  $6650,$01 R
  $6651,$01 E
  $6652,$01 T
  $6653,$01 C
  $6654,$01 H
  $6655,$01 I
  $6656,$01 N
  $6657,$01 G
N $6658 STRIKE
  $6658,$01 S (VERB)
  $6659,$01 T
  $665A,$01 R
  $665B,$01 I
  $665C,$01 K
  $665D,$01 E
N $665E STROKE
  $665E,$01 S (NOUN)
  $665F,$01 T
  $6660,$01 R
  $6661,$01 O
  $6662,$01 K
  $6663,$01 E
N $6664 STRONG
  $6664,$01 S (NOUN)
  $6665,$01 T
  $6666,$01 R
  $6667,$01 O
  $6668,$01 N
  $6669,$01 G
N $666A STUFFY
  $666A,$01 S (ADJECTIVE)
  $666B,$01 T
  $666C,$01 U
  $666D,$01 F
  $666E,$01 F
  $666F,$01 Y
N $6670 STUNNED
  $6670,$01 S (ADJECTIVE)
  $6671,$01 T
  $6672,$01 U
  $6673,$01 N
  $6674,$01 N
  $6675,$01 E
  $6676,$01 D
N $6677 SW
  $6677,$01 S (MOVE_DIR)
  $6678,$01 W
  $6679,$01 @
W $667A,$02 Alias of #R$6615.
N $667C SWIM
  $667C,$01 S (VERB)
  $667D,$01 W
  $667E,$01 I
  $667F,$01 M
N $6680 SWORD
  $6680,$01 S (NOUN)
  $6681,$01 W
  $6682,$01 O
  $6683,$01 R
  $6684,$01 D
N $6685 SYMBOLS
  $6685,$01 S (NOUN)
  $6686,$01 Y
  $6687,$01 M
  $6688,$01 B
  $6689,$01 O
  $668A,$01 L
  $668B,$01 S

b $668C "T"
@ $668C label=T
N $668C TAKE
  $668C,$01 T (VERB)
  $668D,$01 A
  $668E,$01 K
  $668F,$01 E
N $6690 TALK
  $6690,$01 T (VERB)
  $6691,$01 A
  $6692,$01 L
  $6693,$01 K
N $6694 TANGLED
  $6694,$01 T (ADJECTIVE)
  $6695,$01 A
  $6696,$01 N
  $6697,$01 G
  $6698,$01 L
  $6699,$01 E
  $669A,$01 D
N $669B THAT
  $669B,$01 T (ARTICLE_MISC)
  $669C,$01 H
  $669D,$01 A
  $669E,$01 T
N $669F THE
  $669F,$01 T (ARTICLE_MISC)
  $66A0,$01 H
  $66A1,$01 E
N $66A2 THEN
  $66A2,$01 T (THEN)
  $66A3,$01 H
  $66A4,$01 E
  $66A5,$01 N
N $66A6 THICK
  $66A6,$01 T (ADJECTIVE)
  $66A7,$01 H
  $66A8,$01 I
  $66A9,$01 C
  $66AA,$01 K
N $66AB THIEF
  $66AB,$01 T (NOUN)
  $66AC,$01 H
  $66AD,$01 I
  $66AE,$01 E
  $66AF,$01 F
N $66B0 THIN
  $66B0,$01 T (ADJECTIVE)
  $66B1,$01 H
  $66B2,$01 I
  $66B3,$01 N
N $66B4 THORIN
  $66B4,$01 T (NOUN)
  $66B5,$01 H
  $66B6,$01 O
  $66B7,$01 R
  $66B8,$01 I
  $66B9,$01 N
N $66BA THREADS
  $66BA,$01 T (ADJECTIVE)
  $66BB,$01 H
  $66BC,$01 R
  $66BD,$01 E
  $66BE,$01 A
  $66BF,$01 D
  $66C0,$01 S
N $66C1 THROUGH
  $66C1,$01 T (PREPOSITION)
  $66C2,$01 H
  $66C3,$01 R
  $66C4,$01 O
  $66C5,$01 U
  $66C6,$01 G
  $66C7,$01 H
N $66C8 THROW
  $66C8,$01 T (VERB)
  $66C9,$01 H
  $66CA,$01 R
  $66CB,$01 O
  $66CC,$01 W
N $66CD TIE
  $66CD,$01 T (VERB)
  $66CE,$01 I
  $66CF,$01 E
  $66D0,$01 @
N $66D1 TO
  $66D1,$01 T (PREPOSITION)
  $66D2,$01 O
  $66D3,$01 @
N $66D4 TOO
  $66D4,$01 T (PREPOSITION)
  $66D5,$01 O
  $66D6,$01 O
N $66D7 TORCH
  $66D7,$01 T (NOUN)
  $66D8,$01 O
  $66D9,$01 R
  $66DA,$01 C
  $66DB,$01 H
N $66DC TOWN
  $66DC,$01 T (NOUN)
  $66DD,$01 O
  $66DE,$01 W
  $66DF,$01 N
N $66E0 TRAP
  $66E0,$01 T (ADJECTIVE)
  $66E1,$01 R
  $66E2,$01 A
  $66E3,$01 P
N $66E4 TREASURE
  $66E4,$01 T (NOUN)
  $66E5,$01 R
  $66E6,$01 E
  $66E7,$01 A
  $66E8,$01 S
  $66E9,$01 U
  $66EA,$01 R
  $66EB,$01 E
N $66EC TREE
  $66EC,$01 T (NOUN)
  $66ED,$01 R
  $66EE,$01 E
  $66EF,$01 E
N $66F0 TREELESS
  $66F0,$01 T (ADJECTIVE)
  $66F1,$01 R
  $66F2,$01 E
  $66F3,$01 E
  $66F4,$01 L
  $66F5,$01 E
  $66F6,$01 S
  $66F7,$01 S
N $66F8 TROLL
  $66F8,$01 T (NOUN)
  $66F9,$01 R
  $66FA,$01 O
  $66FB,$01 L
  $66FC,$01 L
N $66FD TROLLS
  $66FD,$01 T (ADJECTIVE)
  $66FE,$01 R
  $66FF,$01 O
  $6700,$01 L
  $6701,$01 L
  $6702,$01 S
N $6703 TUNNEL
  $6703,$01 T (ADJECTIVE)
  $6704,$01 U
  $6705,$01 N
  $6706,$01 N
  $6707,$01 E
  $6708,$01 L
N $6709 TURN
  $6709,$01 T (VERB)
  $670A,$01 U
  $670B,$01 R
  $670C,$01 N

b $670D "U"
@ $670D label=U
N $670D U
  $670D,$01 U (ADVERB)
  $670E,$01 @
  $670F,$01 @
W $6710 Alias of #R$6725.
N $6712 UNLOCK
  $6712,$01 U (VERB)
  $6713,$01 N
  $6714,$01 L
  $6715,$01 O
  $6716,$01 C
  $6717,$01 K
N $6718 UNLOCKED
  $6718,$01 U (ADJECTIVE)
  $6719,$01 N
  $671A,$01 L
  $671B,$01 O
  $671C,$01 C
  $671D,$01 K
  $671E,$01 E
  $671F,$01 D
N $6720 UNTIE
  $6720,$01 U (VERB)
  $6721,$01 N (Beugung: S)
  $6722,$01 T
  $6723,$01 I
  $6724,$01 E
N $6725 UP
  $6725,$01 U (MOVE_DIR)
  $6726,$01 P
  $6727,$01 @

b $6728 "V"
@ $6728 label=V
N $6728 VALIANT
  $6728,$01 V (ADJECTIVE)
  $6729,$01 A
  $672A,$01 L
  $672B,$01 I
  $672C,$01 A
  $672D,$01 N
  $672E,$01 T
N $672F VALLEY
  $672F,$01 V (NOUN)
  $6730,$01 A
  $6731,$01 L
  $6732,$01 L
  $6733,$01 E
  $6734,$01 Y
N $6735 VALUABLE
  $6735,$01 V (ADJECTIVE)
  $6736,$01 A
  $6737,$01 L
  $6738,$01 U
  $6739,$01 A
  $673A,$01 B
  $673B,$01 L
  $673C,$01 E
N $673D VERY
  $673D,$01 V (ADJECTIVE)
  $673E,$01 E
  $673F,$01 R
  $6740,$01 Y
N $6741 VICIOUS
  $6741,$01 V (ADJECTIVE)
  $6742,$01 I
  $6743,$01 C
  $6744,$01 I
  $6745,$01 O
  $6746,$01 U
  $6747,$01 S
N $6748 VICIOUSLY
  $6748,$01 V (ADVERB)
  $6749,$01 I
  $674A,$01 C
  $674B,$01 I
  $674C,$01 O
  $674D,$01 U
  $674E,$01 S
  $674F,$01 L
  $6750,$01 Y

b $6751 "W"
@ $6751 label=W
N $6751 W
  $6751,$01 W (MOVE_DIR)
  $6752,$01 @
  $6753,$01 @
W $6754,$02 Alias of #R$6779.
N $6756 WAIT
  $6756,$01 W (VERB)
  $6757,$01 A
  $6758,$01 I
  $6759,$01 T
N $675A WALL
  $675A,$01 W (NOUN)
  $675B,$01 A
  $675C,$01 L
  $675D,$01 L
N $675E WATER
  $675E,$01 W (NOUN)
  $675F,$01 A
  $6760,$01 T
  $6761,$01 E
  $6762,$01 R
N $6763 WATERFALL
  $6763,$01 W (NOUN)
  $6764,$01 A
  $6765,$01 T
  $6766,$01 E
  $6767,$01 R
  $6768,$01 F
  $6769,$01 A
  $676A,$01 L
  $676B,$01 L
N $676C WEAPON
  $676C,$01 W (NOUN)
  $676D,$01 E
  $676E,$01 A
  $676F,$01 P
  $6770,$01 O
  $6771,$01 N
N $6772 WEAR
  $6772,$01 W (VERB)
  $6773,$01 E
  $6774,$01 A
  $6775,$01 R
N $6776 WEB
  $6776,$01 W (NOUN)
  $6777,$01 E
  $6778,$01 B
N $6779 WEST
  $6779,$01 W (MOVE_DIR)
  $677A,$01 E
  $677B,$01 S
  $677C,$01 T
N $677D WIDE
  $677D,$01 W (ADJECTIVE)
  $677E,$01 I
  $677F,$01 D
  $6780,$01 E
N $6781 WILD
  $6781,$01 W (ADJECTIVE)
  $6782,$01 I
  $6783,$01 L
  $6784,$01 D
N $6785 WINDING
  $6785,$01 W (ADJECTIVE)
  $6786,$01 I
  $6787,$01 N
  $6788,$01 D
  $6789,$01 I
  $678A,$01 N
  $678B,$01 G
N $678C WINDOW
  $678C,$01 W (NOUN)
  $678D,$01 I
  $678E,$01 N
  $678F,$01 D
  $6790,$01 O
  $6791,$01 W
N $6792 WINE
  $6792,$01 W (NOUN)
  $6793,$01 I
  $6794,$01 N
  $6795,$01 E
N $6796 WITH
  $6796,$01 W (PREPOSITION)
  $6797,$01 I
  $6798,$01 T
  $6799,$01 H
N $679A WARG
  $679A,$01 W (NOUN)
  $679B,$01 A
  $679C,$01 R
  $679D,$01 G
N $679E WOOD
  $679E,$01 W (ADJECTIVE)
  $679F,$01 O
  $67A0,$01 O
  $67A1,$01 D
N $67A2 WOODEN
  $67A2,$01 W (ADJECTIVE)
  $67A3,$01 O
  $67A4,$01 O
  $67A5,$01 D
  $67A6,$01 E
  $67A7,$01 N

b $67A8 "Y"
@ $67A8 label=Y
N $67A8 YOU
  $67A8,$01 Y (NOUN)
  $67A9,$01 O
  $67AA,$01 U

b $67AB
N $67AC ABLE
  $67AC,$01 A
  $67AD,$01 B
  $67AE,$01 L
  $67AF,$01 E
N $67B0 ABOUT
  $67B0,$01 A
  $67B1,$01 B
  $67B2,$01 O
  $67B3,$01 U
  $67B4,$01 T
N $67B5 ABOVE
  $67B5,$01 A
  $67B6,$01 B
  $67B7,$01 O
  $67B8,$01 V
  $67B9,$01 E
N $67BA ADVENTURE
  $67BA,$01 A
  $67BB,$01 D
  $67BC,$01 V
  $67BD,$01 E
  $67BE,$01 N
  $67BF,$01 T
  $67C0,$01 U
  $67C1,$01 R
  $67C2,$01 E
N $67C3 AGAIN
  $67C3,$01 A
  $67C4,$01 G
  $67C5,$01 A
  $67C6,$01 I
  $67C7,$01 N
N $67C8 AGAINST
  $67C8,$01 A
  $67C9,$01 G
  $67CA,$01 A
  $67CB,$01 I
  $67CC,$01 N
  $67CD,$01 S
  $67CE,$01 T
N $67CF AHEAD
  $67CF,$01 A
  $67D0,$01 H
  $67D1,$01 E
  $67D2,$01 A
  $67D3,$01 D
N $67D4 ALIVE
  $67D4,$01 A
  $67D5,$01 L
  $67D6,$01 I
  $67D7,$01 V
  $67D8,$01 E
N $67D9 ALMOST
  $67D9,$01 A
  $67DA,$01 L
  $67DB,$01 M
  $67DC,$01 O
  $67DD,$01 S
  $67DE,$01 T
N $67DF ALONG
  $67DF,$01 A
  $67E0,$01 L
  $67E1,$01 O
  $67E2,$01 N
  $67E3,$01 G
N $67E4 ANIMAL
  $67E4,$01 A
  $67E5,$01 N
  $67E6,$01 I
  $67E7,$01 M
  $67E8,$01 A
  $67E9,$01 L
N $67EA APPEAR
  $67EA,$01 A
  $67EB,$01 P
  $67EC,$01 P
  $67ED,$01 E
  $67EE,$01 A
  $67EF,$01 R
N $67F0 APPROACH
  $67F0,$01 A
  $67F1,$01 P
  $67F2,$01 P
  $67F3,$01 R
  $67F4,$01 O
  $67F5,$01 A
  $67F6,$01 C
  $67F7,$01 H
N $67F8 AROUND
  $67F8,$01 A
  $67F9,$01 R
  $67FA,$01 O
  $67FB,$01 U
  $67FC,$01 N
  $67FD,$01 D
N $67FE ARRIVES
  $67FE,$01 A
  $67FF,$01 R
  $6800,$01 R
  $6801,$01 I
  $6802,$01 V
  $6803,$01 E
  $6804,$01 S
N $6805 AS
  $6805,$01 A
  $6806,$01 S
  $6807,$01 @
N $6808 ASIDE
  $6808,$01 A
  $6809,$01 S
  $680A,$01 I
  $680B,$01 D
  $680C,$01 E
N $680D ASLEEP
  $680D,$01 A
  $680E,$01 S
  $680F,$01 L
  $6810,$01 E
  $6811,$01 E
  $6812,$01 P
N $6813 ATTEMPT
  $6813,$01 A
  $6814,$01 T
  $6815,$01 T
  $6816,$01 E
  $6817,$01 M
  $6818,$01 P
  $6819,$01 T
N $681A AWAY
  $681A,$01 A
  $681B,$01 W
  $681C,$01 A
  $681D,$01 Y
N $681E BANK
  $681E,$01 B
  $681F,$01 A
  $6820,$01 N
  $6821,$01 K
N $6822 BE
  $6822,$01 B
  $6823,$01 E
  $6824,$01 @
N $6825 BEHIND
  $6825,$01 B
  $6826,$01 E
  $6827,$01 H
  $6828,$01 I
  $6829,$01 N
  $682A,$01 D
N $682B BELOW
  $682B,$01 B
  $682C,$01 E
  $682D,$01 L
  $682E,$01 O
  $682F,$01 W
N $6830 BIRTHDAY
  $6830,$01 B
  $6831,$01 I
  $6832,$01 R
  $6833,$01 T
  $6834,$01 H
  $6835,$01 D
  $6836,$01 A
  $6837,$01 Y
N $6838 BLIMEY
  $6838,$01 B
  $6839,$01 L
  $683A,$01 I
  $683B,$01 M
  $683C,$01 E
  $683D,$01 Y
N $683E BRANDISH
  $683E,$01 B
  $683F,$01 R
  $6840,$01 A
  $6841,$01 N
  $6842,$01 D
  $6843,$01 I
  $6844,$01 S
  $6845,$01 H
N $6846 BRINK
  $6846,$01 B
  $6847,$01 R
  $6848,$01 I
  $6849,$01 N
  $684A,$01 K
N $684B BROADSIDE
  $684B,$01 B
  $684C,$01 R
  $684D,$01 O
  $684E,$01 A
  $684F,$01 D
  $6850,$01 S
  $6851,$01 I
  $6852,$01 D
  $6853,$01 E
N $6854 BULBOUS
  $6854,$01 B
  $6855,$01 U
  $6856,$01 L
  $6857,$01 B
  $6858,$01 O
  $6859,$01 U
  $685A,$01 S
N $685B BY
  $685B,$01 B
  $685C,$01 Y
  $685D,$01 @
N $685E CARRYING
  $685E,$01 C
  $685F,$01 A
  $6860,$01 R
  $6861,$01 R
  $6862,$01 Y
  $6863,$01 I
  $6864,$01 N
  $6865,$01 G
N $6866 CLEAVE
  $6866,$01 C
  $6867,$01 L
  $6868,$01 E
  $6869,$01 A
  $686A,$01 V
  $686B,$01 E
N $686C CLIFF
  $686C,$01 C
  $686D,$01 L
  $686E,$01 I
  $686F,$01 F
  $6870,$01 F
N $6871 COME
  $6871,$01 C
  $6872,$01 O
  $6873,$01 M
  $6874,$01 E
N $6875 COMPLETE
  $6875,$01 C
  $6876,$01 O
  $6877,$01 M
  $6878,$01 P
  $6879,$01 L
  $687A,$01 E
  $687B,$01 T
  $687C,$01 E
N $687D CONGRATULATION
  $687D,$01 C
  $687E,$01 O
  $687F,$01 N
  $6880,$01 G
  $6881,$01 R
  $6882,$01 A
  $6883,$01 T
  $6884,$01 U
  $6885,$01 L
  $6886,$01 A
  $6887,$01 T
  $6888,$01 I
  $6889,$01 O
  $688A,$01 N
N $688B COOK
  $688B,$01 C
  $688C,$01 O
  $688D,$01 O
  $688E,$01 K
N $688F CURRENT
  $688F,$01 C
  $6890,$01 U
  $6891,$01 R
  $6892,$01 R
  $6893,$01 E
  $6894,$01 N
  $6895,$01 T
N $6896 CRISP
  $6896,$01 C
  $6897,$01 R
  $6898,$01 I
  $6899,$01 S
  $689A,$01 P
N $689B DAWN
  $689B,$01 D
  $689C,$01 A
  $689D,$01 W
  $689E,$01 N
N $689F DAY
  $689F,$01 D
  $68A0,$01 A
  $68A1,$01 Y
N $68A2 DEFENSE
  $68A2,$01 D
  $68A3,$01 E
  $68A4,$01 F
  $68A5,$01 E
  $68A6,$01 N
  $68A7,$01 S
  $68A8,$01 E
N $68A9 DESCENDS
  $68A9,$01 D
  $68AA,$01 E
  $68AB,$01 S
  $68AC,$01 C
  $68AD,$01 E
  $68AE,$01 N
  $68AF,$01 D
  $68B0,$01 S
N $68B1 DIE
  $68B1,$01 D
  $68B2,$01 I
  $68B3,$01 E
N $68B4 DID
  $68B4,$01 D
  $68B5,$01 I
  $68B6,$01 D
N $68B7 DIM
  $68B7,$01 D
  $68B8,$01 I
  $68B9,$01 M
N $68BA DISTANCE
  $68BA,$01 D
  $68BB,$01 I
  $68BC,$01 S
  $68BD,$01 T
  $68BE,$01 A
  $68BF,$01 N
  $68C0,$01 C
  $68C1,$01 E
N $68C2 DO
  $68C2,$01 D
  $68C3,$01 O
  $68C4,$01 @
  $68C5,$01 @
N $68C6 DO
  $68C6,$01 D
  $68C7,$01 O
  $68C8,$01 @
  $68C9,$01 @
N $68CA DRIPS
  $68CA,$01 D
  $68CB,$01 R
  $68CC,$01 I
  $68CD,$01 P
  $68CE,$01 S
N $68CF EFFORT
  $68CF,$01 E
  $68D0,$01 F
  $68D1,$01 F
  $68D2,$01 O
  $68D3,$01 R
  $68D4,$01 T
N $68D5 END
  $68D5,$01 E
  $68D6,$01 N
  $68D7,$01 D
  $68D8,$01 @
N $68D9 ENTRANCE
  $68D9,$01 E
  $68DA,$01 N
  $68DB,$01 T
  $68DC,$01 R
  $68DD,$01 A
  $68DE,$01 N
  $68DF,$01 C
  $68E0,$01 E
N $68E1 EVAPORATE
  $68E1,$01 E
  $68E2,$01 V
  $68E3,$01 A
  $68E4,$01 P
  $68E5,$01 O
  $68E6,$01 R
  $68E7,$01 A
  $68E8,$01 T
  $68E9,$01 E
N $68EA EVENING
  $68EA,$01 E
  $68EB,$01 V
  $68EC,$01 E
  $68ED,$01 N
  $68EE,$01 I
  $68EF,$01 N
  $68F0,$01 G
N $68F1 EXITS
  $68F1,$01 E
  $68F2,$01 X
  $68F3,$01 I
  $68F4,$01 T
  $68F5,$01 S
N $68F6 EXPECT
  $68F6,$01 E
  $68F7,$01 X
  $68F8,$01 P
  $68F9,$01 E
  $68FA,$01 C
  $68FB,$01 T
N $68FC FAILED
  $68FC,$01 F
  $68FD,$01 A
  $68FE,$01 I
  $68FF,$01 L
  $6900,$01 E
  $6901,$01 D
N $6902 FAILING
  $6902,$01 F
  $6903,$01 A
  $6904,$01 I
  $6905,$01 L
  $6906,$01 I
  $6907,$01 N
  $6908,$01 G
N $6909 FAR
  $6909,$01 F
  $690A,$01 A
  $690B,$01 R
N $690C FATAL
  $690C,$01 F
  $690D,$01 A
  $690E,$01 T
  $690F,$01 A
  $6910,$01 L
N $6911 FEED
  $6911,$01 F
  $6912,$01 E
  $6913,$01 E
  $6914,$01 D
N $6915 FELT
  $6915,$01 F
  $6916,$01 E
  $6917,$01 L
  $6918,$01 T
N $6919 FIT
  $6919,$01 F
  $691A,$01 I
  $691B,$01 T
N $691C FIRST
  $691C,$01 F
  $691D,$01 I
  $691E,$01 R
  $691F,$01 S
  $6920,$01 T
N $6921 FLAME
  $6921,$01 F
  $6922,$01 L
  $6923,$01 A
  $6924,$01 M
  $6925,$01 E
N $6926 FLOAT
  $6926,$01 F
  $6927,$01 L
  $6928,$01 O
  $6929,$01 A
  $692A,$01 T
N $692B FLYING
  $692B,$01 F
  $692C,$01 L
  $692D,$01 Y
  $692E,$01 I
  $692F,$01 N
  $6930,$01 G
N $6931 FOOT
  $6931,$01 F
  $6932,$01 O
  $6933,$01 O
  $6934,$01 T
N $6935 FOOTING
  $6935,$01 F
  $6936,$01 O
  $6937,$01 O
  $6938,$01 T
  $6939,$01 I
  $693A,$01 N
  $693B,$01 G
N $693C FOUR
  $693C,$01 F
  $693D,$01 O
  $693E,$01 U
  $693F,$01 R
N $6940 FRONT
  $6940,$01 F
  $6941,$01 R
  $6942,$01 O
  $6943,$01 N
  $6944,$01 T
N $6945 GETTING
  $6945,$01 G
  $6946,$01 E
  $6947,$01 T
  $6948,$01 T
  $6949,$01 I
  $694A,$01 N
  $694B,$01 G
N $694C GLANCING
  $694C,$01 G
  $694D,$01 L
  $694E,$01 A
  $694F,$01 N
  $6950,$01 C
  $6951,$01 I
  $6952,$01 N
  $6953,$01 G
N $6954 GLIDES
  $6954,$01 G
  $6955,$01 L
  $6956,$01 I
  $6957,$01 D
  $6958,$01 E
  $6959,$01 S
N $695A GLUTTONY
  $695A,$01 G
  $695B,$01 L
  $695C,$01 U
  $695D,$01 T
  $695E,$01 T
  $695F,$01 O
  $6960,$01 N
  $6961,$01 Y
N $6962 GOT
  $6962,$01 G
  $6963,$01 O
  $6964,$01 T
N $6965 GROUND
  $6965,$01 G
  $6966,$01 R
  $6967,$01 O
  $6968,$01 U
  $6969,$01 N
  $696A,$01 D
N $696B GROW
  $696B,$01 G
  $696C,$01 R
  $696D,$01 O
  $696E,$01 W
N $696F GUARD
  $696F,$01 G
  $6970,$01 U
  $6971,$01 A
  $6972,$01 R
  $6973,$01 D
N $6974 HANGING
  $6974,$01 H
  $6975,$01 A
  $6976,$01 N
  $6977,$01 G
  $6978,$01 I
  $6979,$01 N
  $697A,$01 G
N $697B HAS
  $697B,$01 H
  $697C,$01 A
  $697D,$01 S
N $697E HAVE
  $697E,$01 H
  $697F,$01 A
  $6980,$01 V
  $6981,$01 E
N $6982 HE
  $6982,$01 H
  $6983,$01 E
  $6984,$01 @
N $6985 HEAR
  $6985,$01 H
  $6986,$01 E
  $6987,$01 A
  $6988,$01 R
N $6989 HERE
  $6989,$01 H
  $698A,$01 E
  $698B,$01 R
  $698C,$01 E
N $698D HIM
  $698D,$01 H
  $698E,$01 I
  $698F,$01 M
N $6990 HIS
  $6990,$01 H
  $6991,$01 I
  $6992,$01 S
N $6993 HOW
  $6993,$01 H
  $6994,$01 O
  $6995,$01 W
N $6996 HOWLS
  $6996,$01 H
  $6997,$01 O
  $6998,$01 W
  $6999,$01 L
  $699A,$01 S
N $699B HURRY
  $699B,$01 H
  $699C,$01 U
  $699D,$01 R
  $699E,$01 R
  $699F,$01 Y
N $69A0 INEFFECTIVE
  $69A0,$01 I
  $69A1,$01 N
  $69A2,$01 E
  $69A3,$01 F
  $69A4,$01 F
  $69A5,$01 E
  $69A6,$01 C
  $69A7,$01 T
  $69A8,$01 I
  $69A9,$01 V
  $69AA,$01 E
N $69AB ITS
  $69AB,$01 I
  $69AC,$01 T
  $69AD,$01 S
N $69AE JOB
  $69AE,$01 J
  $69AF,$01 O
  $69B0,$01 B
N $69B1 JUST
  $69B1,$01 J
  $69B2,$01 U
  $69B3,$01 S
  $69B4,$01 T
N $69B5 LURCH
  $69B5,$01 L
  $69B6,$01 U
  $69B7,$01 R
  $69B8,$01 C
  $69B9,$01 H
N $69BA KEEPS
  $69BA,$01 K
  $69BB,$01 E
  $69BC,$01 E
  $69BD,$01 P
  $69BE,$01 S
N $69BF KNOCKS
  $69BF,$01 K
  $69C0,$01 N
  $69C1,$01 O
  $69C2,$01 C
  $69C3,$01 K
  $69C4,$01 S
N $69C5 KNOW
  $69C5,$01 K
  $69C6,$01 N
  $69C7,$01 O
  $69C8,$01 W
N $69C9 LAST
  $69C9,$01 L
  $69CA,$01 A
  $69CB,$01 S
  $69CC,$01 T
N $69CD LAUGHS
  $69CD,$01 L
  $69CE,$01 A
  $69CF,$01 U
  $69D0,$01 G
  $69D1,$01 H
  $69D2,$01 S
N $69D3 LAUGHTER
  $69D3,$01 L
  $69D4,$01 A
  $69D5,$01 U
  $69D6,$01 G
  $69D7,$01 H
  $69D8,$01 T
  $69D9,$01 E
  $69DA,$01 R
N $69DB LIE
  $69DB,$01 L
  $69DC,$01 I
  $69DD,$01 E
  $69DE,$01 @
N $69DF LIFE
  $69DF,$01 L
  $69E0,$01 I
  $69E1,$01 F
  $69E2,$01 E
N $69E3 LIVES
  $69E3,$01 L
  $69E4,$01 I
  $69E5,$01 V
  $69E6,$01 E
  $69E7,$01 S
N $69E8 LOSE
  $69E8,$01 L
  $69E9,$01 O
  $69EA,$01 S
  $69EB,$01 E
N $69EC LOUD
  $69EC,$01 L
  $69ED,$01 O
  $69EE,$01 U
  $69EF,$01 D
N $69F0 LUCKY
  $69F0,$01 L
  $69F1,$01 U
  $69F2,$01 C
  $69F3,$01 K
  $69F4,$01 Y
N $69F5 MADE
  $69F5,$01 M
  $69F6,$01 A
  $69F7,$01 D
  $69F8,$01 E
N $69F9 MAKE
  $69F9,$01 M
  $69FA,$01 A
  $69FB,$01 K
  $69FC,$01 E
N $69FD MARGIN
  $69FD,$01 M
  $69FE,$01 A
  $69FF,$01 R
  $6A00,$01 G
  $6A01,$01 I
  $6A02,$01 N
N $6A03 MARVELLOUS
  $6A03,$01 M
  $6A04,$01 A
  $6A05,$01 R
  $6A06,$01 V
  $6A07,$01 E
  $6A08,$01 L
  $6A09,$01 L
  $6A0A,$01 O
  $6A0B,$01 U
  $6A0C,$01 S
N $6A0D MAY
  $6A0D,$01 M
  $6A0E,$01 A
  $6A0F,$01 Y
N $6A10 MAYBE
  $6A10,$01 M
  $6A11,$01 A
  $6A12,$01 Y
  $6A13,$01 B
  $6A14,$01 E
N $6A15 MEND
  $6A15,$01 M
  $6A16,$01 E
  $6A17,$01 N
  $6A18,$01 D
N $6A19 MIDDLE
  $6A19,$01 M
  $6A1A,$01 I
  $6A1B,$01 D
  $6A1C,$01 D
  $6A1D,$01 L
  $6A1E,$01 E
N $6A1F MIDDAY
  $6A1F,$01 M
  $6A20,$01 I
  $6A21,$01 D
  $6A22,$01 D
  $6A23,$01 A
  $6A24,$01 Y
N $6A25 MISS
  $6A25,$01 M
  $6A26,$01 I
  $6A27,$01 S
  $6A28,$01 S
N $6A29 MOMENT
  $6A29,$01 M
  $6A2A,$01 O
  $6A2B,$01 M
  $6A2C,$01 E
  $6A2D,$01 N
  $6A2E,$01 T
N $6A2F MOMENTARILY
  $6A2F,$01 M
  $6A30,$01 O
  $6A31,$01 M
  $6A32,$01 E
  $6A33,$01 N
  $6A34,$01 T
  $6A35,$01 A
  $6A36,$01 R
  $6A37,$01 I
  $6A38,$01 L
  $6A39,$01 Y
N $6A3A MORN
  $6A3A,$01 M
  $6A3B,$01 O
  $6A3C,$01 R
  $6A3D,$01 N
N $6A3E MOUTHFULL
  $6A3E,$01 M
  $6A3F,$01 O
  $6A40,$01 U
  $6A41,$01 T
  $6A42,$01 H
  $6A43,$01 F
  $6A44,$01 U
  $6A45,$01 L
  $6A46,$01 L
N $6A47 MOVE
  $6A47,$01 M
  $6A48,$01 O
  $6A49,$01 V
  $6A4A,$01 E
N $6A4B MUCH
  $6A4B,$01 M
  $6A4C,$01 U
  $6A4D,$01 C
  $6A4E,$01 H
N $6A4F MY
  $6A4F,$01 M
  $6A50,$01 Y
  $6A51,$01 @
N $6A52 NO
  $6A52,$01 N
  $6A53,$01 O
  $6A54,$01 @
N $6A55 NOISE
  $6A55,$01 N
  $6A56,$01 O
  $6A57,$01 I
  $6A58,$01 S
  $6A59,$01 E
N $6A5A NOT
  $6A5A,$01 N
  $6A5B,$01 O
  $6A5C,$01 T
N $6A5D NOTHING
  $6A5D,$01 N
  $6A5E,$01 O
  $6A5F,$01 T
  $6A60,$01 H
  $6A61,$01 I
  $6A62,$01 N
  $6A63,$01 G
N $6A64 NOW
  $6A64,$01 N
  $6A65,$01 O
  $6A66,$01 W
N $6A67 ONCE
  $6A67,$01 O
  $6A68,$01 N
  $6A69,$01 C
  $6A6A,$01 E
N $6A6B OTHER
  $6A6B,$01 O
  $6A6C,$01 T
  $6A6D,$01 H
  $6A6E,$01 E
  $6A6F,$01 R
N $6A70 PALE
  $6A70,$01 P
  $6A71,$01 A
  $6A72,$01 L
  $6A73,$01 E
N $6A74 PASSES
  $6A74,$01 P
  $6A75,$01 A
  $6A76,$01 S
  $6A77,$01 S
  $6A78,$01 E
  $6A79,$01 S
N $6A7A PAST
  $6A7A,$01 P
  $6A7B,$01 A
  $6A7C,$01 S
  $6A7D,$01 T
N $6A7E PLACE
  $6A7E,$01 P
  $6A7F,$01 L
  $6A80,$01 A
  $6A81,$01 C
  $6A82,$01 E
N $6A83 POCKET
  $6A83,$01 P
  $6A84,$01 O
  $6A85,$01 C
  $6A86,$01 K
  $6A87,$01 E
  $6A88,$01 T
N $6A89 PRECIOUS
  $6A89,$01 P
  $6A8A,$01 R
  $6A8B,$01 E
  $6A8C,$01 C
  $6A8D,$01 I
  $6A8E,$01 O
  $6A8F,$01 U
  $6A90,$01 S
N $6A91 PREPARE
  $6A91,$01 P
  $6A92,$01 R
  $6A93,$01 E
  $6A94,$01 P
  $6A95,$01 A
  $6A96,$01 R
  $6A97,$01 E
N $6A98 PRESENT
  $6A98,$01 P
  $6A99,$01 R
  $6A9A,$01 E
  $6A9B,$01 S
  $6A9C,$01 E
  $6A9D,$01 N
  $6A9E,$01 T
N $6A9F REACH
  $6A9F,$01 R
  $6AA0,$01 E
  $6AA1,$01 A
  $6AA2,$01 C
  $6AA3,$01 H
N $6AA4 RECOVER
  $6AA4,$01 R
  $6AA5,$01 E
  $6AA6,$01 C
  $6AA7,$01 O
  $6AA8,$01 V
  $6AA9,$01 E
  $6AAA,$01 R
N $6AAB SAIL
  $6AAB,$01 S
  $6AAC,$01 A
  $6AAD,$01 I
  $6AAE,$01 L
N $6AAF SEE
  $6AAF,$01 S
  $6AB0,$01 E
  $6AB1,$01 E
N $6AB2 SEEM
  $6AB2,$01 S
  $6AB3,$01 E
  $6AB4,$01 E
  $6AB5,$01 M
N $6AB6 SHADOW
  $6AB6,$01 S
  $6AB7,$01 H
  $6AB8,$01 A
  $6AB9,$01 D
  $6ABA,$01 O
  $6ABB,$01 W
N $6ABC SHAPE
  $6ABC,$01 S
  $6ABD,$01 H
  $6ABE,$01 A
  $6ABF,$01 P
  $6AC0,$01 E
N $6AC1 SHATTER
  $6AC1,$01 S
  $6AC2,$01 H
  $6AC3,$01 A
  $6AC4,$01 T
  $6AC5,$01 T
  $6AC6,$01 E
  $6AC7,$01 R
N $6AC8 SING
  $6AC8,$01 S
  $6AC9,$01 I
  $6ACA,$01 N
  $6ACB,$01 G
N $6ACC SINK
  $6ACC,$01 S
  $6ACD,$01 I
  $6ACE,$01 N
  $6ACF,$01 K
N $6AD0 SIT
  $6AD0,$01 S
  $6AD1,$01 I
  $6AD2,$01 T
  $6AD3,$01 @
N $6AD4 SLIDE
  $6AD4,$01 S
  $6AD5,$01 L
  $6AD6,$01 I
  $6AD7,$01 D
  $6AD8,$01 E
N $6AD9 SMELL
  $6AD9,$01 S
  $6ADA,$01 M
  $6ADB,$01 E
  $6ADC,$01 L
  $6ADD,$01 L
N $6ADE SMELT
  $6ADE,$01 S
  $6ADF,$01 M
  $6AE0,$01 E
  $6AE1,$01 L
  $6AE2,$01 T
N $6AE3 SOMEONE
  $6AE3,$01 S
  $6AE4,$01 O
  $6AE5,$01 M
  $6AE6,$01 E
  $6AE7,$01 O
  $6AE8,$01 N
  $6AE9,$01 E
N $6AEA SOMEWHERE
  $6AEA,$01 S
  $6AEB,$01 O
  $6AEC,$01 M
  $6AED,$01 E
  $6AEE,$01 W
  $6AEF,$01 H
  $6AF0,$01 E
  $6AF1,$01 R
  $6AF2,$01 E
N $6AF3 SOON
  $6AF3,$01 S
  $6AF4,$01 O
  $6AF5,$01 O
  $6AF6,$01 N
N $6AF7 SPECIAL
  $6AF7,$01 S
  $6AF8,$01 P
  $6AF9,$01 E
  $6AFA,$01 C
  $6AFB,$01 I
  $6AFC,$01 A
  $6AFD,$01 L
N $6AFE SPOUT
  $6AFE,$01 S
  $6AFF,$01 P
  $6B00,$01 O
  $6B01,$01 U
  $6B02,$01 T
N $6B03 STAGGER
  $6B03,$01 S
  $6B04,$01 T
  $6B05,$01 A
  $6B06,$01 G
  $6B07,$01 G
  $6B08,$01 E
  $6B09,$01 R
N $6B0A STAND
  $6B0A,$01 S
  $6B0B,$01 T
  $6B0C,$01 A
  $6B0D,$01 N
  $6B0E,$01 D
N $6B0F STAR
  $6B0F,$01 S
  $6B10,$01 T
  $6B11,$01 A
  $6B12,$01 R
N $6B13 STAR
  $6B13,$01 S
  $6B14,$01 T
  $6B15,$01 A
  $6B16,$01 R
N $6B17 START
  $6B17,$01 S
  $6B18,$01 T
  $6B19,$01 A
  $6B1A,$01 R
  $6B1B,$01 T
N $6B1C STILL
  $6B1C,$01 S
  $6B1D,$01 T
  $6B1E,$01 I
  $6B1F,$01 L
  $6B20,$01 L
N $6B21 STING
  $6B21,$01 S
  $6B22,$01 T
  $6B23,$01 I
  $6B24,$01 N
  $6B25,$01 G
N $6B26 STRANGLE
  $6B26,$01 S
  $6B27,$01 T
  $6B28,$01 R
  $6B29,$01 A
  $6B2A,$01 N
  $6B2B,$01 G
  $6B2C,$01 L
  $6B2D,$01 E
N $6B2E STRENGTH
  $6B2E,$01 S
  $6B2F,$01 T
  $6B30,$01 R
  $6B31,$01 E
  $6B32,$01 N
  $6B33,$01 G
  $6B34,$01 T
  $6B35,$01 H
N $6B36 SURROUNDED
  $6B36,$01 S
  $6B37,$01 U
  $6B38,$01 R
  $6B39,$01 R
  $6B3A,$01 O
  $6B3B,$01 U
  $6B3C,$01 N
  $6B3D,$01 D
  $6B3E,$01 E
  $6B3F,$01 D
N $6B40 SWEEPS
  $6B40,$01 S
  $6B41,$01 W
  $6B42,$01 E
  $6B43,$01 E
  $6B44,$01 P
  $6B45,$01 S
N $6B46 SWEPT
  $6B46,$01 S
  $6B47,$01 W
  $6B48,$01 E
  $6B49,$01 P
  $6B4A,$01 T
N $6B4B SWING
  $6B4B,$01 S
  $6B4C,$01 W
  $6B4D,$01 I
  $6B4E,$01 N
  $6B4F,$01 G
N $6B50 TERRIFIC
  $6B50,$01 T
  $6B51,$01 E
  $6B52,$01 R
  $6B53,$01 R
  $6B54,$01 I
  $6B55,$01 F
  $6B56,$01 I
  $6B57,$01 C
N $6B58 THANK
  $6B58,$01 T
  $6B59,$01 H
  $6B5A,$01 A
  $6B5B,$01 N
  $6B5C,$01 K
N $6B5D THEM
  $6B5D,$01 T
  $6B5E,$01 H
  $6B5F,$01 E
  $6B60,$01 M
N $6B61 THERE
  $6B61,$01 T
  $6B62,$01 H
  $6B63,$01 E
  $6B64,$01 R
  $6B65,$01 E
N $6B66 THING
  $6B66,$01 T
  $6B67,$01 H
  $6B68,$01 I
  $6B69,$01 N
  $6B6A,$01 G
N $6B6B THIS
  $6B6B,$01 T
  $6B6C,$01 H
  $6B6D,$01 I
  $6B6E,$01 S
N $6B6F THRAINS
  $6B6F,$01 T
  $6B70,$01 H
  $6B71,$01 R
  $6B72,$01 A
  $6B73,$01 I
  $6B74,$01 N
  $6B75,$01 S
N $6B76 THREE
  $6B76,$01 T
  $6B77,$01 H
  $6B78,$01 R
  $6B79,$01 E
  $6B7A,$01 E
N $6B7B THROWN
  $6B7B,$01 T
  $6B7C,$01 H
  $6B7D,$01 R
  $6B7E,$01 O
  $6B7F,$01 W
  $6B80,$01 N
N $6B81 THRUST
  $6B81,$01 T
  $6B82,$01 H
  $6B83,$01 R
  $6B84,$01 U
  $6B85,$01 S
  $6B86,$01 T
N $6B87 TIME
  $6B87,$01 T
  $6B88,$01 I
  $6B89,$01 M
  $6B8A,$01 E
N $6B8B TIRED
  $6B8B,$01 T
  $6B8C,$01 I
  $6B8D,$01 R
  $6B8E,$01 E
  $6B8F,$01 D
N $6B90 TRY
  $6B90,$01 T
  $6B91,$01 R
  $6B92,$01 Y
N $6B93 TOUCH
  $6B93,$01 T
  $6B94,$01 O
  $6B95,$01 U
  $6B96,$01 C
  $6B97,$01 H
N $6B98 TWO
  $6B98,$01 T
  $6B99,$01 W
  $6B9A,$01 O
N $6B9B UNDER
  $6B9B,$01 U
  $6B9C,$01 N
  $6B9D,$01 D
  $6B9E,$01 E
  $6B9F,$01 R
N $6BA0 US
  $6BA0,$01 U
  $6BA1,$01 S
  $6BA2,$01 @
N $6BA3 VANISH
  $6BA3,$01 V
  $6BA4,$01 A
  $6BA5,$01 N
  $6BA6,$01 I
  $6BA7,$01 S
  $6BA8,$01 H
N $6BA9 VERB
  $6BA9,$01 V
  $6BAA,$01 E
  $6BAB,$01 R
  $6BAC,$01 B
N $6BAD VISIBLE
  $6BAD,$01 V
  $6BAE,$01 I
  $6BAF,$01 S
  $6BB0,$01 I
  $6BB1,$01 B
  $6BB2,$01 L
  $6BB3,$01 E
N $6BB4 WARN
  $6BB4,$01 W
  $6BB5,$01 A
  $6BB6,$01 R
  $6BB7,$01 N
N $6BB8 WAS
  $6BB8,$01 W
  $6BB9,$01 A
  $6BBA,$01 S
N $6BBB WASTED
  $6BBB,$01 W
  $6BBC,$01 A
  $6BBD,$01 S
  $6BBE,$01 T
  $6BBF,$01 E
  $6BC0,$01 D
N $6BC1 WE
  $6BC1,$01 W
  $6BC2,$01 E
  $6BC3,$01 @
N $6BC4 WELL
  $6BC4,$01 W
  $6BC5,$01 E
  $6BC6,$01 L
  $6BC7,$01 L
N $6BC8 WHAT
  $6BC8,$01 W
  $6BC9,$01 H
  $6BCA,$01 A
  $6BCB,$01 T
N $6BCC WHERE
  $6BCC,$01 W
  $6BCD,$01 H
  $6BCE,$01 E
  $6BCF,$01 R
  $6BD0,$01 E
N $6BD1 WHICH
  $6BD1,$01 W
  $6BD2,$01 H
  $6BD3,$01 I
  $6BD4,$01 C
  $6BD5,$01 H
N $6BD6 WILL
  $6BD6,$01 W
  $6BD7,$01 I
  $6BD8,$01 L
  $6BD9,$01 L
N $6BDA WIND
  $6BDA,$01 W
  $6BDB,$01 I
  $6BDC,$01 N
  $6BDD,$01 D
N $6BDE WORD
  $6BDE,$01 W
  $6BDF,$01 O
  $6BE0,$01 R
  $6BE1,$01 D
N $6BE2 WOULD
  $6BE2,$01 W
  $6BE3,$01 O
  $6BE4,$01 U
  $6BE5,$01 L
  $6BE6,$01 D
N $6BE7 YER
  $6BE7,$01 Y
  $6BE8,$01 E
  $6BE9,$01 R
N $6BEA YOUR
  $6BEA,$01 Y
  $6BEB,$01 O
  $6BEC,$01 U
  $6BED,$01 R

c $6C00 Game Entry Point
@ $6C00 label=Start
  $6C00,$01 Disable interrupts.
N $6C01 Initial set-up; copies "clean" data to the "CopyOf..." store. This is then used to create a new game in #R$6C27.
  $6C01,$0B Copies #R$C11B to #R$F400 ($615 bytes).
  $6C0C,$08 Copies #R$BA8A to #R$FA15 ($5D9 bytes).
  $6C14,$0B Copies #R$B6EB to $5F00 ($1D bytes).
  $6C1F,$08 Copies $CA84 to $5F1D ($BF bytes).
@ $6C27 label=ReStart
  $6C27,$01 Disable interrupts.
  $6C28,$03 Set the stack pointer to #R$5EFF.
N $6C2B Reset the border and paper colours for location #LOCATION($05, 1, 1)($) - "#LOCATIONNAME($05)".
  $6C2B,$04 #REGix=#R$CC00
  $6C2F,$05 Call #R$9DBD with location #LOCATION($05, 1, 1)($) - "#LOCATIONNAME($05)".
  $6C34,$06 #REGhl=#R$E142 (#REGhl=location graphics data for "#LOCATIONNAME($05)").
  $6C3A,$05 Write $00 (black) to the first (border) and second (paper) addresses.
N $6C3F Copy "clean" data to the game tables ready for a new game.
  $6C3F,$0B Copies #R$F400 to #R$C11B ($615 bytes).
  $6C4A,$08 Copies #R$FA15 to #R$BA8A ($5D9 bytes).
  $6C52,$0B Copies $5F00 to #R$B6EB ($1D bytes).
  $6C5D,$08 Copies $CA84 to $5F1D ($BF bytes).
  $6C65,$03 Set the border colour to black.
  $6C68,$05 #HTML(Write $38 to <a href="https://skoolkid.github.io/rom/asm/5C48.html">BORDCR</a>.)
@ $6C6D label=ReStart_Keypress
  $6C6D,$03 Read from the keyboard port.
  $6C70,$02,b$01 A pressed key from any line will set its respective bit; bit 0 (outer key) to bit 4 (inner key).
.           Hence keep only bits 0-4 for the check.
  $6C72,$04 Loop back to #R$6C6D until any key has been pressed.

  $6C76,$04 Read from the keyboard port.
. #TABLE(default,centre,centre,centre,centre,centre,centre)
. { =h,r2 Port Number | =h,c5 Bit }
. { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
. { $7F | SPACE | FULL-STOP | M | N | B }
. TABLE#
  $6C7A,$02,b$01 Keep bit 3 ("N").
  $6C7C,$03 Write it to #R$B707.
  $6C7F,$06 Write $50E0 to #R$85B4(the percentage buffer).
  $6C85,$05 Write $2B to #R$85B4($85B6).
  $6C8A,$06 Write $5020 to #R$869C.
  $6C90,$05 Write $01 to #R$869E.
  $6C95,$05 Write $20 to #R$85B3.
  $6C9A,$05 Write $2A to #R$869B.
  $6C9F,$08 Write $00 to #N$C8 bytes, starting from #R$B738 (using #R$70E2).
  $6CA7,$05 #REGr = refresh register; i.e. write a semi-random number to #R$B70E.
  $6CAC,$10 Write $00 to;
.           #LIST
.           { #R$869F }
.           { #R$86A0 }
.           { #R$B71A }
.           { #R$B700 }
.           { #R$B6F2 }
.           LIST#
  $6CBC,$0B Write $01 to;
.           #LIST
.           { #R$B702 }
.           { #R$B6FA }
.           { #R$B704 }
.           LIST#
  $6CC7,$06 Write $0000 to #R$B6F7.
N $6CCD This section draws the "Squiggle" line which separates the windows.
  $6CCD,$03 Call #R$6FD3.
  $6CD0,$03 #REGhl=#R$5140
  $6CD3,$03 #REGde=#R$6DCC
  $6CD6,$02 #REGc=$05.
@ $6CD8 label=SquiggleGFX_Loop_1
  $6CD8,$02 Set a counter of $10.
  $6CDA,$01 Stash #REGhl (the screen buffer pointer) temporarily - this is because the line is a repeated pattern.
@ $6CDB label=SquiggleGFX_Loop_2
  $6CDB,$02 Copy one byte from #REGde (the squiggle graphics data), to #REGhl (the screen buffer).
  $6CDD,$02 Increase both pointers by one.
  $6CDF,$02 Copy one byte from #REGde (the squiggle graphics data), to #REGhl (the screen buffer).
  $6CE1,$01 Increase #REGhl (the screen buffer) pointer by one.
  $6CE2,$01 Decrease #REGde (the squiggle graphics data) pointer by one.
  $6CE3,$02 Decrease counter by one and loop back to #R$6CDB until counter is zero.
  $6CE5,$02 Increase #REGde (the squiggle graphics data) pointer by two.
  $6CE7,$01 Restore #REGhl (the screen buffer position) from the stack.
  $6CE8,$01 Increase #REGh by one (i.e. move down a line).
  $6CE9,$03 Decrease #REGc by one and loop back to #R$6CD8 until counter is zero.

  $6CEC,$05 Write $11 to #R$B716.
  $6CF1,$03 #REGa=#R$B706.
  $6CF4,$01 Increase #REGa by one.
  $6CF5,$02 If #REGa is not zero then jump to #R$6D13.
  $6CF7,$03 Call #R$97AD.

  $6CFA,$03 #REGhl=#R$6FF2

  $6D06,$0B Copies $6FF4 to $6FF9 ($05 bytes).
  $6D11,$02 Jump to #R$6D22.

  $6D13,$05 Write $01 to #R$B705.
  $6D18,$05 Write $09 to #R$B716.
  $6D1D,$03 Call #R$6DD6.

  $6D22,$08 Write $00 to #N$40 bytes, starting from #R$709C (using #R$70E2).
  $6D2A,$03 #REGhl=#R$6FF9.
  $6D2D,$04 #REGiy=#R$709C.
  $6D31,$03 Call #R$6E97.

  $6D9F,$03 Jump to #R$6D13.

  $6DA2,$03 #REGhl=#R$AD93("i do not know the word "[0x16]"")
  $6DA5,$05 Write $01 to #R$B701.
  $6DAA,$03 Call #R$72DD.

  $6DC9,$03 Jump to #R$6D13.

b $6DCC Squiggle Graphics
@ $6DCC label=SquiggleGFX
  $6DCC,$0A

c $6DD6

c $6FD3 Clear Screen
@ $6FD3 label=ClearScreen
  $6FD3,$03 Push #REGhl, #REGde and #REGbc onto the stack.
  $6FD6,$04 Set the border colour to white.
  $6FDA,$0D Write $00 to $1800 memory locations (clearing the screen buffer).
  $6FE7,$07 Write $38 to the following $300 memory locations (the attribute buffer).
  $6FEE,$03 Pop #REGhl, #REGde and #REGbc from the stack.
  $6FF1,$01 Return.

b $6FF2 Input Buffer
@ $6FF2 label=InputBuffer
  $6FF2,$02
  $6FF4,$05
  $6FF9,$81,$10
  $707A,$10,10
  $708A,$01
  $708B,$10,10
  $709B,$01
  $709C,$40,$10
  $70DC,$01
W $70DD,$02
  $70DF,$01
W $70E0,$02

c $70E2 Blanks "n" memory locations
R $70E2 B Counter
R $70E2 HL Target
@ $70E2 label=Blanker
  $70E2,$01 #REGa=$00.
@ $70E3 label=Blanker_Loop
  $70E3,$01 Write #REGa to #REGhl.
  $70E4,$01 Increment #REGhl by one.
  $70E5,$02 Decrease counter by one and loop back to #R$70E3 until counter is zero.
  $70E7,$01 Return.

c $70E8 Index Action
R $70E8 A The ID of the Action; $01-$3B
@ $70E8 label=IndexAction
  $70E8,$03 Create an offset in #REGhl.
  $70EB,$07 #REGhl = #R$AB53($AB4B) + (#REGhl * $08).
  $70F2,$01 Return.

c $70F3

b $7291 Print Table
B $7291,$04
@ $7295 label=PrintTable
W $7295,$2E


c $72C3
  $72C3,$03 Call #R$858B.
  $72C9,$04 Write $00 to #R$B704.
  $72CD,$01 Return.

c $72CE "i cannot do that"
@ $72CE label=ICannotDoThat
  $72CE,$03 #REGhl=#R$AFBF("i cannot do that")
  $72D1,$02 Jump to #R$72DD.

c $72D3

c $72DD Print Message
@ $72DD label=PrintMsg
R $72DD HL Text message address
N $72DD Store #REGa, #REGde and #REGix for later (see #R$735B).
  $72DD,$04 Stash #REGde at #R$70DD.
  $72E1,$04 Stash #REGix at #R$70E0.
  $72E5,$03 Stash #REGa at #R$70DC.
N $72E8 Important.
  $72F1,$03 #REGix=#REGhl (the text message address).
@ $72F4 label=PrintMsg_Loop
  $72F4,$03 Fetch the next character of the text message.
  $72F7,$04 Is this blah? Jump to #R$7318 if not.
  $72FB,$02 Reset bit 7.
  $7301,$02 Increase #REGix by one to move onto the next character of the message.
@ $7311 label=PrintMsg_Token
  $7311,$03 Call #R$74C1.
@ $7314 label=PrintMsg_Next
  $7314,$02 Increase #REGix by one to move onto the next character of the message.
  $7316,$02 Jump back to #R$72F4.
N $7318 Check.
  $7318,$04 If the character is less than $20 jump to #R$7326.
  $731C,$05 If the character is more than $60 jump to #R$7493.
  $7321,$03 Else, call #R$72C3.
  $7324,$03 Jump back to #R$7314 to move onto the next character.
N $7326 X
@ $7326 label=PrintMsg_PrintTable
  $7326,$01 Stash #REGde on the stack for later.
  $7327,$03 #REGe=#REGa - #REGde now holds the current character as the LSB.
  $732A,$03 #REGhl=#R$7295
  $732D,$02 #REGhl=(#REGde * 2)
  $732F,$03 Loads #REGde with the address held in #REGhl.
  $7332,$01 Exchange #REGde and #REGhl.
  $7333,$01 Restore the previous value of #REGde from the stack.
  $7334,$04 If the character is more than $14 jump to #R$733F.
  $7338,$03 Call #R$733F.
  $733B,$02 If xxxx jump back to #R$7314 to move onto the next character.
  $733D,$02 Jump to #R$7311.
@ $733F label=PrintMsg_Indirect_Jump
  $733F,$01 Indirect jump to the address held in #REGhl.

c $7340
  $7340,$02 #REGd=$60.
  $7342,$02 Jump to #R$734B.

  $7344,$02 #REGd=$30.
  $7346,$02 Jump to #R$734B.

  $7348,$03 Call #R$74C1.

  $734B,$02 #REGa=$2E.

@ $735B label=Return
  $735B,$04 Restore #REGde from #R$70DD.
  $735F,$04 Restore #REGix from #R$70E0.
  $7363,$03 Restore #REGa from #R$70DC.
  $7366,$01 Return.
c $7367
c $7376
c $737E
@ $738B label=
c $738D
c $7394
c $73A3
  $73A3,$04 Write $00 to #R$B703.
  $73A7,$03 #REGa=#R$B6EA.
  $73AA,$03 Call #R$7488.
  $73AD,$01 #REGa=$00.
  $73AE,$01 Return.

c $73AF
c $73BD
c $73C2
c $73E0
c $73F9
c $7407
c $740C
c $7425
c $742D

  $7455,$03 #REGhl=#R$AD2D.
  $7462,$03 #REGhl=#R$AD35.
  $7469,$02,b$01 Keep only bits 1-4.
  $746B,$01 Stash #REGde on the stack.
  $746C,$03 Create an offset in #REGde using #REGa as the LSB.
  $746F,$01 #REGhl = #REGhl + offset.
  $7470,$03 #REGde=contents of the calculated address.
  $7473,$03 Call #R$74C1.
  $7476,$01 Restore #REGde from the stack.
  $7477,$01 Return.

  $7478,$01 Stash #REGde on the stack.
  $7479,$03 #REGa=#R$B703.
  $747C,$04 Call #R$743F if #REGa is non-zero.
  $7480,$01 Restore #REGde from the stack.
  $7481,$01 #REGa=#REGd.
  $7482,$02,b$01 Keep only bits 0-3.
  $7484,$01 #REGd=#REGa.
  $7485,$03 Jump to #R$74C1.

  $748D,$03 #REGde=$0AE3.
  $7490,$03 Jump to #R$74C1.

c $7493 Get Common Word
R $7493 A Letter reference
R $7493 O:DE Common word address
@ $7493 label=GetCommonWord
  $7493,$02 Subtract $60 from the letter byte - anything higher than $60 signifies the letter is a "common word".
  $7495,$03 Create offset for the word look-up.
  $7498,$03 #REGhl=#R$AD3D
  $749B,$02 Add to base address at #R$AD3D so that pointer is at the referenced word.
  $749D,$01 #REGe=LSB of word address.
  $749E,$02 #REGa=MSB of word address.
  $74A0,$02 Add $50 to #REGa and store the result in #REGd.
  $74A3,$03 Jump to #R$7311.

g $74A6 Output Buffer
@ $74A6 label=OutputBuffer
  $74A6,$14

c $74BA Print Action
@ $74BA label=PrintAction
R $74BA HL Pointer to an action in the #R$AB53(actions table)
R $74BA O:HL Pointer is incremented twice
R $74BA O:DE A word token
E $74BA Continues on to #R$74C1 to print.
M $74BA,$07 Store the word token in #REGde (we keep only bits 0-3 of the MSB).
  $74BA,$04
  $74BE,$02,b$01
  $74C0,$01

c $74C1 Print Token
@ $74C1 label=PrintToken
R $74C1 DE e.g. $56D1 token?
  $74C1,$01 #REGa=#REGd
  $74C2,$02,b$01 Keep only bits 0-3.
  $74C4,$01 Combine with #REGe.
  $74C5,$01 Return the result is zero.
  $74C6,$03 Store #REGhl, #REGbc and #REGde on the stack for later.
  $74CE,$04 #REGhl=$6000+#REGde
  $74D2,$03 #REGde=#R$74A6(output buffer).
  $74D5,$01 Store #REGhl on the stack.
  $74D6,$02 Intialise #REGb to $00 to count the number of letters.
@ $74D8 label=PrintToken_Loop
  $74D8,$01 Fetch the next character from #REGhl.
  $74D9,$02 Keep only bits 0-4.
  $74DB,$02 Jump to #R$74F9 if this is zero.
  $74DD,$01 Increase #REGb by one.
  $74DE,$02 Add $60 to #REGa to convert to ASCII.
  $74E0,$01 Store the result in the #R$74A6(output buffer).
  $74E1,$01 Increase the #R$74A6(output buffer) pointer by one.
  $74E2,$02 Check if this is the last character in the word.
  $74E4,$01 Increase the character pointer reference by one.
  $74E5,$02 If this is not the last character in the word, loop back to #R$74D8 to continue processing.
N $74E7 Check minimum length.
  $74E7,$01 #REGa=the number of characters.
  $74E8,$04 If the number of characters is only $02 then jump back to #R$74D8 to continue processing.
  $74EC,$04 If it is not $03, then jump to #R$74F9.
  $74F0,$07 Else, fetch the first character again and check if it is the last character in the word.
  $74F7,$02 If it is not, loop back to #R$74D8 to continue processing.
@ $74F9 label=PrintToken_
  $74F9,$01 Restore #REGhl off the stack.
@ $750F label=PrintToken__
@ $7512 label=PrintToken___
  $7519,$02 E0?
@ $7527 label=PrintToken____
@ $7530 label=PrintToken_____
@ $7543 label=PrintToken______
@ $7551 label=PrintToken_______
@ $755C label=PrintToken________
@ $7567 label=PrintToken_Print
  $7567,$03 #REGhl=#R$74A6(output buffer).
@ $756A label=PrintToken_Print_Loop
  $756A,$01 Fetch the next character from the output buffer.
  $756B,$03 Call #R$858B.
  $756E,$01 Increase the output buffer pointer by one.
  $756F,$02 Decrease counter by one and loop back to #R$756A until counter is zero.
  $7571,$02 Restore #REGbc and #REGhl off the stack.
  $7573,$01 Return.

c $7574
B $7574,$06
B $757A,$01
B $757B,$0A
  $7585,$04 #REGiy=#R$B9C8.
  $7589,$01 #REGa=$00.
  $758A,$03 Write #REGa to #R$B71B.
  $758D,$03 Call #R$785F.
  $7590,$03 Write $00 to #R$B706.
  $7593,$02 #REGe=$FF.
  $7595,$03 #REGa=#R$B71A.
  $7599,$02 #REGd=$A0.
  $759B,$03 If #REGa is not zero jump to #R$7614.
  $75A0,$04 Write $00 to #R$757A.
  $75B1,$03 Call #R$7864.
  $75B4,$08 Write $00 to #N$0A bytes, starting from #R$757B (using #R$70E2).
  $75BC,$02 Set bit 4 of #REGe.

  $75BE,$03 Call #R$7873.
  $75C1,$01 Stash #REGde on the stack.
  $75C5,$03 Create an offset in #REGde.
  $75C8,$04 #REGhl=#R$75D2 + offset.
  $75CC,$03 #REGde=Address from the jump table.
  $75CF,$01 Switch #REGhl and #REGde.
  $75D0,$01 Restore #REGde from the stack.
  $75D1,$01 Indirect jump to the address held in #REGhl.

@ $75D2 label=JumpTable
W $75D2,$1A,$02

c $75EC
c $75F6
c $75FA
c $76EC
c $76F2
c $770B
c $772F
c $7733
c $7790
c $7795
c $77A2
c $77C9
c $77D1

  $792F,$03 #REGhl=#R$AD9F("what ?[0x14]")
  $7937,$03 Call #R$72DD.

g $7F77 Location ID.
@ $7F77 label=LocationID
D $7F77 Contains $FF when the location has no graphics data, else the location ID.

c $7F78 Drawing Routine
@ $7F78 label=Drawing
  $7F78,$01 Store #REGaf on the stack.
  $7F79,$06 If #R$B707 is not $00 then jump to #R$7F86.
  $7F7F,$05 Write $FF to #R$7F77.
  $7F84,$01 Restore #REGaf from the stack.
  $7F85,$01 Return.
N $7F86 Drawing Check
@ $7F86 label=DrawingCheck
  $7F86,$01 Retrieve the location ID from the stack.
  $7F87,$01 Ensure that it's still on the stack for later.
  $7F88,$05 Store #REGhl, #REGbc, #REGde and #REGix on the stack for later.
  $7F8D,$04 #REGix=#R$CC00.
  $7F91,$03 Call #R$9DBD - the Z flag is set if no data is found (#REGa=$FF).
  $7F94,$03 Store the location ID at #R$7F77.
  $7F97,$06 #REGhl=Location graphics data address.
  $7F9D,$03 If there is graphics data for this location then call #R$7FA7.
  $7FA0,$06 Restore #REGix, #REGde, #REGbc, #REGhl and #REGaf off the stack.
  $7FA6,$01 Return.
N $7FA7 Drawing routines.
@ $7FA7 label=DrawingSetup
  $7FA7,$03 Store #REGiy and #REGhl on the stack.
  $7FAA,$03 #REGiy=pointer to graphics data addresses.
  $7FAD,$02 Store #REGde and #REGbc on the stack.
  $7FAF,$03 Call #R$820B.
  $7FB2,$02 #REGd=$7F.
  $7FB4,$02 #REGe=$3F.
  $7FB6,$02 #REGb=$01.
  $7FB8,$02 #REGc=$01.
  $7FBA,$02 #REGl=$01.
@ $7FBC label=DrawingLoop
  $7FBC,$03 Fetch the next drawing instruction.
  $7FBF,$04 If the value is zero, jump to #R$8069.
  $7FC3,$02 Increment the graphics data pointer by one.
  $7FC5,$04 If the graphics data value which was fetched is not $08 (move to X/Y) jump to #R$7FD5.
N $7FC9 Moves the "pen" held in #REGde to a screen location.
  $7FC9,$0A Populate #REGde with two values from the graphics data and increment the pointer by two.
  $7FD3,$02 Jump back to #R$7FBC to fetch the next drawing instruction.

  $7FD5,$04 If bit 7 is set, jump to #R$7FFA.
  $7FD9,$01 Temporarily store #REGa in #REGb.
  $7FDA,$02,b$01 Keep only bits 0-2.
  $7FDC,$01 Store this in #REGc.
  $7FDD,$01 Restore the old value of #REGa (from #REGb).
  $7FDE,$01 Rotate #REGa right one bit.
  $7FDF,$02,b$01 Keep only bits 2-5.
  $7FE1,$01 Store this in #REGb.
  $7FE2,$03 Fetch the next drawing instruction.
  $7FE5,$02,b$01 Keep only bits 0-5.
  $7FE7,$01 Store this in #REGl.
  $7FE8,$01 Increment #REGl by one.
  $7FE9,$03 Fetch the previous drawing instruction again in #REGa.
  $7FEC,$02 Increment the graphics data pointer by one.
  $7FEE,$02 Rotate #REGa left two bits.
  $7FF0,$02,b$01 Keep only bits 0-1.
  $7FF5,$03 Call #R$8151.
  $7FF8,$02 Jump back to #R$7FBC to fetch the next drawing instruction.
  $7FFE,$02,b$01 Keep only bits 0-2.
  $800F,$03 Jump back to #R$7FBC to fetch the next drawing instruction.
  $8012,$05 If bit 5 is set then jump back to #R$7FBC to fetch the next drawing instruction.
  $8017,$02,b$01 Keep only bits 0-2.
  $8034,$02,b$01 Keep only bits 0-1.
  $803A,$02,b$01 Keep only bits 0-5.
  $803F,$02,b$01 Keep only bits 0-2.
@ $8069 label=DrawingEnd
  $8066,$03 Jump back to #R$7FBC to fetch the next drawing instruction.
  $8069,$05 Restore #REGbc, #REGde, #REGhl and #REGiy from the stack.
  $806E,$01 Return.
B $806F,$02

  $80EB,$02 Restore #REGhl and #REGde from the stack.
  $80ED,$01 Return.

  $80EE,$01 Stash #REGhl on the stack.
  $80EF,$03 Call #R$81DE.
  $80F3,$01 Restore #REGhl from the stack.
  $80F4,$01 Return.

  $80F5,$02 Stash #REGaf and #REGde on the stack.
  $8103,$02 Restore #REGde and #REGaf from the stack.
  $8105,$01 Return.

  $8106,$02 Stash #REGaf and #REGde on the stack.
  $8108,$04 #REGhl=#REGhl+$0020.
  $8114,$02 Restore #REGde and #REGaf from the stack.
  $8116,$01 Return.
  $8120,$01 Return.
  $812A,$01 Return.
  $8134,$01 Return.
  $8135,$04 Set bit 0 of #REGa (using #REGh).
  $8139,$01 Return.
  $8140,$01 Return.
  $8147,$01 Return.
  $8150,$01 Return.

  $8151,$04 If bit 0 of #REGc is not set then jump to #R$8185.
  $8155,$02 Stash #REGhl and #REGbc on the stack.
  $8157,$03 Call #R$81B5.
  $815A,$04 If bit 2 of #REGc is set then jump to #R$8165.
  $815E,$03 Call #R$8148.
  $8161,$02
  $8163,$02 Jump to #R$816A.

  $8165,$03 Call #R$8141.
  $8168,$02
  $816A,$01 Decrease #REGb by one.
  $816B,$02 Jump to #R$817F if it is not zero.
  $816D,$04 If bit 1 of #REGc is set then jump to #R$8178.
  $8171,$03 Call #R$813A.
  $8182,$02 Restore #REGbc and #REGhl from the stack.
  $8184,$01 Return.

  $8185,$02 Stash #REGhl and #REGbc on the stack.
  $8187,$03 Call #R$81B5.
  $81B2,$02 Restore #REGbc and #REGhl from the stack.
  $81B4,$01 Return.

  $81BC,$02,b$01 Keep only bits 3-4.
  $81C5,$02,b$01 Keep only bits 3-5.
  $81DD,$01 Return.
  $81E2,$02,b$01 Keep only bits 0-2.
  $81E8,$02,b$01 Keep only bits 6-7.
  $81F0,$02,b$01 Keep only bits 3-5.
  $81F9,$02,b$01 Keep only bits 0-4.
  $81FE,$02,b$01 Keep only bits 0-2.
  $8200,$01 Stash #REGbc on the stack temporarily.
  $8201,$01 Copy #REGa to #REGb used as a counter for the rotate command.
  $8203,$02 #REGa=#EVAL($01,2,8).
  $8205,$02 Rotate #REGa right once.
  $8207,$02 Decrease counter by one and loop back to #R$8205 until counter is zero.
  $8209,$01 Restore #REGbc from the stack.
  $820A,$01 Return.

@ $820B label=DrawingClear
  $820B,$03 Call #R$95ED.
  $820E,$04 Store the first byte of the graphic data in the shadow #REGaf register.
  $8212,$02 Increment the graphic data pointer to the next byte.
  $8214,$01 Switch back to the "normal" #REGaf register to check the result of the call to #R$95ED.
  $8215,$02 Jump to #R$821A if #R$95ED did not set the carry flag (so, it is LIGHT).
  $8217,$02 Overwrite the graphic data in the shadow #REGaf register to $00 (black).
  $8219,$01 Switch back to the "normal" #REGaf register simply to accomodate the jump from #R$8215.
@ $821A label=DrawingBorder
  $821A,$01 Switch to the shadow #REGaf register containing the first byte of the graphic data (or $00 if it's dark).
  $821B,$02 Set the border colour to the value in #REGa.
  $821D,$03 Store #REGhl, #REGde and #REGbc on the stack.
  $8220,$0D Write $00 to $4000-$4FFF (the screen buffer).
  $822D,$09 Set up copying to the attribute buffer (start=$5800, length=$01FF).
  $8236,$03 #REGa=The next byte (second) of the graphic data.
  $8239,$02 Increment the graphic data pointer to the next byte.
  $823B,$01 Switch back to the "normal" #REGaf register which contains the LIGHT/ DARK carry flag.
  $823C,$02 Jump to #R$8241 if #R$95ED did not set the carry flag (so, it is LIGHT).
  $823E,$02 Overwrite the graphic data in the shadow #REGaf register to $00 (black).
  $8240,$01 Switch back to the "normal" #REGaf register simply to accomodate the jump from #R$823C.
@ $8241 label=DrawingPaper
  $8241,$01 Switch to the shadow #REGaf register containing the second byte of the graphic data (or $00 if it's dark).
  $8242,$03 Write this to the attribute buffer using the target/ length specified previously.
  $8245,$03 Restore #REGbc, #REGde and #REGhl from the stack.
  $8248,$01 Switch back to the "normal" #REGaf register which contains the LIGHT/ DARK carry flag.
  $8249,$01 Return if it is LIGHT.
  $824A,$04 Else, restore #REGhl from the stack and jump to #R$8069 to finish.
B $824E,$03

c $8251

c $82B3

  $838E,$03 Jump to #R$75B4.
  $8391,$03 Call #R$83F5.
  $8397,$02,b$01 Keep only bits 0-4.
  $839D,$03 Jump to #R$6C27.

c $83A0 Display Locate Help Message
@ $83A0 label=DisplayLocHlpMsg
  $83A7,$03 Store #REGhl and #REGix on the stack for later.
N $83AA Default message response should there be no match for the current location.
  $83AA,$03 #REGhl=#R$B467("you're doing fine[0x15]")
N $83AD Use the current location ID to look-up if there is a specific help message.
  $83AD,$0A Using the #R$C12B(current location number), see if there is a help message available for display.
.           This is achieved by passing #R$83CD to the #R$9DBD(Index ID Table) routine.
  $83B7,$02 If there is no message, jump directly to #R$83BF to display the default message.
N $83B9 Point to the specific help for the current location.
  $83B9,$06 #REGhl=The address of the help message
@ $83BF label=DisplayLocHlpMsg_Print
N $83BF Print the message.
  $83BF,$05 Write $01 to #R$B701.
  $83C4,$03 Call #R$72DD.
  $83C7,$03 Restore #REGix and #REGhl from the stack.
  $83CA,$03 Jump to #R$82B3.

b $83CD Locate Help Message
@ $83CD label=LocHlpMsg
  $83CD,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
W $83CE,$02 #TEXTMESSAGE(#PC)
L $83CD,$03,$0B
  $83EE,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).

c $83EF Game Over
@ $83EF label=GameOver
  $83EF,$03 Call #R$83F5.
  $83F2,$03 Jump to #R$82B3.
N $83F5 Actions "game over".
@ $83F5 label=GameOver_Start
  $83F5,$02 Stash #REGhl and #REGde on the stack.
  $83F7,$04 Write $00 to #R$B701.
  $83FB,$03 #REGhl=#R$B454("you have mastered [0x16]")
  $83FE,$03 Call #R$72DD.
  $8401,$03 #REGhl=#R$B6F7.
  $8404,$03 #REGde=$0064 (i.e. "100" in decimal).
  $8407,$03 Call #R$842E.
  $840A,$03 If the result is non-zero, call #R$858B.
  $840D,$03 #REGde=$000A (i.e. "10" in decimal).
  $8410,$03 Call #R$842E.
  $8413,$03 Call #R$858B.
  $8416,$02 #REGa=$2E (i.e. a period in ASCII, as the produced percentage is a float).
  $8418,$03 Call #R$858B.
  $841B,$03 #REGa=the percentage digit, plus $30 to convert to ASCII.
  $841E,$03 Call #R$858B.
  $8421,$04 Write $00 to #R$B704.
  $8425,$03 #REGhl=#R$B462("% of this adventure")
  $8428,$03 Call #R$72DD.
  $842B,$02 Restore #REGde and #REGhl from the stack.
  $842D,$01 Return.
N $842E Converts e.g. "0075" into "7.5" in ASCII for display purposes.
@ $842E label=PercentageAscii
  $842E,$02 #REGa=$2F (ASCII "0" less one, due to the following line being the loop and so, incrementing to $30 - which is ASCII "0").
@ $8430 label=PercentageAscii_Loop
  $8430,$01 Increment #REGa by one.
  $8431,$01
  $8432,$02 Subtract #REGde (either 100 or 10) from #REGhl.
  $8434,$02 Jump back to #R$8430 if there's no carry.
  $8436,$01 #REGhl=#REGhl + #REGde.
  $8437,$02 Compare against $30 (ASCII "0") to set flags for the return.
  $8439,$01 Return.

N $843A I don't believe this is ever used?
  $843A,$04 Set the border to $04 (green).
  $843E,$03 Call #R$84B9.

@ $8441 label=WaitForKey
  $8441,$03 Read from the keyboard port.
  $8444,$02,b$01 A pressed key from any line will set its respective bit; bit 0 (outer key) to bit 4 (inner key).
.           Hence keep only bits 0-4 for the check.
  $8446,$04 Loop back to #R$8441 until any key has been pressed.
  $844A,$04 Set the border to $07 (white).
  $844E,$03 Jump to #R$82B3.

c $8451 Load Game
@ $8451 label=LoadGame
  $8451,$03 Stash #REGix and #REGde on the stack.
N $8454 Load "flags".
  $8454,$02 Set the load as a "data block".
  $8456,$01 Set the carry flag.
  $8457,$04 Set the start address to; #R$B6EB.
  $845B,$03 Set the block length to; $001D bytes.
  $845E,$03 Call #R$8498.
N $8461 Load "objects".
  $8461,$02 Set the load as a "data block".
  $8463,$01 Set the carry flag.
  $8464,$04 Set the start address to; #R$C11B.
  $8468,$03 Set the block length to; $0615 bytes.
  $846B,$03 Call #R$8498.
N $846E Load...
  $846E,$02 Set the load as a "data block".
  $8470,$01 Set the carry flag.
  $8471,$04 Set the start address to; #R$CA84.
  $8475,$03 Set the block length to; $00BF bytes.
  $8478,$03 Call #R$8498.
N $847B Load "locations".
  $847B,$02 Set the load as a "data block".
  $847D,$01 Set the carry flag.
  $847E,$04  Set the start address to; #R$BA8A.
  $8482,$03 Set the block length to; $05D9 bytes.
  $8485,$03 Call #R$8498.
N $8488 Success!
  $8488,$01 Disable interrupts.
  $8489,$09 Call #R$84B3 using #REGhl=#R$B6EB and #REGde=$C9E2.
  $8492,$03 Restore #REGde and #REGix from the stack.
  $8495,$03 Jump to #R$82B3.

N $8498 Load Block
@ $8498 label=LoadBlock
  $8498,$03 #HTML(Call <a href="https://skoolkid.github.io/rom/asm/0556.html">LD_BYTES</a>.)
  $849B,$01 Return if the carry flag is set.
  $849C,$05 Write $01 to #R$B701.
  $84A1,$03 #REGhl=#R$B357("tape error - hit any key to restart program[0x15]")
  $84A4,$03 Call #R$72DD.
@ $84A7 label=LoadBlock_Loop
  $84A7,$03 Read from the keyboard port.
  $84AA,$02,b$01 A pressed key from any line will set its respective bit; bit 0 (outer key) to bit 4 (inner key).
.           Hence keep only bits 0-4 for the check.
  $84AC,$04 Loop back to #R$84A7 until any key has been pressed.
  $84B0,$03 Jump to #R$6C27.

c $84B3 Copies 3 bytes from source to target
R $84B3 DE Source
R $84B3 HL Target
@ $84B3 label=ThreeByteCopy
  $84B3,$03 #REGbc=$0003.
  $84B6,$02 Copy three bytes of data from #REGde to #REGhl.
  $84B8,$01 Return.

c $84B9 Debounce keyboard
@ $84B9 label=DebounceAnyKey
  $84B9,$03 Read from the keyboard port.
  $84BC,$02,b$01 A pressed key from any line will set its respective bit; bit 0 (outer key) to bit 4 (inner key).
.           Hence keep only bits 0-4 for the check.
  $84BE,$04 Loop back to #R$84B9 if a key is being pressed.
@ $84C2 label=NormalAnyKey
  $84C2,$03 Read from the keyboard port.
  $84C5,$02,b$01 A pressed key from any line will set its respective bit; bit 0 (outer key) to bit 4 (inner key).
.           Hence keep only bits 0-4 for the check.
  $84C7,$04 Loop back to #R$84C2 until any key has been pressed.
  $84CB,$01 Return.

c $84CC Save Game
@ $84CC label=SaveGame
  $84CC,$03 Stash #REGix and #REGde on the stack.
  $84CF,$09 Call #R$84B3 with #REGde=#R$B6EB and #REGhl=$C9E2.
  $84D8,$05 Write $01 to #R$B701.
  $84DD,$03 #REGhl=#R$B342("start tape then press any key")
  $84E0,$03 Call #R$72DD.
  $84E3,$03 Call #R$84B9.
N $84E6 Save "flags".
  $84E6,$02 Set the save as a "data block".
  $84E8,$04 Set the start address to; #R$B6EB.
  $84EC,$03 Set the block length to; $001D bytes.
  $84EF,$03 #HTML(Call <a href="https://skoolkid.github.io/rom/asm/04C2.html">SA_BYTES</a>.)
N $84F2 Save "objects".
  $84F2,$02 Set the save as a "data block".
  $84F4,$04 Set the start address to; #R$C11B.
  $84F8,$03 Set the block length to; $0615 bytes.
  $84FB,$03 #HTML(Call <a href="https://skoolkid.github.io/rom/asm/04C2.html">SA_BYTES</a>.)
N $84FE Save ...
  $84FE,$02 Set the save as a "data block".
  $8500,$04 Set the start address to; $CA84.
  $8504,$03 Set the block length to; $00BF bytes.
  $8507,$03 #HTML(Call <a href="https://skoolkid.github.io/rom/asm/04C2.html">SA_BYTES</a>.)
N $850A Save "locations".
  $850A,$02 Set the save as a "data block".
  $850C,$04 Set the start address to; #R$BA8A.
  $8510,$03 Set the block length to; $05D9 bytes.
  $8513,$03 #HTML(Call <a href="https://skoolkid.github.io/rom/asm/04C2.html">SA_BYTES</a>.)
N $8516 Begin verification.
  $8516,$03 #REGhl=#R$B3A4("rewind and prepare tape for verification -- then hit any key")
  $8519,$03 Call #R$72DD.
  $851C,$03 Call #R$84B9.
N $851F Verify "flags".
  $851F,$02 Set the load as a "data block".
  $8521,$01 Reset the carry flag.
  $8522,$04 Set the start address to; #R$B6EB.
  $8526,$03 Set the block length to; $001D bytes.
  $8529,$03 Call #R$855A.
N $852C Verify "objects".
  $852C,$02 Set the load as a "data block".
  $852E,$01 Reset the carry flag.
  $852F,$04 Set the start address to; #R$C11B.
  $8533,$03 Set the block length to; $0615 bytes.
  $8536,$03 Call #R$855A.
N $8539 Verify ...
  $8539,$02 Set the load as a "data block".
  $853B,$01 Reset the carry flag.
  $853C,$04 Set the start address to; $CA84.
  $8540,$03 Set the block length to; $00BF bytes.
  $8543,$03 Call #R$855A.
N $8546 Verify "locations".
  $8546,$02 Set the load as a "data block".
  $8548,$01 Reset the carry flag.
  $8549,$04 Set the start address to; #R$BA8A.
  $854D,$03 Set the block length to; $05D9 bytes.
  $8550,$03 Call #R$855A.
N $8553 Success!
@ $8553 label=SaveGame_Done
  $8553,$01 Disable interrupts.
  $8554,$03 Restore #REGde and #REGix from the stack.
  $8557,$03 Jump to #R$82B3.
N $855A Verify block.
@ $855A label=VerifyBlock
  $855A,$03 #HTML(Call <a href="https://skoolkid.github.io/rom/asm/0556.html">LD_BYTES</a>.)
  $855D,$01 Return if the carry flag is set.
  $855E,$05 Write $01 to #R$B701.
  $8563,$03 #REGhl=#R$B381("tape error - hit any key to continue[0x15]")
  $8566,$03 Call #R$72DD.
N $8569 This is almost a carbon copy of #R$8441.
@ $8569 label=VerifyBlock_WaitForKey
  $8569,$03 Read from the keyboard port.
  $856C,$02,b$01 A pressed key from any line will set its respective bit; bit 0 (outer key) to bit 4 (inner key).
.           Hence keep only bits 0-4 for the check.
  $856E,$04 Loop back to #R$8569 until any key has been pressed.
  $8572,$01 Restore #REGde from the stack.
  $8573,$03 Jump to #R$8553.

c $8576
  $8576,$01 Stash #REGhl on the stack.
  $8577,$01 #REGl=#REGa.
  $8578,$04 #REGh=#R$B6FA.
  $857C,$03 #REGa=#R$B702.
  $857F,$02
  $8581,$01 Restore #REGhl from the stack.
  $8582,$01 Return.

  $8583,$01 Stash #REGaf on the stack.
  $8584,$02 #REGa=$0D.
  $8586,$03 Call #R$858B.
  $8589,$01 Restore #REGaf from the stack.
  $858A,$01 Return.

  $858B,$03 Call #R$8576.
  $858E,$01 Return if zero.
  $858F,$01 Stash #REGaf on the stack.
  $8590,$06 If #R$B701 is not zero then jump to #R$85B7.
  $8596,$01 Restore #REGaf from the stack.
  $8597,$03 Call #R$86A1.
  $859A,$01 Stash #REGaf on the stack.
  $859B,,$06 If #R$B700 is not zero then jump to #R$85A3.
  $85A1,$01 Restore #REGaf from the stack.
  $85A2,$01 Return.

  $85A3,$01 Restore #REGaf from the stack.
  $85A4,$04 If this is ASCII "S" then jump to #R$85AB.
  $85A8,$03 If this is not ASCII "s" then return.
  $85AB,$01 Stash #REGaf on the stack.
  $85AC,$02 #REGa=$48 ("F" in ASCII).
  $85AE,$03 Call #R$86A1.
  $85B1,$01 Restore #REGaf from the stack.
  $85B2,$01 Return.
  $85B3,$01
B $85B4,$03 Percentage buffer.
@ $85B4 label=PercentageBuffer

  $85B7,$01 Restore #REGaf from the stack.

c $867A Print Character
@ $867A label=PrintChar
R $867A A ASCII value of character to print
N $867A #HTML(Prints using the standard ZX Spectrum <a href="https://skoolkid.github.io/rom/asm/3D00.html">CHARSET</a>.)
  $867A,$04 Push #REGaf, #REGbc, #REGde and #REGhl on the stack.
  $867E,$08 Create offset for the font graphic data look-up. For example;
. #TABLE(default,centre,centre,centre,centre,centre)
. { =h Letter | =h ASCII Value | =h SUB #N($20, 2, 3, 1, 1)($) | =h * 8 | =h CHARSET + offset }
. { #LET(id=$41) #LET(result=$3D00 + ({id} - $20) * 8) "#CHR({id})" | #N({id}, 2, 3, 1, 1)($) | #N({id} - $20, 2, 3, 1, 1)($) | #N(({id} - $20) * 8, 2, 3, 1, 1)($) | #HTML(<a href="https://skoolkid.github.io/rom/asm/3D00.html##N({result}, 2, 3, 1, 1)()">#N({result}, 2, 3, 1, 1)($)</a>) }
. { #LET(id=$51) #LET(result=$3D00 + ({id} - $20) * 8) "#CHR({id})" | #N({id}, 2, 3, 1, 1)($) | #N({id} - $20, 2, 3, 1, 1)($) | #N(({id} - $20) * 8, 2, 3, 1, 1)($) | #HTML(<a href="https://skoolkid.github.io/rom/asm/3D00.html##N({result}, 2, 3, 1, 1)()">#N({result}, 2, 3, 1, 1)($)</a>) }
. { #LET(id=$61) #LET(result=$3D00 + ({id} - $20) * 8) "#CHR({id})" | #N({id}, 2, 3, 1, 1)($) | #N({id} - $20, 2, 3, 1, 1)($) | #N(({id} - $20) * 8, 2, 3, 1, 1)($) | #HTML(<a href="https://skoolkid.github.io/rom/asm/3D00.html##N({result}, 2, 3, 1, 1)()">#N({result}, 2, 3, 1, 1)($)</a>) }
. TABLE#
  $8686,$04 #HTML(Calculate font graphic data address using <a href="https://skoolkid.github.io/rom/asm/3D00.html">CHARSET</a> + offset.)
  $868A,$03 Store the result in #REGde, restore the screen location to #REGhl.
@ $868F label=PrintChar_Loop
  $868D,$02 Set a counter for $08 lines.
  $868F,$02 Fetch the font byte and copy it to the screen.
  $8691,$01 Move onto the next font data byte.
  $8692,$01 Move the screen pointer down one row.
  $8693,$02 Decrease counter by one and loop back to #R$868F until counter is zero.
  $8695,$04 Restore #REGhl, #REGde, #REGbc and #REGaf off the stack.
  $8699,$01 Move the screen pointer across one column, ready for printing the next character.
  $869A,$01 Return.

c $869B
B $869B,$01
W $869C,$02
B $869E,$01
B $869F,$01
B $86A0,$01

c $876B Scroll Line
@ $876B label=ScrollLine
  $876B,$04 Push #REGaf, #REGbc, #REGhl and #REGde on the stack.
N $876F Set up the initial values.
  $876F,$03 #REGhl=$4020 (source).
  $8772,$03 #REGde=$4000 (target).
  $8775,$02 #REGa=$11 (number of lines to shift).
  $8777,$02 #REGb=$00.
@ $8779 label=ScrollLine_Loop
  $8779,$02 Stash #REGhl and #REGde on the stack.
  $877B,$02 #REGc=$08 (byte counter).
@ $877D label=ScrollLine_Line
  $877D,$03 Stash #REGhl, #REGde and #REGbc on the stack.
  $8780,$02 #REGc=$20 (column counter - i.e. one row).
  $8782,$02 Copy the row up one.
  $8784,$03 Restore #REGbc, #REGde and #REGhl from the stack.
  $8787,$02 Increment the MSB of #REGhl and #REGde by one to point to the next line down.
  $8789,$01 Decrease our byte counter in #REGc by one.
  $878A,$02 Jump back to #R$877D unless the whole line is moved (i.e. #REGc is now zero).
  $878C,$02 Restore #REGde and #REGhl from the stack. They are now at their values prior to the line move #R$8779.
  $878E,$06 #REGde=#REGde + $20 and #REGhl=#REGhl + $20.
  $8794,$01 Stash #REGaf on the stack.
  $8795,$01 #REGa=#REGd.
  $8796,$02,b$01 Keep only bits 0-2.
  $8798,$02 Skip to #R$879E if zero.
N $879A Handle changing the target between each screen buffer area.
  $879A,$04 #REGd=#REGd + $07.
@ $879E label=ScrollLine_SkipDE
  $879E,$01 #REGa=#REGh.
  $879F,$02,b$01 Keep only bits 0-2.
  $87A1,$02 Skip to #R$87A7 if zero.
N $87A3 Handle changing the source between each screen buffer area.
  $87A3,$04 #REGh=#REGh + $07.
@ $87A7 label=ScrollLine_SkipHL
  $87A7,$01 Restore #REGaf containing the line counter from the stack.
  $87A8,$01 Decrease #REGa by one.
  $87A9,$02 Loop back to #R$8779 until the line counter is zero.
N $87AB Handle the attributes.
  $87AB,$0B Move the attributes up one character block.
N $87B6 This creates the indent.
  $87B6,$02 Set a counter for #N($2A, 2, 3, 1, 1)($) spaces.
  $87B8,$03 Set the target screen location to #N($5020, 2, 3, 1, 1)($).
  $87BB,$02 #REGc=$01 (bit offset).
  $87BD,$02 #REGa=ASCII "SPACE".
@ $87BF label=ScrollLine_Spacing
  $87BF,$03 Call #R$87C9.
  $87C2,$02 Decrease counter by one and loop back to #R$87BF until counter is zero.
N $87C4 Housekeeping and return.
  $87C4,$04 Restore #REGde, #REGhl, #REGbc and #REGaf off the stack.
  $87C8,$01 Return.

c $87C9 Print Proper Character
@ $87C9 label=PrintPropChar
R $87C9 A ASCII value
R $87C9 C Bit offset
R $87C9 HL Target screen location
N $87C9 Prints using the custom #R$8822(font).
  $87C9,$04 Push #REGaf, #REGbc, #REGde and #REGhl on the stack.
N $87CD Calculate font graphic address, some examples would be;
. #TABLE(default,centre,centre,centre,centre,centre)
. { =h Letter | =h ASCII | =h * 8 | =h Sum | =h Font Graphic Address }
. { #LET(id=$21) "#CHR({id})" | #N({id}, 2, 3, 1, 1)($) | #N(#EVAL({id} * 8), 2, 3, 1, 1)($) | (#N({id}, 2, 3, 1, 1)($) * 8) + $8722 | #R(#EVAL($8722 + ({id} * 8))) }
. { #LET(id=$41) "#CHR({id})" | #N({id}, 2, 3, 1, 1)($) | #N(#EVAL({id} * 8), 2, 3, 1, 1)($) | (#N({id}, 2, 3, 1, 1)($) * 8) + $8722 | #R(#EVAL($8722 + ({id} * 8))) }
. { #LET(id=$61) "#CHR({id})" | #N({id}, 2, 3, 1, 1)($) | #N(#EVAL({id} * 8), 2, 3, 1, 1)($) | (#N({id}, 2, 3, 1, 1)($) * 8) + $8722 | #R(#EVAL($8722 + ({id} * 8))) }
. TABLE#
  $87CD,$03 Store the offset for the font graphic data look-up in #REGhl.
N $87D0 Calculate font graphic data address.
  $87D0,$07 #REGhl=(#REGhl * 8) + #N($8722, 2, 3, 1, 1)($)
  $87D7,$03 Store the result in #REGde, restore the screen location to #REGhl.
  $87DA,$02 Set a counter for $08 lines.
@ $87DC label=PrintPropChar_Loop
  $87DC,$01 #REGa=byte of font graphic data
  $87DD,$01 Stash the counter on the stack temporarily.
  $87E0,$02 #REGb=#N($FF, 2, 3, 1, 1)($) as a mask.
@ $87E4 label=PrintPropChar_Shift
  $87E4,$02 Shift the font graphic data left.
  $87E6,$02 Shift the mask data left.
  $87E8,$01 Decrease #REGc by one.
  $87E9,$02 Loop back to #R$87E4 until we've shifted by the number of bits specified in #REGc.
@ $87EB label=PrintPropChar_SkipShift
  $87EB,$01 Stash the font graphic data in #REGc.
  $87EC,$02 #REGa=invert the shifted mask.
  $87EE,$01 Merge the mask with the existing data in the screen buffer.
  $87EF,$01 OR the font graphic data.
  $87F0,$01 Copy the processed font graphic data to the screen.
  $87F1,$01 Restore the counter off the stack.
  $8810,$02 Decrease counter by one and loop back to #R$87DC until counter is zero.
  $8812,$03 Restore #REGhl, #REGde and #REGbc off the stack.
  $8820,$01 Restore #REGaf off the stack.
  $8821,$01 Return.

b $8822 Main Font
@ $8822 label=MainFont
N $8822 #LET(id=#EVAL($20 + (#PC - $8822) / 8))CHARACTER: "#MAP({id})(#CHR({id}),$20:SPACE,$60:£,$7F:CLARET)".
  $8822,b,$01 #UDG(#PC)
L $8822,$08,$60

c $8B22

c $8B78 Pause
@ $8B78 label=Pause
  $8B78,$03 Set a counter in #REGbc=#N$03E8.
@ $8B7B label=Pause_Loop
  $8B7B,$01 Decrease the counter by one.
  $8B7C,$04 Loop back to #R$8B7B until the counter is zero.
  $8B80,$01 Return.

c $8B81 Get Key
B $8B81,$08
W $8B89,$02
B $8B8B,$08
@ $8B93 label=GetKey
  $8B93,$04 Stash #REGhl, #REGix and #REGbc on the stack.
  $8B97,$03 Call #R$8B78.
  $8B9A,$04 Write $0000 to #R$8B89.
  $8B9E,$03 #REGhl=$8B8B.
  $8BA1,$04 #REGix=#R$8B81.
  $8BA5,$03 #REGbc=$FEFE.
@ $8BA8 label=GetKey_Loop
  $8BA8,$02 Read from the keyboard port.
  $8BAA,$02,b$01 Keep only bits 0-4.
  $8BAC,$03 OR against what #REGix is pointing to.
  $8BAF,$01 Stash #REGaf on the stack.
  $8BB0,$01 Invert the bits (1's complement on #REGa).
  $8BB1,$01 Keep bits based on what #REGhl is pointing to.
  $8BB2,$01 Invert the bits back (1's complement on #REGa).
  $8BB3,$02 If it is zero, jump to #R$8BBC.
  $8BB5,$04 Stash #REGbc at #R$8B89.
  $8BB9,$03 Stash #REGa at #R$8B89.
@ $8BBC label=GetKey_
  $8BBC,$01 Restore #REGaf from the stack.
  $8BBD,$01 Stash #REGa at #REGhl.
  $8BBE,$01 Increase #REGhl by one.
  $8BBF,$02 Increase #REGix by one.
  $8BC1,$02 Rotate #REGb left.
  $8BC3,$02 If there is carry then this is not a match, jump back to #R$8BA8 to try again.
  $8BC5,$04 #REGbc=#R$8B89.
N $8BC9 If no key match was found, end...
  $8BC9,$04 If #REGbc is $0000, jump to #R$8BF6.
  $8BCD,$02 #REGa=$FB.
  $8BCF,$02 #REGa=#REGa + 5.
  $8BD1,$02 Rotate #REGb right once.
  $8BD3,$02 If there is any carry, jump to #R$8BCF.
  $8BD5,$01 Decrease #REGa by one, ready for the following loop to begin in the same place.
  $8BD6,$01 Increment #REGa by one.
  $8BD7,$02 Rotate #REGc right once.
  $8BD9,$02 If there is any carry, jump to #R$8BD6.
  $8BDB,$03 Create an offset in #REGbc.
  $8BDE,$03 #REGhl=#R$8BFB.
  $8BE1,$04 Read from the keyboard port.
. #TABLE(default,centre,centre,centre,centre,centre,centre)
. { =h,r2 Port Number | =h,c5 Bit }
. { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
. { $FE | SHIFT | Z | X | C | V }
. TABLE#
  $8BE5,$02,b$01 Keep only bit 0 (SHIFT).
  $8BE7,$02 If it is zero, jump to #R$8BF1.
  $8BE9,$04 Read from the keyboard port.
. #TABLE(default,centre,centre,centre,centre,centre,centre)
. { =h,r2 Port Number | =h,c5 Bit }
. { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
. { $7F | SPACE | FULL-STOP | M | N | B }
. TABLE#
  $8BED,$02,b$01 Keep only bit 1 (FULL-STOP).
  $8BEF,$02 If it is not zero, jump to #R$8BF4.
@ $8BF1 label=GetKey_UseMap2
  $8BF1,$03 #REGhl=#R$8C23.
@ $8BF4 label=GetKey_GetByte
  $8BF4,$01 #REGhl=#REGhl + keyboard map offset.
  $8BF5,$01 #REGa=#REGhl (fetched byte from keyboard map).
@ $8BF6 label=GetKey_Return
  $8BF6,$04 Restore #REGbc, #REGix and #REGhl from the stack.
  $8BFA,$01 Return.

@ $8BFB label=KeyboardMap1
B $8BFB,$05 #FOR$00,$04||n|#IF(#PEEK(#PC+n) > $00)(#CHR(#PEEK(#PC+n)),--)|, ||
L $8BFB,$05,$08
@ $8C23 label=KeyboardMap2
B $8C23,$05 #FOR$00,$04||n|#IF(#PEEK(#PC+n) > $00)(#CHR(#PEEK(#PC+n)),--)|, ||
L $8C23,$05,$08

c $8C4B Action Look
@ $8C4B label=Action_Look
  $8C4E,$04 #REGix=#R$B70C
  $8C5F,$03 #REGhl=#R$AFFC("You are in[0x16]")
  $8C62,$03 Call #R$72DD.

  $8C65,$02 Stash #REGix on the stack.

  $8C84,$03 #REGhl=#R$B003("You see :[0x14]")
  $8C87,$03 Call #R$72DD.
  $8C8A,$02 Restore #REGix off the stack.
  $8C92,$03 Jump to #R$9FAF.

  $8CA0,$03 #REGhl=#R$ADF1("You are not carrying it[0x15]")
  $8CA3,$03 Jump to #R$72DD.

c $8CA6 Action Putdown
@ $8CA6 label=Action_Putdown

  $8CD2,$03 #REGhl=#R$B142("[0x00] evaporate(s|d|ing|es)[0x15]")
  $8CDC,$03 Call #R$72DD.
  $8CDF,$01 Return.

  $8CE9,$03 #REGhl=$AFB5

  $8D0B,$03 #REGhl=#R$AE04("[0x07] is too heavy to lift")
  $8D1D,$03 #REGhl=#R$AE0C("You are carrying too much")
  $8D22,$03 Jump to #R$72DD.

c $8D33 Action Pickup
@ $8D33 label=Action_Pickup
  $8D36,$03 #REGhl=#R$AE11("You are already carrying[0x07][0x15]")

b $8D6E Location Percentage Completion Table
@ $8D6E label=PercentageLocationTable
N $8D6E #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
B $8D6E,$01 Location ID.
W $8D6F,$02 Percentage to add.
L $8D6E,$03,$0E
N $8D98 End of table.
B $8D98,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).



g $8D99 Action Location Buffer
@ $8D99 label=ActionLocationData
W $8D99,$02 Pointer to the current location data from #R$BA8A.
@ $8D9B label=ActionLocationID
B $8D9B,$01 The current location ID.
@ $8D9C label=
B $8D9C,$01

c $8D9D Action Dir
@ $8D9D label=Action_Dir
  $8D9D,$05 Jump to #R$8DAB if #R$95ED reports that it is light.

  $8DD9,$06 Jump to #R$9F76 if #R$95ED reports that it is light.
  $8DDF,$03 Call #R$9D44.
  $8DE2,$04 #REGix=#R$C11B.

  $8DE7,$03 #REGhl=#R$AD7D("but fall and hit your head[0x15]")
  $8DF1,$03 #REGhl=#R$AD8A("but fall and smash your skull")
  $8DF4,$03 Call #R$72DD.
  $8DF7,$03 Jump to #R$90D2.

  $8E12,$03 Call #R$9D44.
  $8E15,$03 Update the location.
  $8E18,$03 #REGa=#R$B6EA.
  $8E1B,$03 Call #R$9BDD.
  $8E1E,$03 #REGa=#R$B6EA.
  $8E21,$03 Return if the character is not #OBJECT($00, 1, 1)($).
  $8E24,$0A Call #R$9DBD using the #R$C78E(events table), looking for a match with #R$8D9B.
  $8E2E,$02 Jump to #R$8E39 if no event was found.
  $8E30,$06 Load the event from the #R$C78E(events table).
  $8E36,$03 Call #R$9B6C to execute it.

N $8E39 The game adds a one-time only value to the completion percentage once certain locations are reached (as long as
.       it's not dark).
@ $8E39 label=PercentageLocation
  $8E39,$04 Return if #R$95ED reports that it is dark.
  $8E3D,$03 #REGa=#R$B6EA.
  $8E40,$01 Set zero flag if the character is #OBJECT($00, 1, 1)($).
  $8E41,$03 #REGa=#R$8D9B.
  $8E44,$02 Jump to #R$8E6A to deal with any other object.
  $8E46,$03 #REGhl=#R$8D99.
  $8E49,$05 If bit 6 is already (percentage is already added) set jump to #R$96A8.
  $8E4E,$02 Set bit 6 of the location attributes, this sets that the percentage has already been added and hence will be
.           skipped the next time this location is accessed.
  $8E50,$01 Stash #REGaf on the stack.
  $8E51,$07 Call #R$9DBD with #R$8D6E.
  $8E58,$02 Jump to #R$8E69 if there was no match.
  $8E5A,$01 Stash #REGde on the stack.
  $8E5B,$06 #REGde=the percentage value to add from the match of #R$8D6E.
  $8E61,$07 Add the percentage value to #R$B6F7 and write it.
  $8E68,$01 Restore #REGde from the stack.
@ $8E69 label=PercentageLocation_Return
  $8E69,$01 Restore #REGaf from the stack.
@ $8E6A label=PercentageLocation_Skip
  $8E6A,$03 Jump to #R$9630.

  $8E6D,$03 #REGhl=#R$AE23("[0x04] is too small for you to enter").
  $8E76,$03 #REGhl=#R$AE2E("[0x04] is too full for you to{5} enter[0x15]").

  $8E81,$03 Call #R$72DD.
  $8E84,$01 Return.

  $8F35,$03 #REGhl=#R$AE1F("it is dark")
  $8F38,$03 Jump to #R$72DD.

c $8FAD Action Run
@ $8FAD label=Action_Run

c $8FCD Action Enter
@ $8FCD label=Action_Enter

c $8FD6 Action Follow
@ $8FD6 label=Action_Follow
  $8FEF,$03 #REGhl=#R$AFE9("i cannot follow[0x07] from here[0x15]")
  $8FF2,$03 Jump to #R$72DD.

c $8FF5 Action Throw-At
@ $8FF5 label=Action_ThrowAt

c $9034 Action Talk-To
@ $9034 label=Action_Talkto

  $905C,$03 #REGhl=#R$B1E3("[0x07] says " No "[0x14]")
  $905F,$03 Call #R$72DD.

c $9076 Action Shoot
@ $9076 label=Action_Shoot
  $907B,$03 #REGhl=#R$B121("You are not carrying the bow")

  $9098,$03 #REGhl=#R$B127("the arrow misses[0x09] by a wide margin").
  $90B7,$03 #REGhl=#R$B136("the arrow{5} hits[0x07][0x15]").

c $90D2 "You are dead" controller.
@ $90D2 label=YouAreDead
  $90D6,$03 #REGhl=#R$AFF1("You are dead").
  $90D9,$03 Call #R$72DD.
  $90DC,$03 Call #R$83F5.
@ $90DF label=YouAreDead_WaitForKey
N $90DF This is almost a carbon copy of #R$8441 only differing in that it ends with a jump to #R$6C27 and doesn't set a border colour.
  $90DF,$03 Read from the keyboard port.
  $90E2,$02,b$01 A pressed key from any line will set its respective bit; bit 0 (outer key) to bit 4 (inner key).
.           Hence keep only bits 0-4 for the check.
  $90E4,$04 Loop back to #R$90DF until any key has been pressed.
  $90E8,$03 Jump to #R$6C27.

c $90EB Action Inventory
@ $90EB label=Action_Inventory
  $90EB,$03 Call #R$9D44.
  $90EE,$03 #REGhl=#R$ADF6("You are carrying[0x15]")
  $90F1,$03 Call #R$72DD.
  $90FB,$03 #REGhl=#R$B33B("{6} nothing")
  $90FE,$03 Display this message using #R$72DD if zero.
  $9101,$03 #REGa=#R$B6EA
  $9104,$04 #REGix=#R$B70C
  $9108,$03 #REGb=
  $910B,$03 Jump to #R$9FAF.

c $910E
  $9135,$03 Jump to #R$9FAF.

  $9149,$01 Return.

  $9170,$01 Return.

c $9171 Action Attack
@ $9171 label=Action_Attack
  $91A0,$03 #REGhl=#R$AF5F("you cannot kill with[0x09][0x15]")
  $91C2,$03 #REGhl=#R$AF50("but the effort is wasted.[0x0e] defense is too strong")
  $91FE,$03 #REGhl=#R$AE3A("with one well place(s|d|ing|es) blow you cleave[0x0e] skull")
  $9201,$03 Call #R$72DD.
W $9226,$20
  $927E,$03 #REGhl=#R$AE1A("[0x09] is too full")
  $92DC,$03 #REGhl=#R$B146("[0x0c] foul gluttony has{5} killed you[0x15]")

c $939E Action Give
@ $939E label=Action_Give
  $93A5,$03 #REGhl=#R$ADF1("You are not carrying it[0x15]")
  $93AE,$03 Call #R$9CED.
  $93BE,$03 #REGhl=#R$AE0C("You are carrying too much")
  $93C4,$03 Call #R$9D44.
  $93D7,$03 Jump to #R$9BDD.

c $93DA Action Examine
@ $93DA label=Action_Examine
  $93DA,$03 Call #R$9D44.
  $93DD,$03 #REGa=#R$B6E8
  $93E0,$03 Call #R$9BCA.
  $93E3,$06 #REGhl=offset for object help text.
  $93E9,$05 If this value is not $0000 then jump to #R$72DD.
  $93EE,$03 #REGhl=#R$B000("You see[0x16]")
  $93F1,$03 Call #R$72DD.
  $93F4,$04 #REGiy=#REGix
  $93F8,$03 Call #R$9EC7.
  $93FD,$03 Call #R$858B.
  $9400,$03 Call #R$8583.
  $9403,$01 Return.

  $944C,$03 #REGhl=#R$ADFC("and it get(s|d|ing|es) swept away")
  $944F,$03 Call #R$72DD.

  $9531,$03 #REGhl=#R$AFC4("i see nothing here")
  $9534,$03 Call #R$72DD.

  $9586,$06 Fetch the action address from the #R$C730(action table) and store it in #REGhl.
  $958C,$03 Call #R$9B6C.

@ $959B label=CheckLit
  $959B,$07 If #R$B6FA is not $01 then jump to #R$95C7.
N $95A2 This check is a little unnecessary as the first thing the routine at #R$95ED does, is to check exactly this...
  $95A2,$07 If #R$B6EA is not $00 (i.e. "#TEXTTOKEN($C11B + $08, 1)") then skip the "is location lit" check, instead jump to #R$95AF.
N $95A9 #R$95ED uses the carry flag to indicate if it is light or dark.
  $95A9,$06 If the location is dark then call #R$72DD to tell the user #R$AE1F("it is dark").
@ $95AF label=CheckAction
  $95AF,$04 #REGb=#R$B6E7.
  $95B3,$0A Call #R$95DF with #REGix=#R$B708 and #REGa=#R$B6E8.
  $95BD,$0A Call #R$95DF with #REGix=#R$B70A and #REGa=#R$B6E9.
N $95C7 Performs housekeeping and returns.
@ $95C7 label=CheckReturn
  $95C7,$04 Restore #REGbc, #REGix and #REGhl from the stack.
  $95CB,$01 Return.

N $95CC Checks if the action given is valid.
@ $95CC label=CheckValidAction
  $95CC,$0A Call #R$9DBD with #R$C730, to match the key value of #R$B6E7.
  $95D6,$04 If the termination character was not reached because an action did match, jump to #R$9586.
  $95DA,$05 Else, call #R$72CE and jump to #R$95C7.

  $95DF,$05 Return if the object is marked as being a "Fluid".
  $95E4,$05 Return if the object is not marked as "Gives Light".
  $95E9,$03 Call #R$9AA0.
  $95EC,$01 Return.

c $95ED Is Location Lit?
N $95ED We're only interested if the currently processed charcter is the player. Return if not.
@ $95ED label=LocationLit
  $95ED,$05 Return if #R$B6EA is not zero.
N $95F2 Begin...
  $95F2,$03 Store #REGix and #REGbc on the stack.
N $95F5 Check if the player object is inside "something".
  $95F5,$04 #REGix=#R$C11B("#TEXTTOKEN($C11B + $08, 1)").
  $95F9,$03 Call #R$9E7A.
  $95FC,$03 If the player is inside of another object then jump to #R$9608.
N $95FF Check the location data to see if this location is light or dark.
  $95FF,$03 Call #R$9D37.
  $9602,$06 If the location is marked as being "LIGHT" then jump to #R$9624 to return.
N $9608 The "#TEXTTOKEN($C305 + $08, 1)" is a light source, can it be used?
@ $9608 label=LocationLit_Sword
  $9608,$02 Stash #REGiy on the stack briefly.
  $960A,$09 Using #REGa=$0E and #REGhl=#R$C305 which are the object ID and object location for "#TEXTTOKEN($C305 + $08, 1)", call #R$9E34.
  $9613,$02 Restore #REGiy from the stack.
  $9615,$02 Jump to #R$9620 if it is dark.
  $9617,$03 #REGa=#R$C30C(the attributes for "#TEXTTOKEN($C305 + $08, 1)").
  $961A,$02 XOR #EVAL($F7,2,8).
  $961C,$04 If the "#TEXTTOKEN($C305 + $08, 1)" is not "Broken", "Gives Light" and is not "Full" (?) then jump to #R$9628.
N $9620 The below handle the two responses for "light" and "dark" using the carry flag to signify darkness when set, and light unset.
@ $9620 label=LocationLit_IsDark
  $9620,$03 #REGhl=#R$AE1F("it is dark").
  $9623,$01 Set the carry flag.
@ $9624 label=LocationLit_Return
  $9624,$03 Restore #REGbc and #REGix from the stack.
  $9627,$01 Return.
@ $9628 label=LocationLit_IsLight
  $9628,$01 Reset the carry flag.
  $9629,$02 Jump to #R$9624.

c $962B "You see ..." Routines
@ $962B label=YouSeeEntry
  $962B,$03 #REGhl=#R$B000("You see[0x16]").
  $962E,$02 Jump to #R$964D.
@ $9630 label=YouSeePreposition
  $9630,$01 Stash #REGaf on the stack.
  $9631,$03 Call #R$9BB1.
M $9634,$05 Fetch the location attribute, keep only bits 1-3 which signify the location preposition ("IN", "ON", "AT", etc).
  $9637,$02,b$01
  $9639,$03 Create an offset for the preposition word look-up.
  $963C,$04 Add the offset to #R$BA80.
  $9640,$03 Fetch the referenced text bytes which display the preposition word.
  $9643,$06 Write the text tokens to #R$AFFC($AFFD) which updates the copy for "You are XXXX[0x16]".
  $9649,$01 Restore #REGaf from the stack.
  $964A,$03 #REGhl=#R$AFFC("You are in[0x16]").
@ $964D label=YouSeeWrapper
  $964D,$05 Stash #REGix, #REGiy and #REGbc on the stack.
  $9652,$03 Call #R$965B.
  $9655,$05 Restore #REGbc, #REGiy and #REGix from the stack.
  $965A,$01 Return.

N $965B From here starts the "intro" to a location;
. #LIST
. { Print the "You see[0x16]" text }
. { Handle printing the location data message for this location (if one exists) }
. { Handles initiating the location graphics/ drawing (if it exists) }
. { Handles waiting for a keypress (if something was drawn) }
. { Prints available exits }
. LIST#
@ $965B label=YouSeeStart
  $965B,$01 Store #REGa in #REGb temporarily.
  $965C,$03 Call #R$9BB1 to set #REGix to point to the appropriate #R$BA8A(location data) for the current location.
  $965F,$03 Call #R$72DD.
  $9662,$06 Load the #R$BA8A(location data) offset for the current location description.
  $9668,$02 Check that there is a value for the description, set zero flag if not.
  $966A,$03 Call #R$9686.
  $966D,$01 Restore the previous value of #REGa (the location ID).
  $966E,$03 Call #R$7F78.
  $9671,$07 Test if #R$7F77 contains $FF, call #R$969A if it does not (i.e. wait for a keypress only if something has been drawn).
  $9678,$03 Call #R$8583.
  $967B,$01 Restore the previous value of #REGa (the location ID).
  $967C,$03 Call #R$A0C8.
@ $967F label=YouSeeExits
  $967F,$01 Restore the previous value of #REGa (the location ID).
  $9680,$03 Call #R$A138.
  $9683,$03 Jump to #R$9F94.
@ $9686 label=YouSeePrint
  $9686,$03 Print the location description if one is present.
@ $9689 label=YouSeeNext
  $9689,$03 #REGde=$0002.
  $968C,$02 Stash #REGiy on the stack.
  $968E,$04 #REGiy=#REGix.
  $9692,$02 #REGiy=#REGiy + $0002 (from #REGde).
  $9694,$03 Call #R$9ED6.
  $9697,$02 Restore #REGiy from the stack.
  $9699,$01 Return.

@ $969A label=WaitForKey2
N $969A This is almost a carbon copy of #R$8441 only differing in that it ends with a return.
  $969A,$03 Read from the keyboard port.
  $969D,$02,b$01 A pressed key from any line will set its respective bit; bit 0 (outer key) to bit 4 (inner key).
.           Hence keep only bits 0-4 for the check.
  $969F,$04 Loop back to #R$969A until any key has been pressed.
  $96A3,$04 Set the border to white.
  $96A7,$01 Return.

@ $96A8 label=YouSeeController
  $96A8,$03 Call #R$9BB1.
  $96AB,$03 Call #R$9689.
  $96AE,$03 Call #R$8583.
  $96B1,$02 Jump to #R$967F.

c $96B3

  $976E,$03 #REGhl=#R$AFE4("[0x04] is carrying[0x04][0x15]").
  $9771,$03 Call #R$72DD.

c $9A85
R $9A85 A The index to search for
  $9A85,$02 Stash #REGde and #REGbc on the stack.
  $9A87,$01 #REGb=#REGa (search key).
  $9A88,$03 #REGhl=#R$CACB.
  $9A8B,$03 #REGde=$0007.
  $9A8E,$04 If the current pointer matches our key jump to #R$9A9A.
  $9A92,$04 If we've reached the termination character then jump to #R$9A9A.
  $9A96,$01 Increase the pointer address by $0007 (using #REGde).
  $9A97,$03 Jump to #R$9A8E.
  $9A9A,$02 Restore #REGbc and #REGde from the stack.
  $9A9C,$03 #REGiy=#REGhl.
  $9A9F,$01 Return.

  $9AA0,$04 Store #REGiy and #REGix on the stack.
  $9AA4,$03 Call #R$9A85.
  $9AA7,$04 Jump to #R$9AC8 if the termination character was reached.
  $9AAB,$06 #REGhl=
  $9AB1,$03 #REGix=#REGhl.
  $9AB5,$03 Call #R$9DBD.
  $9AB8,$04 Jump to #R$9AC8 if the termination character was reached.
  $9ABC,$0C Store ... TODO
  $9AC8,$04 Restore #REGix and #REGiy from the stack.
  $9ACC,$01 Return.

c $9ACD

c $9B02 Action None
@ $9B02 label=Action_None
  $9B02,$05 Call #R$9F82 using #REGa=$00 #R$C11B("#TEXTTOKEN($C11B + $08, 1)").
  $9B07,$03 Write #REGa to #R$B6F5.
  $9B0A,$03 Call #R$95ED.
  $9B0D,$02 #REGa=$00.
  $9B0F,$02 If it is light jump to #R$9B12.
  $9B11,$01 #REGa=$01.
  $9B12,$03 Write #REGa to #R$980C.
  $9B15,$01 Return.

c $9B16

c $9B6C Execute Action.
R $9B6C HL Pointer to the action code
@ $9B6C label=TriggerAction
  $9B6C,$07 Stash #REGix, #REGiy, #REGde, #REGbc and #REGhl on the stack.
  $9B73,$05 Call #R$9B80 if #REGhl is not empty (i.e. $0000).
  $9B78,$07 Restore #REGhl, #REGbc, #REGde, #REGiy and #REGix from the stack.
  $9B7F,$01 Return.
@ $9B80 label=TriggerAction_Jump
  $9B80,$01 Indirect jump to the address held in #REGhl.

c $9B81

c $9B93 Step Into 3ByteTable
R $9B93 IX Pointer to the record data
R $9B93 O:A The record ID
R $9B93 O:IY The record data
@ $9B93 label=Step3ByteTable
  $9B93,$01 Exchange registers.
  $9B94,$05 Move onto the next record #REGix=#REGix+$0003.
  $9B99,$09 #REGiy=load the record.
  $9BA2,$03 #REGa=the record ID.
  $9BA5,$02 Set flag if this is the termination character ($FF).
  $9BA7,$01 Exchange registers.
  $9BA8,$01 Return.

c $9BA9 Wrapper Around Step3ByteTable.
R $9BA9 IX Pointer to 3 byte table data
R $9BA9 O:IX Pointer moved to the next record
R $9BA9 O:IY Contents of the record
@ $9BA9 label=Step3ByteTable_Next
  $9BA9,$01 Store #REGbc on the stack.
  $9BAA,$01 Store #REGa in register #REGb so it's not overwritten by the following CALL instruction.
  $9BAB,$03 Call #R$9B93.
  $9BAE,$01 Restore the previous value of #REGa.
  $9BAF,$01 Restore #REGbc off the stack.
  $9BB0,$01 Return.

c $9BB1 Locate Location
R $9BB1 A Location ID
R $9BB1 O:IX Pointer to #R$BA8A(location data)
@ $9BB1 label=LocateLocation
  $9BB1,$04 If the location ID is less than $50 jump to #R$9BB7 to process it.
  $9BB5,$01 Reset #REGa to $00.
  $9BB6,$01 Return.
N $9BB7 Work out the location now #REGa is validated as a legitimate location ID.
@ $9BB7 label=LocateLocation_Action
  $9BB7,$01 Stash #REGde on the stack.
  $9BB8,$03 #REGde=#R$B9E0
  $9BBB,$01 Stash #REGhl on the stack.
  $9BBC,$03 Store offset in the #REGhl register pair.
N $9BBF Calculate Location address, some examples would be;
. #TABLE(default,centre,centre,centre,centre)
. { =h Location ID | =h Sum | =h Location Table Entry | =h Location Data }
. { #LET(id=$05) #N({id}, 2, 3, 1, 1)($) | (#N({id}, 2, 3, 1, 1)($) * 2) + #N($B9E0, 2, 3, 1, 1)($) | #R(#EVAL($B9E0 + {id} * 2)) | #R(#EVAL(#PEEK(#EVAL($B9E0 + {id} * 2)) + #EVAL(#PEEK(#EVAL($B9E1 + {id} * 2)) * 256))) }
. { #LET(id=$20) #N({id}, 2, 3, 1, 1)($) | (#N({id}, 2, 3, 1, 1)($) * 2) + #N($B9E0, 2, 3, 1, 1)($) | #R(#EVAL($B9E0 + {id} * 2)) | #R(#EVAL(#PEEK(#EVAL($B9E0 + {id} * 2)) + #EVAL(#PEEK(#EVAL($B9E1 + {id} * 2)) * 256))) }
. { #LET(id=$33) #N({id}, 2, 3, 1, 1)($) | (#N({id}, 2, 3, 1, 1)($) * 2) + #N($B9E0, 2, 3, 1, 1)($) | #R(#EVAL($B9E0 + {id} * 2)) | #R(#EVAL(#PEEK(#EVAL($B9E0 + {id} * 2)) + #EVAL(#PEEK(#EVAL($B9E1 + {id} * 2)) * 256))) }
. TABLE#
  $9BBF,$02 #REGhl=(#REGhl*2)+#REGde
  $9BC1,$03 #REGde=the location from the pointer in #REGhl.
  $9BC4,$03 #REGix=#REGde using the stack.
  $9BC7,$02 Restore #REGhl and #REGde off the stack.
  $9BC9,$01 Return.

c $9BCA Locate Object
N $9BCA Locates an object from a given object ID.
R $9BCA A Object ID
R $9BCA O:IX The object data address from #R$C11B
@ $9BCA label=LocateObject
  $9BCA,$04 #REGix=#R$C063(the start address of the object table).
  $9BCE,$03 Call #R$9DBD to locate the object.
  $9BD1,$01 Stash #REGhl on the stack.
  $9BD2,$06 #REGhl=the corresponding object address from the object table.
  $9BD8,$03 #REGix=#REGhl and restore the old value of #REGhl from the stack.
  $9BDB,$01 Return.

c $9BDC
B $9BDC,$01

c $9C41
  $9C41,$05 Stash #REGix, #REGiy and #REGbc on the stack.
  $9C46,$01 Stash #REGa in the #REGb register temporarily so it doesn't get overwritten.
  $9C47,$03 Call #R$9BB1.
  $9C4D,$01 Stash #REGa in the #REGc register temporarily so it doesn't get overwritten.
  $9C4E,$04 Set #REGix to $C060 which is 3 bytes less than the start of the #R$C063(object table) due to the following
.           line adding $0003 and moving us on to the first record.
  $9C52,$03 Call #R$9B93.
  $9C55,$02 Jump to #R$9C6D if we've reached the end of the object data.
  $9C57,$07 If the TODO is not $01 (TODO), then loop back round to #R$9C52 to move onto the next record.
N $9C5E Success! We've found a record which matches $01 (TODO).
  $9C5E,$01 Restore the previous value of #REGa from the #REGb register.
  $9C6B,$02 Jump to #R$9C52.
  $9C6D,$01 Restore the previous value of #REGa from the #REGc register.
  $9C6E,$05 Restore #REGbc, #REGiy and #REGix from the stack.
  $9C73,$01 Return.
  $9C76,$02 Jump to #R$9C6D.

c $9C78

c $9C9F Random Number
R $9C9F A Random seed?
R $9C9F O:A Random number
@ $9C9F label=GetRandomNum
  $9C9F,$03 Call #R$9CA8.
  $9CA2,$03 Return if bit 7 is set.
  $9CA5,$02 Negate the accumulator.
  $9CA7,$01 Return.

@ $9CA8 label=CalcRandom
  $9CA8,$03 Stash #REGix and #REGbc on the stack.
  $9CAB,$01 #REGc=#REGa.
  $9CAC,$02 #REGa=#REGa * 2.
  $9CAE,$02 Jump to #R$9CB2 if there's no carry over.
  $9CB0,$02 Else, set #REGa=#N$FF.
  $9CB2,$01 #REGb=#REGa.
  $9CB3,$07 Increase the LSB of the #R$B712 by one.
  $9CBA,$02 If the LSB has not "rolled over" to $00, skip updating the MSB on the following line. Jump to #R$9CB2.
  $9CBC,$03 Increase the MSB of the #R$B712 by one.
  $9CBF,$04 #REGix=#R$B712.
  $9CC3,$03 #REGa=#R$B70E.
  $9CCE,$01 Stash #REGhl on the stack.
  $9CCF,$04 Compare #R$B70E against #REGa.
  $9CD3,$01 Restore #REGhl from the stack.
  $9CD4,$02 If the result of the comparison was zero, jump back to #R$9CB3 to try again.
  $9CD6,$03 Write #REGa to #R$B70E.
  $9CE4,$03 Restore #REGbc and #REGix from the stack.
  $9CE7,$01 Return.

c $9CE8

c $9D37 Get Object Location In IX
@ $9D37 label=GetObjectLocationInIX
R $9D37 O:IX The object location
  $9D37,$01 Stash #REGaf on the stack.
  $9D38,$07 Fetch the location ID for the object held by #R$B70C.
  $9D3F,$03 Call #R$9BB1.
  $9D42,$01 Restore #REGaf off the stack.
  $9D43,$01 Return.

c $9D44
  $9D44,$06 If #R$B6FA is $01 then return.
  $9D4A,$01 Increase TODO by one and write it to #R$B6FB.
  $9D4E,$01
  $9D4F,$01 Return.

  $9D50,$03 #REGa=#R$B6E8.

  $9D53,$05 Stash #REGiy, #REGix and #REGhl on the stack.
  $9D58,$03 Call #R$9BCA.
  $9D5B,$03 #REGb=Mother object.
  $9D5E,$04 Set #REGix to $C060 which is 3 bytes less than the start of the #R$C063(object table) due to the following
.           line adding $0003 and moving us on to the first record.
  $9D62,$03 Call #R$9BA9.
  $9D65,$02 Jump to #R$9D91 if TODO.
  $9D67,$05 Compare TODO, jump back to #R$9D62 if so.
  $9D7F,$03 Call #R$9EC7.
  $9D82,$03 #REGhl=#R$B142("evaporate(s|d|ing|es)[0x15]").
  $9D85,$03 Call #R$72DD.
  $9D89,$02 Jump to #R$9D62.
  $9D8E,$03 Jump to #R$9D62.
  $9D91,$05 Restore #REGhl, #REGix and #REGiy from the stack.
  $9D96,$01 Return.

c $9D97
R $9D97 O:A The number of objects
@ $9D97 label=ObjectCount
  $9D97,$05 Stash #REGix, #REGiy and #REGbc on the stack.
  $9DB7,$05 Restore #REGbc, #REGiy and #REGix from the stack.
  $9D9C,$02 Initialise the count of the number of objects.
  $9D9E,$04 Set #REGix to $C060 which is 3 bytes less than the start of the #R$C063(object table) due to the following
.           line adding $0003 and moving us on to the first record.
@ $9DA2 label=ObjectCount_Loop
  $9DA2,$03 Call #R$9BA9 to fetch the next record in #REGiy.
  $9DA5,$02 Jump to #R$9DB6 if we've reached the end of the table data.
  $9DA7,$05 Don't count this record if it's a "Mother Object", if it is then loop back to #R$9DA2 to continue.
  $9DAC,$06 Don't count this record if it's not "visible", if not then loop back to #R$9DA2 to continue.
  $9DB2,$01 Increase #REGb, the object counter, by one.
  $9DB3,$03 Jump to #R$9DA2.
@ $9DB6 label=ObjectCount_End
  $9DB6,$01 Store the object count in #REGa.
  $9DBC,$01 Return.

c $9DBD Index ID Table
N $9DBD Searches through what is essentially key value data to find a key match.
@ $9DBD label=IndexIdTable
R $9DBD A Key ID
R $9DBD IX Address of table data
R $9DBD O:IX The address in the table which matches the key ID
  $9DBD,$01 Exchange registers.
  $9DBE,$03 #REGhl=#REGix (using the stack to do so).
  $9DC1,$01 #REGb=key ID
  $9DC2,$04 #REGde=$0003 as each record is 3 bytes of data.
N $9DC6 Begin searching the table.
@ $9DC6 label=IndexIdTable_Loop
  $9DC6,$01 Grab the next ID.
  $9DC7,$03 If the key ID is the one we want, jump to #R$9DD2.
  $9DCA,$04 If we've reached the termination character (key ID not found), jump to #R$9DD2.
  $9DCE,$04 Add #REGde to #REGhl to check the next row, and jump back to #R$9DC6 to continue checking.
N $9DD2 Handle the output.
@ $9DD2 label=IndexIdTable_Found
  $9DD2,$03 #REGix=#REGhl (using the stack to do so).
  $9DD5,$02 Set flags (checking if the key ID was not found).
  $9DD7,$01 Exchange registers.
  $9DD8,$01 Return.

c $9DD9
  $9DD9,$04 Stash #REGbc, #REGde and #REGiy on the stack.
  $9DE8,$03 Call #R$9B93.
  $9E08,$03 Call #R$71F3.
  $9E18,$03 Call #R$9E34.
  $9E20,$04 Restore #REGiy, #REGde and #REGbc from the stack.
  $9E24,$01 Return.

  $9E25,$03 Call #R$9E2B.
  $9E33,$01 Return.

c $9E34
  $9E34,$02 Stash #REGix on the stack.
  $9E36,$04 #REGix=#R$B70C.
  $9E3A,$03 Call #R$9E40.
  $9E3D,$02 Restore #REGix from the stack.
  $9E3F,$01 Return.

  $9E40,$05 Return if the object is not "visible".
  $9E45,$05 Stash #REGiy, #REGix and #REGbc on the stack.
  $9E4A,$01 #REGb=the object ID.
  $9E4B,$03 #REGc=your current location ID.
  $9E74,$05 Restore #REGbc, #REGix and #REGiy from the stack.
  $9E79,$01 Return.

c $9E7A Is Container Lit?
@ $9E7A label=ContainerLit
R $9E7A IX Object Data Address e.g. #R$C11B
R $9E7A O:A Either $FF if this object is not inside a container, or the object ID of the container object
R $9E7A O:IX Object Data Address of either the input value, or the address of the container object
  $9E7A,$02 Stash #REGix on the stack.
@ $9E7C label=ContainerLit_Fetch
  $9E7C,$07 If the object is not inside of anything then jump to #R$9E92.
  $9E83,$01 Switch to the shadow register for #REGaf.
  $9E84,$03 #REGa=The mother object ID.
  $9E87,$03 Call #R$9BCA.
  $9E8A,$03 Fetch the objects attributes.
  $9E8D,$04,b$01 If the 'Give Light' and 'Full' attributes are set then jump to #R$9E7C to rerun the check on this object.
  $9E91,$01 Switch back to the "normal" #REGaf register.
@ $9E92 label=ContainerLit_Return
  $9E92,$02 Restore #REGix from the stack.
  $9E94,$01 Return.

c $9E95
  $9E95,$01 Stash #REGde on the stack.
  $9E96,$03 Call #R$9D37.
  $9E99,$05 Add $0007 to the object location.
  $9E9E,$01 Restore #REGde from the stack.
  $9E9F,$01 Return.

c $9EA0
  $9EA0,$03 Stash #REGiy and #REGde on the stack.
  $9EC3,$03 Restore #REGde and #REGiy from the stack.
  $9EC6,$01 Return.

c $9EC7
  $9EC7,$03 Stash #REGiy and #REGde on the stack.
  $9ECA,$05 #REGiy=#REGiy+$0008
  $9ECF,$03 Call #R$9ED6.
  $9ED2,$03 Restore #REGde and #REGiy off the stack.
  $9ED5,$01 Return.

  $9ED6,$02 Stash #REGaf and #REGde on the stack.
  $9ED8,$07 If #R$B703 is not zero then jump to #R$9EFA.
  $9EDF,$06 #REGde=...
  $9EE5,$03 Call #R$743F.
  $9EE8,$06 #REGde=...
  $9EEE,$03 Call #R$74C1.
  $9EF1,$06 #REGde=...
  $9EF7,$03 Call #R$74C1.
  $9EFA,$06 #REGde=...
  $9F00,$05 If #REGde is not zero call #R$7478.
  $9F05,$02 Restore #REGde and #REGaf off the stack.
  $9F07,$01 Return.

c $9F08
  $9F08,$03 Stash #REGbc and #REGiy on the stack.
  $9F0C,$03 Call #R$9E95.
  $9F0F,$03 Call #R$9B93.
  $9F21,$03 Restore #REGiy and #REGbc off the stack.
  $9F24,$01 Return.

c $9F25
  $9F49,$01 Return.

c $9F4A
  $9F4A,$10 Switch the addresses stored in #R$B708 and #R$B70A using #REGde and #REGiy.
  $9F66,$03 Call #R$9B6C.
  $9F75,$01 Return.

c $9F76
  $9F76,$03 #REGa=#R$B6FA.
  $9F79,$01 Decrease #REGa by one.
  $9F7A,$03 Jump to #R$712B if #REGa is now zero.
  $9F7D,$04 Write $00 to #R$B6FB.
  $9F81,$01 Return.

c $9F82 Get Object First Location
R $9F82 A Object ID
R $9F82 O:A Either $FF if the object appears once, or the location ID of the first time the object appears.
@ $9F82 label=ObjectFirstLocation
  $9F82,$03 Return if this is the terminator character ($FF).
  $9F85,$03 Call #R$9BCA to set #REGix to the object data address.
  $9F88,$05 Does the object appear in the game once?
  $9F8D,$02 #REGa=$FF (termination character).
  $9F8F,$01 Return if not.
  $9F90,$03 #REGa=the first location the object appears in.
  $9F93,$01 Return.

c $9F94
  $9F94,$04 Stash #REGiy, #REGaf and #REGbc on the stack.
  $9F98,$03 #REGhl=#R$B003("You see :[0x14]")
  $9F9B,$03 Call #R$72DD.
  $9F9E,$02 #REGa=$FF.
  $9FA0,$04 #REGiy=#R$B70C.
  $9FA4,$03 #REGb=location ID of the object.
  $9FA7,$03 Call #R$9FAF.
  $9FAA,$04 Restore #REGbc, #REGaf and #REGiy off the stack.
  $9FAE,$01 Return.

  $9FAF,$04 Stash #REGiy, #REGde and #REGbc on the stack.
  $9FB7,$03 Call #R$9FC7.
  $9FBC,$03 #REGhl=#R$B33B(" {6} nothing")
  $9FBF,$03 Call #R$9FAF if zero.
  $9FC2,$04 Restore #REGbc, #REGde and #REGiy off the stack.
  $9FC6,$01 Return.
  $9FD3,$02 Stash #REGix on the stack.
  $9FD5,$04 Set #REGix to $C060 which is 3 bytes less than the start of the #R$C063(object table) due to the following
.           line adding $0003 and moving us on to the first record.
  $9FD9,$03 Call #R$9BA9.
  $A00E,$03 Call #R$9E34.
  $A01B,$03 Call #R$9EC7.
  $A028,$03 Call #R$858B.
  $A02E,$03 Call #R$A050.
  $A039,$03 Call #R$9FC7.
  $A041,$03 Call #R$8583.
  $A04F,$01 Return.

c $A050
  $A050,$04 Stash #REGix, #REGbc and #REGde on the stack.
  $A092,$04 Restore #REGde, #REGbc and #REGix off the stack.
  $A088,$03 Call #R$A09D.
  $A08B,$03 #REGhl=#R$AFE0("[0x01] there[0x01][0x14]")
  $A08E,$03 Call #R$72DD.
  $A096,$01 Return.
  $A097,$03 Call #R$8583.
  $A09B,$02 Jump back to #R$A092.

  $A09D,$03 #REGhl=#R$AFCA
  $A0AB,$03 Jump to #R$72DD.

c $A0AE

c $A0BA
  $A0C7,$01 Return.

c $A0C8
  $A0C8,$06 Stash #REGbc, #REGde, #REGiy and #REGix on the stack.
  $A0CE,$03 Call #R$A0AE.
  $A0E0,$03 Call #R$9BCA.
  $A0F3,$03 Call #R$A0BA.
  $A104,$03 #REGhl=#R$AE17("to the[0x16]")
  $A107,$03 Call #R$72DD.
  $A10A,$03 Call #R$74C1.
  $A10D,$03 #REGhl=#R$B013("there is[0x00][0x14]")
  $A110,$03 Call #R$72DD.
  $A11D,$06 Restore #REGix, #REGiy, #REGde and #REGbc off the stack.
  $A123,$01 Return.

c $A124
  $A137,$01 Return.

c $A138 Display Exits
@ $A138 label=DisplayExits
  $A138,$06 Stash #REGix, #REGiy, #REGde and #REGbc on the stack.
  $A13E,$03 Call #R$A0AE.
  $A141,$03 Call #R$A124.
  $A144,$02 Jump to #R$A15D if there are no exits.
  $A146,$03 #REGhl=#R$B020("visible exits are:[0x16]")
  $A149,$03 Call #R$72DD.
  $A14F,$03 Call #R$A0BA.
  $A152,$03 Call #R$74C1.
  $A155,$03 Call #R$A14C.
  $A15A,$03 Call #R$8583.
  $A15D,$06 Restore #REGbc, #REGde, #REGiy and #REGix from the stack.
  $A163,$01 Return.

  $A184,$03 #REGhl=#R$AFBB("[0x04] is[0x01][0x15]")
  $A187,$03 Call #R$72DD.
  $A18B,$01 Return.
  $A1AD,$01 Return.
  $A1C7,$01 Return.
  $A1CF,$01 Return.
  $A1E2,$01 Return.
  $A1E3,$01 Stash #REGhl on the stack.
  $A1E4,$03 #REGhl=#R$B009("You say "[0x16]")
  $A1E7,$03 Call #R$72DD.
  $A1EA,$01 Restore #REGhl from the stack.
  $A1EB,$05 Write $01 to #R$B704.
  $A1F0,$03 Call #R$72DD.
  $A1F3,$03 #REGhl=#R$B00F(" ".[0x14]")
  $A1F6,$03 Jump to #R$72DD.
  $A20A,$01 Return.
B $A20B,$3D,$08

c $A248 Action: Tie
@ $A248 label=ActionTie

  $A267,$03 #REGhl=#R$B07D("[0x09] is already tied[0x15]")

c $A2B4 Action: Untie
@ $A2B4 label=ActionUntie

c $A302 Action: Burn
@ $A302 label=ActionBurn

c $A3E6 Action: Capture
@ $A3E6 label=ActionCapture

c $A541 Action: ClimbOut
@ $A541 label=ActionClimbOut
  $A541,$04 #REGiy=#R$B70C.
  $A545,$03 #REGa=#R$B6E8.
  $A548,$06 If this is not a mother object (i.e. something to climb out of) jump to #R$9F76.
  $A54E,$03 Call #R$9BCA.
  $A551,$03 Call #R$A5CA.
  $A557,$03 Call #R$9D44.
  $A55E,$01 Return.

  $A5DC,$03 #REGhl=#R$B085("the vicious warg run around you and howls.").

  $A5EB,$04 #REGix=#R$C3EE("#TEXTTOKEN($C3EE + $08, 1)").
  $A5EF,$03 #REGa=location of the "#TEXTTOKEN($C3EE + $08, 1)".
  $A5F2,$03 Return if "#TEXTTOKEN($C3EE + $08, 1)" is not at location #R$BDC1($21) - "#TEXTTOKEN($BDC1 + $02, $01)".

  $A5FF,$03 #REGa=#R$C11C(player mother object).
  $A602,$02 Is the player inside object $13, i.e. using the "#TEXTTOKEN($C3EE + $08, 1)"?
  $A604,$03 #REGhl=#R$B32C("you are thrown onto the bank of the long lake").
  $A607,$03 If so, call #R$72DD.

  $A615,$04 #REGix=#R$C3EE("#TEXTTOKEN($C3EE + $08, 1)").
  $A619,$04 Update the location of the object to location #R$BDAD($20) - "#TEXTTOKEN($BDAD + $02, $01)".

  $A633,$04 #REGiy=Object #R$C418($14) - "#TEXTTOKEN($C418 + $08, 1)".
  $A63F,$01 Return.

  $A651,$03 #REGhl=#R$B0CB("where's the thief ?[0x16]").
  $A664,$03 #REGhl=#R$B0F4("thorin wait.").
  $A66A,$03 #REGhl=#R$B0D5("get us out of this one, thief ![0x16]").
  $A670,$03 #REGhl=#R$B0E5("thorin sit(s|d|ing|es) down and start(s|d|ing|es) sing(s|d|ing|es) about gold.").
  $A678,$03 #REGhl=#R$B05B("hurry up.").
  $A687,$03 #REGhl=#R$B11B("you cannot reach[0x07][0x15]").
  $A6BB,$03 #REGhl=#R$B017("[0x00] enter(s|d|ing|es).[0x14]").

  $A918,$05 Set #R$B702 to $01 (daytime).
  $A91D,$03 #REGhl=#R$B1DB("someone strangle(s|d|ing|es) you from behind").
  $A920,$03 Call #R$72DD.
  $A923,$03 Jump to #R$90D2.

  $A971,$03 Call #R$9D44.
  $A974,$05 Call #R$977F using object #R$C63F($47) - "#TEXTTOKEN($C63F + $08, 1)".
  $A979,$05 Call #R$977F using object #R$C651($48) - "#TEXTTOKEN($C651 + $08, 1)".
  $A97E,$03 #REGhl=#R$C646(attributes) for #R$C63F($47) - "#TEXTTOKEN($C63F + $08, 1)".
  $A981,$02 Reset bit 7 of the attribute byte set to "Visible" = "No".
  $A983,$03 #REGhl=#R$C658(attributes) for #R$C651($48) - "#TEXTTOKEN($C651 + $08, 1)".
  $A986,$02 Reset bit 7 of the attribute byte set to "Visible" = "No".
  $A988,$03 #REGhl=#R$B262("in a clearing with two stone trolls.").
  $A98B,$03 Write #REGhl to #R$BAC4(the empty location description) for #R$BABC($05) - "#TEXTTOKEN($BABC + $02, $01)".
  $A98E,$03 #REGhl=Location #R$BABC($05) - "#TEXTTOKEN($BABC + $02, $01)".
  $A991,$02 Reset bit 6 of the attribute byte.
  $A993,$05 Call #R$9D53 using object #R$C63F($47) - "#TEXTTOKEN($C63F + $08, 1)".
  $A998,$05 Call #R$9D53 using object #R$C651($48) - "#TEXTTOKEN($C651 + $08, 1)".

  $A99D,$03 #REGhl=#R$B30B("day dawn(s|d|ing|es)").
  $A9A0,$05 Set #R$B702 to $01 (daytime).
  $A9A5,$03 Call #R$72DD.
  $A9A8,$04 #REGix=#R$CC00.
  $A9AC,$05 Load the graphics data for #R$E142 "#LOCATIONNAME$05".
  $A9B1,$06 #REGhl=graphics data pointer.
  $A9B7,$02 Change the paper colour to $05 (cyan).
  $A9B9,$01 Increment the graphics data pointer by one.
  $A9BA,$02 Change the ??? colour to $28 ().
  $A9BC,$01 Return.

  $A9C9,$03 #REGhl=#R$B238("blimey, look at this!! Can yer cook'em?[0x16]").
  $A9D0,$03 #REGhl=#R$B24C("yer can try, but he wouldn't make above a mouthfull.").
  $A9D3,$03 Jump to #R$A1E3.

  $A9DC,$03 #REGhl=#R$B3D9.
  $A9DF,$03 Call #R$72DD.
  $A9E2,$03 Jump to #R$90DF.

  $AA8B,$03 #REGhl=#R$B2A4("the hole vanish(s|d|ing|es)[0x15]").
  $AA8E,$03 Jump to #R$72DD.
  $AA91,$03 #REGhl=#R$C2BC(attributes) for object #R$C2B5($0B) - "#TEXTTOKEN($C2B5 + $08, $01)".
  $AA94,$02 Set bit 7 of the attribute byte to "Visible" = "Yes".
  $AA9C,$03 #REGhl=#R$B277.
  $AA9F,$03 Jump to #R$72DD.

  $AAB8,$03 #REGhl=#R$B037("the magic door open(s|d|ing|es).[0x14]").
  $AADA,$03 #REGhl=#R$B03F("the magic door close(s|d|ing|es).[0x14]").
  $AB16,$03 #REGhl=#R$B0FD("the spider web is slowly smothering you.").
  $AB19,$03 Call #R$72DD.
  $AB1C,$03 Jump to #R$90D2.

  $AB1F,$03 #REGhl=#R$B311("You see some pale bulbous eyes star(s|d|ing|es) at You[0x15]").
  $AB22,$03 Call #R$72DD.

  $AB44,$03 #REGhl=#R$B311("You see some pale bulbous eyes star(s|d|ing|es) at You[0x15]").
  $AB47,$03 Call #R$72DD.
  $AB4A,$03 #REGhl=#R$B31F("some thing drop(s|d|ing|es) from above and sting(s|d|ing|es)[0x15]").
  $AB4D,$03 Call #R$72DD.
  $AB50,$03 Jump to #R$90D2.

w $AB53 Actions
@ $AB53 label=Actions
  $AB53,$08 "01) north - - go"
  $AB5B,$08 "02) south - - go"
  $AB63,$08 "03) east - - go"
  $AB6B,$08 "04) west - - go"
  $AB73,$08 "05) northeast - - go"
  $AB7B,$08 "06) northwest - - go"
  $AB83,$08 "07) southeast - - go"
  $AB8B,$08 "08) southwest - - go"
  $AB93,$08 "09) up - - go"
  $AB9B,$08 "0a) down - - go"
  $ABA3,$08 "0b) strike - with -"
  $ABAB,$08 "0c) close - - -"
  $ABB3,$08 "0d) drop - - -"
  $ABBB,$08 "0e) drop - in -"
  $ABC3,$08 "0f) attack - with -"
  $ABCB,$08 "10) open - - -"
  $ABD3,$08 "11) put - in -"
  $ABDB,$08 "12) put - on -"
  $ABE3,$08 "13) take - - -"
  $ABEB,$08 "14) take out of -"
  $ABF3,$08 "15) take from - -"
  $ABFB,$08 "16) take off - -"
  $AC03,$08 "17) look - - -"
  $AC0B,$08 "18) look through - -"
  $AC13,$08 "19) look across - -"
  $AC1B,$08 "1a) inventory - - -"
  $AC23,$08 "1b) eat - - -"
  $AC2B,$08 "1c) examine - - -"
  $AC33,$08 "1d) give to - -"
  $AC3B,$08 "1e) go through - -"
  $AC43,$08 "1f) enter - - -"
  $AC4B,$08 "20) go into - -"
  $AC53,$08 "21) drink - - -"
  $AC5B,$08 "22) empty - - -"
  $AC63,$08 "23) fill - with -"
  $AC6B,$08 "24) run - - -"
  $AC73,$08 "25) lock - with -"
  $AC7B,$08 "26) unlock - with -"
  $AC83,$08 "27) follow - - -"
  $AC8B,$08 "28) wear - - -"
  $AC93,$08 "29) throw - - -"
  $AC9B,$08 "2a) throw - at -"
  $ACA3,$08 "2b) throw - across -"
  $ACAB,$08 "2c) throw - through -"
  $ACB3,$08 "2d) burn - - -"
  $ACBB,$08 "2e) tie - to -"
  $ACC3,$08 "2f) cut - - -"
  $ACCB,$08 "30) capture - - -"
  $ACD3,$08 "31) pull - - -"
  $ACDB,$08 "32) swim - - -"
  $ACE3,$08 "33) untie - - -"
  $ACEB,$08 "34) climb - - -"
  $ACF3,$08 "35) talk to - -"
  $ACFB,$08 "36) climb into - -"
  $AD03,$08 "37) climb out of -"
  $AD0B,$08 "38) jump onto - -"
  $AD13,$08 "39) dig - - -"
  $AD1B,$08 "3a) shoot - - -"
  $AD23,$08 "3b) carry - - -"
  $AD2B,$02 ""
  $AD2D,$02 "THE"
  $AD2F,$02 "A"
  $AD31,$02 "AN"
  $AD33,$02 "SOME"
  $AD35,$02 "THE"
  $AD37,$02 "THE"
  $AD39,$02 "THE"
  $AD3B,$02 "SOME"

w $AD3D Common Words
@ $AD3D label=CommonWords
  $AD3D,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("A")
  $AD3F,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("AND")
  $AD41,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("ARE")
  $AD43,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("AT")
  $AD45,$08 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("BE")
  $AD47,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("BLOW")
  $AD49,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("BUT")
  $AD4B,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("CANNOT")
  $AD4D,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("CARRYING")
  $AD4F,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("DO")
  $AD51,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("DOOR")
  $AD53,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("DRAGON")
  $AD55,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("FALL")
  $AD57,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("FROM")
  $AD59,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("HERE")
  $AD5B,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("I")
  $AD5D,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("IN")
  $AD5F,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("IS")
  $AD61,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("IT")
  $AD63,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("NOT")
  $AD65,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("OF")
  $AD67,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("ON")
  $AD69,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("SEE")
  $AD6B,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("SOME")
  $AD6D,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("THE")
  $AD6F,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("THERE")
  $AD71,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("THIS")
  $AD73,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("TO")
  $AD75,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("TOO")
  $AD77,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("WHAT")
  $AD79,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("WITH")
  $AD7B,$02 #R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256+$6000))("YOU")

b $AD7D Text Messages
@ $AD7D label=TextMessages
  $AD7D,$0D " but fall and hit your head[0x15]"
  $AD8A,$09 " but fall and smash your skull"
  $AD93,$0C " i do not know the word " [0x16]"
  $AD9F,$04 " what ?[0x14]"
  $ADA3,$0D "[0x0d] You[0x01].[0x0d] Time passes..[0x15]"
  $ADB0,$10 " i do not know the verb "[0x01][0x01][0x01] "[0x14]"
  $ADC0 "[0x01][0x01][0x01][0x00][0x01][0x01][0x01] what ? [0x16]"
  $ADCC " which[0x01] ? [0x16]"
  $ADD3 " i do not see[0x00] here[0x14]"
  $ADDA "[0x14]"
  $ADDB " i see nothing to."
  $ADE1 "[0x0b] D[0x01][0x01][0x14]"
  $ADE7 "[0x0b] Eat[0x01][0x01][0x00][0x01][0x01][0x01][0x14]"
  $ADF1 "You are not carrying it[0x15]"
  $ADF6 "You are carrying[0x15]"
  $ADF9 "[0x13] carrying[0x14]"
  $ADFC " and it get(s|d|ing|es) swept away"
  $AE04 "[0x07] is too heavy to lift"
  $AE0C "You are carrying too much"
  $AE11 "You are already carrying[0x07][0x15]"
  $AE17 " to the[0x16]"
  $AE1A "[0x09] is too full"
  $AE1F " it is dark"
  $AE23 "[0x04] is too small for you to enter"
  $AE2E "[0x04] is too full for you to{5} enter[0x15]"
  $AE3A " with one well place(s|d|ing|es) blow you cleave[0x0e] skull"
  $AE49 "[0x0c] violent attack almost kill(s|d|ing|es)You[0x15]"
  $AE5A "You give[0x07] a vicious{5} cut in the ribs-[0x0e] strength is failing fast"
  $AE70 " a nasty slice miss(s|d|ing|es)[0x0e] heart"
  $AE7A "You slice[0x0e]- hand blood drips slowly to the ground"
  $AE8B "You give[0x07] a nasty{5} slash in the leg"
  $AE98 "You hit[0x07] hard on the shoulder-[0x07] stagger(s) and almost fall(s)[0x15]"
  $AEAC " a fast blow knocks the wind out of[0x07][0x15]"
  $AEBA " a fast stroke sweeps[0x07] off[0x0e] feet, but[0x11] on guard in a moment"
  $AED1 "You hit[0x07] with a glancing blow and leave[0x07] momentarily stunned"
  $AEE2 "You thrust[0x07] back-[0x07] lose(s)[0x0e] footing but recover(s) quickly"
  $AEF4 "You swing broadside at[0x0e] body but at the last moment[0x07] jump(s) aside"
  $AF09 "[0x0c][0x03] sweeps past close to[0x0e] ear"
  $AF15 "You slash at[0x07] but the blow is ineffective"
  $AF20 "You brandish[0x0c][0x03], but[0x11] on guard"
  $AF2B "You swing feebly at[0x07] but miss by a wide margin"
  $AF3C "You seem tired-you stagger but valiantly attempt another blow"
  $AF50 " but the effort is wasted.[0x0e] defense is too strong"
  $AF5F " you cannot kill with[0x09][0x15]"
  $AF66 " it sail(s|d|ing|es) across and."
  $AF6D " lands on the other side"
  $AF76 " fall(s|d|ing|es) just short of the other side"
  $AF82 "[0x0b][0x08] but slide(s|d|ing|es) out again"
  $AF8B " lands in the boat"
  $AF92 " the boat glides across the river and lands on this side"
  $AFA4 " with a lurch the boat glides across the river and[0x02] ngfar"
  $AFB6 " is not in[0x09][0x15]"
  $AFBB "[0x04] is[0x01][0x15]"
  $AFBF " i cannot do that"
  $AFC4 " i see nothing here"
  $AFCA " in[0x02][0x11] on[0x02][0x0d] behind[0x02][0x09] under[0x02][0x05] tied to the[0x16]"
  $AFE0 "[0x01] there[0x01][0x14]"
  $AFE4 "[0x04] is carrying[0x04][0x15]"
  $AFE9 " i cannot follow[0x07] from here[0x15]"
  $AFF1 "You are dead"
  $AFF4 "You see nothing special here"
  $AFFC "You are in[0x16]"
  $B000 "You see[0x16]"
  $B003 "You see :[0x14]"
  $B009 "You say "[0x16]"
  $B00F " ".[0x14]"
  $B013 " there is[0x00][0x14]"
  $B017 "[0x00] enter(s|d|ing|es).[0x14]"
  $B01C "[0x00] appear(s|d|ing|es)[0x15]"
  $B020 " visible exits are:[0x16]"
  $B027 " you{5} hear a noise"
  $B02D "[0x09] does not fit this lock"
  $B037 " the magic door open(s|d|ing|es).[0x14]"
  $B03F " the magic door close(s|d|ing|es).[0x14]"
  $B047 " thank you."
  $B04B " what's this ?[0x16]"
  $B052 " you are do(s|d|ing|es) a great job."
  $B05B " hurry up."
  $B05F " hello."
  $B061 " this was Thrains key."
  $B068 "[0x07] fall(s|d|ing|es) down a hole and vanish(s|d|ing|es)[0x15]"
  $B074 "You are not wearing[0x07][0x15]"
  $B07D "[0x09] is already tied[0x15]"
  $B085 " the vicious warg run around you and howls."
  $B092 "[0x07] is not tied[0x15]"
  $B099 " some spiders start mend(s|d|ing|es) the broken web"
  $B0A6 " what do you expect me to do with this ?[0x16]"
  $B0B4 " as soon as you touch the river you fall asleep and gently float away"
  $B0CB " where's the thief ?[0x16]"
  $B0D5 " get us out of this one, thief ![0x16]"
  $B0E5 " thorin sit(s|d|ing|es) down and start(s|d|ing|es) sing(s|d|ing|es) about gold."
  $B0F4 " thorin wait."
  $B0F8 "You fall asleep[0x15]"
  $B0FD " the spider web is slowly smothering you."
  $B109 " the small curious key shatter(s|d|ing|es)[0x15]"
  $B113 " an elf sweeps past"
  $B11B " you cannot reach[0x07][0x15]"
  $B121 "You are not carrying the bow"
  $B127 " the arrow misses[0x09] by a wide margin"
  $B136 " the arrow{5} hits[0x07][0x15]"
  $B13E "You are too big"
  $B142 "[0x00] evaporate(s|d|ing|es)[0x15]"
  $B146 "[0x0c] foul gluttony has{5} killed you[0x15]"
  $B153 "You are slowly sink(s|d|ing|es) into the bog"
  $B15D " the dragon say(s|d|ing|es) " Well thief your cunning has failed you this time. prepare to die " .[0x14]"
  $B17E " the dragon say(s|d|ing|es) " I may not be able to see you thief but I can still burn you. prepare to die " .[0x14]"
  $B1A6 " in the distance you see the shape of a monstrous dragon flying after you"
  $B1BA " the dragon descends and in a terrific{5} spout of flames burn(s|d|ing|es) you to a crisp[0x15]"
  $B1D0 "{5} go[0x01] from[0x00] to{5} get to[0x00][0x16]"
  $B1DB " someone strangle(s|d|ing|es) you from behind"
  $B1E3 "[0x07] says " No "[0x14]"
  $B1EE " it cannot be seen, cannot be felt[0x0d] Cannot be hear(s|d|ing|es), cannot be smelt.[0x0d] It lie(s|d|ing|es) behind star(s|d|ing|es) and under hills,[0x0d$"
  $B238 " blimey, look at this!! Can yer cook'em?[0x16]"
  $B24C " yer can try, but he wouldn't make above a mouthfull."
  $B262 " in a clearing with two stone trolls."
  $B26D "You are swept forcefully against the portcullis"
  $B277 " there is a loud crack and a hole appear(s|d|ing|es) about three feet from the ground.[0x0d] You are stand(s|d|ing|es) in front of the side door to the Lone$"
  $B2A4 " the hole vanish(s|d|ing|es)[0x15]"
  $B2AA " The magic door warn(s|d|ing|es) of elves approach(s|d|ing|es)[0x15]"
  $B2B7 " which is the animal that has four feet in the morn(s|d|ing|es), two at midday and three in the evening ?[0x16]"
  $B2D9 " what has it got in its pocket(s|d|ing|es) ?[0x16]"
  $B2E7 " my birthday present " how did we lose it.[0x0d] my precious "[0x16]"
  $B301 "You cannot jump onto[0x07] from here[0x15]"
  $B30B " day dawn(s|d|ing|es) |b"
  $B311 "You see some pale bulbous eyes star(s|d|ing|es) at You[0x15]"
  $B31F " some thing drop(s|d|ing|es) from above and sting(s|d|ing|es)[0x15]"
  $B32C " you are thrown onto the bank of the long lake"
  $B33B "     {6} nothing"
  $B342 "start tape then press any key"
  $B357 "tape error -     hit any key to restart program[0x15]"
  $B381 "tape error -     hit any key to continue[0x15]"
  $B3A4 "rewind and prepare tape for     verification  -- then hit any key"
  $B3D9 "[0x0d][0x0d][0x0d] a cheering crowd of dwarves, hobbits and elves appear(s|d|ing|es). led by gandalf they carry you off into the sunset, proclaiming you  he$"
  $B454 " you have mastered [0x16]"
  $B462 "% of this adventure"
  $B467 " you're doing fine[0x15]"

  $B47A " a trolls door needs a trolls key"
N $B47A Location Help Messages
  $B48A " elves are good at reading symbols"
  $B49A " a window should be no obstacle to a thief with friends[0x15]"
  $B4BE " boats can help. Look carefully"
  $B4CA " wait around and time your exit carefully"
  $B4DA " timing is critical, remember barrels float"
  $B4FA " wait a while[0x15]"
  $B504 " take care to leave at the right time"
  $B518 " a living dragon is deadly, look to bard"
  $B52F " don't stay here too long"
  $B53E " wait for the new day dawning[0x15]"

  $B552 " there{5} seem to be some symbols on it but you cannot read them"

N $B563 Locations
  $B563 " you see a fast flowing black river not very wide across"
  $B575 " a comfortable tunnel like hall."
  $B57E " a gloomy empty land with dreary hills ahead."
  $B58C " a hidden path with trolls foot prints[0x16]"
  $B59A " the trolls cave."
  $B59F " a hard dangerous path in the misty mountains."
  $B5AC " a narrow{5} place with a dreadful drop into a dim valley."
  $B5BE " a narrow dangerous path."
  $B5C5 " a large dry cave which is quite comfortable."
  $B5D3 " a big cavern with torches along the walls[0x16]"
  $B5E4 " the brink of a deep dark under ground lake."
  $B5F3 " the goblins gate."
  $B5F8 " the gate to mirkwood."
  $B5FE " a bewitched gloomy place surrounded by thick tree(s|d|ing|es) |b."
  $B60F " a place of black spiders[0x16]"
  $B619 " a forest of tangled smothering tree(s|d|ing|es)[0x16]"
  $B624 " an elvish clearing with levelled ground and logs."
  $B632 " a dark dungeon in the elvenkings halls."
  $B63D " the cellar where the king keeps his barrels of wine."
  $B64F " a wooden town in the middle of long lake."
  $B65D " a strong river: the current is now too strong to move against."
  $B671 " a bleak barren land that was once green."
  $B680 " the ruins of the town of dale."
  $B68A " the front gate of the lonely mountain."
  $B695 " the west side of ravenhill."
  $B69D " the halls where the dragon sleep(s|d|ing|es)[0x16]"
  $B6A7 " a little steep bay, still and quiet, with an over hanging cliff."
  $B6BE " a smooth straight passage."
  $B6C5 " the lonely mountain."
  $B6CA " the west[0x02][0x04] the east bank of a black river."

b $B6DA
W $B6DA,$02
W $B6DC,$02
  $B6DE,$01
  $B6DF,$01
  $B6E0,$06
  $B6E6,$01
@ $B6E7 label=CurrentAction
  $B6E7,$01
@ $B6E8 label=CurrentObject
  $B6E8,$01
  $B6E9,$01
@ $B6EA label=CurrentCharacter
  $B6EA,$01
  $B6EB,$03
W $B6EE,$02
  $B6F0,$01
  $B6F1,$01
  $B6F2,$01
  $B6F3,$01
  $B6F4,$01
  $B6F5,$01
  $B6F6,$01
@ $B6F7 label=PercentageComplete
W $B6F7,$02
  $B6F9,$01
  $B6FA,$01
  $B6FB,$01
W $B6FC,$02
  $B6FE,$01
  $B6FF,$01
  $B700,$01
@ $B701 label=WaitCoutdown
  $B701,$01 1=action countdown, 0=countdown finished.
@ $B702 label=NightDay
  $B702,$01 0=night, 1=day.
  $B703,$01
  $B704,$01
  $B705,$01
  $B706,$01
  $B707,$01
  $B708,$02
W $B70A,$02
@ $B70C label=ptrCurObject
W $B70C,$02
@ $B70E label=RandomSeed
  $B70E,$01
  $B70F,$01
  $B710,$01
  $B711,$01
@ $B712 label=RandomCounter
W $B712,$02
W $B714,$02
  $B716,$01
W $B717,$02
  $B719,$01
  $B71A,$01
  $B71B,$01
  $B71C,$01
  $B71D,$01
W $B71E,$1A
  $B738,$01

b $B9C8

w $B9E0 Location Table
@ $B9E0 label=LocationTable
  $B9E0,$02 #N(#EVAL((#PC - $B9E0) / 2), 2, 3, 1, 1)($) - "#LOCATIONNAME(#EVAL((#PC - $B9E0) / 2))".
L $B9E0,$02,$50

b $BA80 Location Prepositions
D $BA80 Used by the routine at #R$962B.
N $BA80 These are written directly to #R$AFFC($AFFD) which updates the copy for: "You are XXXX[0x16]".
  $BA80,$02 "OUTSIDE"
  $BA82,$02 "INSIDE"
  $BA84,$02 "IN"
  $BA86,$02 "ON"
  $BA88,$02 "AT"

b $BA8A Locations
@ $BA8A label=Locations
  $BA8A,$0D 00:  : ''
N $BA97 Location $01 - "#TEXTTOKEN(#PC + $02, $01)"
  $BA97,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BA98,$01 LOCATION_PROP_VOLUME
  $BA99,$06,$02 #TEXTTOKEN(#PC)
W $BA9F,$02 comfortable tunnel like hall
  $BAA1,$03 #MOVEMENT(#PC)
  $BAA4,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BAA5 Location $04 - "#TEXTTOKEN(#PC + $02, $01)"
  $BAA5,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BAA6,$01 LOCATION_PROP_VOLUME
  $BAA7,$06,$02 #TEXTTOKEN(#PC)
W $BAAD,$02 gloomy empty land dreary hills ahead
  $BAAF,$03 #MOVEMENT(#PC)
L $BAAF,$03,$04
  $BABB,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BABC Location $05 - "#TEXTTOKEN(#PC + $02, $01)"
  $BABC,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BABD,$01 LOCATION_PROP_VOLUME
  $BABE,$06,$02 #TEXTTOKEN(#PC)
W $BAC4,$02 ---
  $BAC6,$03 #MOVEMENT(#PC)
L $BAC6,$03,$03
  $BACF,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BAD0 Location $06 - "#TEXTTOKEN(#PC + $02, $01)"
  $BAD0,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BAD1,$01 LOCATION_PROP_VOLUME
  $BAD2,$06,$02 #TEXTTOKEN(#PC)
W $BAD8,$02 hidden path trolls foot print S [16]
  $BADA,$03 #MOVEMENT(#PC)
L $BADA,$03,$02
  $BAE0,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BAE1 Location $07 - "#TEXTTOKEN(#PC + $02, $01)"
  $BAE1,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BAE2,$01 LOCATION_PROP_VOLUME
  $BAE3,$06,$02 #TEXTTOKEN(#PC)
W $BAE9,$02 trolls cave
  $BAEB,$03 #MOVEMENT(#PC)
  $BAEE,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BAEF Location $09 - "#TEXTTOKEN(#PC + $02, $01)"
  $BAEF,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BAF0,$01 LOCATION_PROP_VOLUME
  $BAF1,$06,$02 #TEXTTOKEN(#PC)
W $BAF7,$02 ---
  $BAF9,$03 #MOVEMENT(#PC)
L $BAF9,$03,$02
  $BAFF,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BB00 Location $0A - "#TEXTTOKEN(#PC + $02, $01)"
  $BB00,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BB01,$01 LOCATION_PROP_VOLUME
  $BB02,$06,$02 #TEXTTOKEN(#PC)
W $BB08,$02 hard dangerous path misty mountains
  $BB0A,$03 #MOVEMENT(#PC)
L $BB0A,$03,$04
  $BB16,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BB17 Location $0B - "#TEXTTOKEN(#PC + $02, $01)"
  $BB17,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BB18,$01 LOCATION_PROP_VOLUME
  $BB19,$06,$02 #TEXTTOKEN(#PC)
W $BB1F,$02 narrow place dreadful drop into dim valley
  $BB21,$03 #MOVEMENT(#PC)
L $BB21,$03,$03
  $BB2A,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BB2B Location $0C - "#TEXTTOKEN(#PC + $02, $01)"
  $BB2B,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BB2C,$01 LOCATION_PROP_VOLUME
  $BB2D,$06,$02 #TEXTTOKEN(#PC)
W $BB33,$02 narrow dangerous path
  $BB35,$03 #MOVEMENT(#PC)
L $BB35,$03,$02
  $BB3B,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BB3C Location $0E - "#TEXTTOKEN(#PC + $02, $01)"
  $BB3C,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BB3D,$01 LOCATION_PROP_VOLUME
  $BB3E,$06,$02 #TEXTTOKEN(#PC)
W $BB44,$02 large dry cave which climb quite comfortable
  $BB46,$03 #MOVEMENT(#PC)
L $BB46,$03,$02
  $BB4C,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BB4D Location $0F - "#TEXTTOKEN(#PC + $02, $01)"
  $BB4D,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BB4E,$01 LOCATION_PROP_VOLUME
  $BB4F,$06,$02 #TEXTTOKEN(#PC)
W $BB55,$02 ---
  $BB57,$03 #MOVEMENT(#PC)
L $BB57,$03,$03
  $BB60,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BB61 Location $34 - "#TEXTTOKEN(#PC + $02, $01)"
  $BB61,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BB62,$01 LOCATION_PROP_VOLUME
  $BB63,$06,$02 #TEXTTOKEN(#PC)
W $BB69,$02 ---
  $BB6B,$03 #MOVEMENT(#PC)
L $BB6B,$03,$03
  $BB74,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BB75 Location $35 - "#TEXTTOKEN(#PC + $02, $01)"
  $BB75,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BB76,$01 LOCATION_PROP_VOLUME
  $BB77,$06,$02 #TEXTTOKEN(#PC)
W $BB7D,$02 ---
  $BB7F,$03 #MOVEMENT(#PC)
  $BB82,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BB83 Location $36 - "#TEXTTOKEN(#PC + $02, $01)"
  $BB83,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BB84,$01 LOCATION_PROP_VOLUME
  $BB85,$06,$02 #TEXTTOKEN(#PC)
W $BB8B,$02 ---
  $BB8D,$03 #MOVEMENT(#PC)
L $BB8D,$03,$04
  $BB99,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BB9A Location $37 - "#TEXTTOKEN(#PC + $02, $01)"
  $BB9A,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BB9B,$01 LOCATION_PROP_VOLUME
  $BB9C,$06,$02 #TEXTTOKEN(#PC)
W $BBA2,$02 ---
  $BBA4,$03 #MOVEMENT(#PC)
L $BBA4,$03,$04
  $BBB0,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BBB1 Location $38 - "#TEXTTOKEN(#PC + $02, $01)"
  $BBB1,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BBB2,$01 LOCATION_PROP_VOLUME
  $BBB3,$06,$02 #TEXTTOKEN(#PC)
W $BBB9,$02 ---
  $BBBB,$03 #MOVEMENT(#PC)
  $BBBE,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BBBF Location $39 - "#TEXTTOKEN(#PC + $02, $01)"
  $BBBF,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BBC0,$01 LOCATION_PROP_VOLUME
  $BBC1,$06,$02 #TEXTTOKEN(#PC)
W $BBC7,$02 ---
  $BBC9,$03 #MOVEMENT(#PC)
L $BBC9,$03,$03
  $BBD2,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BBD3 Location $3A - "#TEXTTOKEN(#PC + $02, $01)"
  $BBD3,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BBD4,$01 LOCATION_PROP_VOLUME
  $BBD5,$06,$02 #TEXTTOKEN(#PC)
W $BBDB,$02 ---
  $BBDD,$03 #MOVEMENT(#PC)
L $BBDD,$03,$04
  $BBE9,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BBEA Location $3B - "#TEXTTOKEN(#PC + $02, $01)"
  $BBEA,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BBEB,$01 LOCATION_PROP_VOLUME
  $BBEC,$06,$02 #TEXTTOKEN(#PC)
W $BBF2,$02 ---
  $BBF4,$03 #MOVEMENT(#PC)
L $BBF4,$03,$02
  $BBFA,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BBFB Location $3C - "#TEXTTOKEN(#PC + $02, $01)"
  $BBFB,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BBFC,$01 LOCATION_PROP_VOLUME
  $BBFD,$06,$02 #TEXTTOKEN(#PC)
W $BC03,$02 ---
  $BC05,$03 #MOVEMENT(#PC)
L $BC05,$03,$03
  $BC0E,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BC0F Location $3D - "#TEXTTOKEN(#PC + $02, $01)"
  $BC0F,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BC10,$01 LOCATION_PROP_VOLUME
  $BC11,$06,$02 #TEXTTOKEN(#PC)
W $BC17,$02 ---
  $BC19,$03 #MOVEMENT(#PC)
L $BC19,$03,$02
  $BC1F,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BC20 Location $3E - "#TEXTTOKEN(#PC + $02, $01)"
  $BC20,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BC21,$01 LOCATION_PROP_VOLUME
  $BC22,$06,$02 #TEXTTOKEN(#PC)
W $BC28,$02 ---
  $BC2A,$03 #MOVEMENT(#PC)
  $BC2D,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BC2E Location $3F - "#TEXTTOKEN(#PC + $02, $01)"
  $BC2E,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BC2F,$01 LOCATION_PROP_VOLUME
  $BC30,$06,$02 #TEXTTOKEN(#PC)
W $BC36,$02 ---
  $BC38,$03 #MOVEMENT(#PC)
L $BC38,$03,$03
  $BC41,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BC42 Location $40 - "#TEXTTOKEN(#PC + $02, $01)"
  $BC42,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BC43,$01 LOCATION_PROP_VOLUME
  $BC44,$06,$02 #TEXTTOKEN(#PC)
W $BC4A,$02 ---
  $BC4C,$03 #MOVEMENT(#PC)
L $BC4C,$03,$03
  $BC55,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BC56 Location $41 - "#TEXTTOKEN(#PC + $02, $01)"
  $BC56,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BC57,$01 LOCATION_PROP_VOLUME
  $BC58,$06,$02 #TEXTTOKEN(#PC)
W $BC5E,$02 ---
  $BC60,$03 #MOVEMENT(#PC)
L $BC60,$03,$03
  $BC69,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BC6A Location $10 - "#TEXTTOKEN(#PC + $02, $01)"
  $BC6A,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BC6B,$01 LOCATION_PROP_VOLUME
  $BC6C,$06,$02 #TEXTTOKEN(#PC)
W $BC72,$02 big cavern torch ESalong wall S [16]
  $BC74,$03 #MOVEMENT(#PC)
L $BC74,$03,$03
  $BC7D,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BC7E Location $11 - "#TEXTTOKEN(#PC + $02, $01)"
  $BC7E,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BC7F,$01 LOCATION_PROP_VOLUME
  $BC80,$06,$02 #TEXTTOKEN(#PC)
W $BC86,$02 brink deep dark under ground lake
  $BC88,$03 #MOVEMENT(#PC)
  $BC8B,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BC8C Location $12 - "#TEXTTOKEN(#PC + $02, $01)"
  $BC8C,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BC8D,$01 LOCATION_PROP_VOLUME
  $BC8E,$06,$02 #TEXTTOKEN(#PC)
W $BC94,$02 ---
  $BC96,$03 #MOVEMENT(#PC)
L $BC96,$03,$03
  $BC9F,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BCA0 Location $13 - "#TEXTTOKEN(#PC + $02, $01)"
  $BCA0,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BCA1,$01 LOCATION_PROP_VOLUME
  $BCA2,$06,$02 #TEXTTOKEN(#PC)
W $BCA8,$02 goblins gate
  $BCAA,$03 #MOVEMENT(#PC)
L $BCAA,$03,$0A
  $BCC8,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BCC9 Location $14 - "#TEXTTOKEN(#PC + $02, $01)"
  $BCC9,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BCCA,$01 LOCATION_PROP_VOLUME
  $BCCB,$06,$02 #TEXTTOKEN(#PC)
W $BCD1,$02 goblins gate
  $BCD3,$03 #MOVEMENT(#PC)
L $BCD3,$03,$02
  $BCD9,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BCDA Location $0D - "#TEXTTOKEN(#PC + $02, $01)"
  $BCDA,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BCDB,$01 LOCATION_PROP_VOLUME
  $BCDC,$06,$02 #TEXTTOKEN(#PC)
W $BCE2,$02 ---
  $BCE4,$03 #MOVEMENT(#PC)
L $BCE4,$03,$02
  $BCEA,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BCEB Location $15 - "#TEXTTOKEN(#PC + $02, $01)"
  $BCEB,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BCEC,$01 LOCATION_PROP_VOLUME
  $BCED,$06,$02 #TEXTTOKEN(#PC)
W $BCF3,$02 ---
  $BCF5,$03 #MOVEMENT(#PC)
L $BCF5,$03,$02
  $BCFB,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BCFC Location $16 - "#TEXTTOKEN(#PC + $02, $01)"
  $BCFC,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BCFD,$01 LOCATION_PROP_VOLUME
  $BCFE,$06,$02 #TEXTTOKEN(#PC)
W $BD04,$02 ---
  $BD06,$03 #MOVEMENT(#PC)
L $BD06,$03,$05
  $BD15,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BD16 Location $18 - "#TEXTTOKEN(#PC + $02, $01)"
  $BD16,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BD17,$01 LOCATION_PROP_VOLUME
  $BD18,$06,$02 #TEXTTOKEN(#PC)
W $BD1E,$02 gate mirkwood
  $BD20,$03 #MOVEMENT(#PC)
L $BD20,$03,$03
  $BD29,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BD2A Location $19 - "#TEXTTOKEN(#PC + $02, $01)"
  $BD2A,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BD2B,$01 LOCATION_PROP_VOLUME
  $BD2C,$06,$02 #TEXTTOKEN(#PC)
W $BD32,$02 ---
  $BD34,$03 #MOVEMENT(#PC)
L $BD34,$03,$03
  $BD3D,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BD3E Location $1A - "#TEXTTOKEN(#PC + $02, $01)"
  $BD3E,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BD3F,$01 LOCATION_PROP_VOLUME
  $BD40,$06,$02 #TEXTTOKEN(#PC)
W $BD46,$02 place black spider S [16]
  $BD48,$03 #MOVEMENT(#PC)
L $BD48,$03,$04
  $BD54,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BD55 Location $1B - "#TEXTTOKEN(#PC + $02, $01)"
  $BD55,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BD56,$01 LOCATION_PROP_VOLUME
  $BD57,$06,$02 #TEXTTOKEN(#PC)
W $BD5D,$02 forest tangled smothering /3.Person/trees  [16]
  $BD5F,$03 #MOVEMENT(#PC)
L $BD5F,$03,$02
  $BD65,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BD66 Location $1C - "#TEXTTOKEN(#PC + $02, $01)"
  $BD66,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BD67,$01 LOCATION_PROP_VOLUME
  $BD68,$06,$02 #TEXTTOKEN(#PC)
W $BD6E,$02 elvish clearing levelled ground untie logs
  $BD70,$03 #MOVEMENT(#PC)
L $BD70,$03,$03
  $BD79,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BD7A Location $1D - "#TEXTTOKEN(#PC + $02, $01)"
  $BD7A,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BD7B,$01 LOCATION_PROP_VOLUME
  $BD7C,$06,$02 #TEXTTOKEN(#PC)
W $BD82,$02 ---
  $BD84,$03 #MOVEMENT(#PC)
  $BD87,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BD88 Location $1E - "#TEXTTOKEN(#PC + $02, $01)"
  $BD88,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BD89,$01 LOCATION_PROP_VOLUME
  $BD8A,$06,$02 #TEXTTOKEN(#PC)
W $BD90,$02 ---
  $BD92,$03 #MOVEMENT(#PC)
L $BD92,$03,$03
  $BD9B,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BD9C Location $1F - "#TEXTTOKEN(#PC + $02, $01)"
  $BD9C,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BD9D,$01 LOCATION_PROP_VOLUME
  $BD9E,$06,$02 #TEXTTOKEN(#PC)
W $BDA4,$02 dark dungeon elvenkings halls
  $BDA6,$03 #MOVEMENT(#PC)
L $BDA6,$03,$02
  $BDAC,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BDAD Location $20 - "#TEXTTOKEN(#PC + $02, $01)"
  $BDAD,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BDAE,$01 LOCATION_PROP_VOLUME
  $BDAF,$06,$02 #TEXTTOKEN(#PC)
W $BDB5,$02 cellar where king keeps his barrel Swine
  $BDB7,$03 #MOVEMENT(#PC)
L $BDB7,$03,$03
  $BDC0,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BDC1 Location $21 - "#TEXTTOKEN(#PC + $02, $01)"
  $BDC1,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BDC2,$01 LOCATION_PROP_VOLUME
  $BDC3,$06,$02 #TEXTTOKEN(#PC)
W $BDC9,$02 ---
  $BDCB,$03 #MOVEMENT(#PC)
L $BDCB,$03,$03
  $BDD4,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BDD5 Location $22 - "#TEXTTOKEN(#PC + $02, $01)"
  $BDD5,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BDD6,$01 LOCATION_PROP_VOLUME
  $BDD7,$06,$02 #TEXTTOKEN(#PC)
W $BDDD,$02 ---
  $BDDF,$03 #MOVEMENT(#PC)
L $BDDF,$03,$04
  $BDEB,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BDEC Location $23 - "#TEXTTOKEN(#PC + $02, $01)"
  $BDEC,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BDED,$01 LOCATION_PROP_VOLUME
  $BDEE,$06,$02 #TEXTTOKEN(#PC)
W $BDF4,$02 wooden town middle long lake
  $BDF6,$03 #MOVEMENT(#PC)
L $BDF6,$03,$04
  $BE02,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BE03 Location $24 - "#TEXTTOKEN(#PC + $02, $01)"
  $BE03,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BE04,$01 LOCATION_PROP_VOLUME
  $BE05,$06,$02 #TEXTTOKEN(#PC)
W $BE0B,$02 strong river :current climb now strong move against
  $BE0D,$03 #MOVEMENT(#PC)
L $BE0D,$03,$02
  $BE13,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BE14 Location $25 - "#TEXTTOKEN(#PC + $02, $01)"
  $BE14,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BE15,$01 LOCATION_PROP_VOLUME
  $BE16,$06,$02 #TEXTTOKEN(#PC)
W $BE1C,$02 bleak barren land that was once green
  $BE1E,$03 #MOVEMENT(#PC)
L $BE1E,$03,$02
  $BE24,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BE25 Location $26 - "#TEXTTOKEN(#PC + $02, $01)"
  $BE25,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BE26,$01 LOCATION_PROP_VOLUME
  $BE27,$06,$02 #TEXTTOKEN(#PC)
W $BE2D,$02 ruins town dale
  $BE2F,$03 #MOVEMENT(#PC)
L $BE2F,$03,$03
  $BE38,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BE39 Location $27 - "#TEXTTOKEN(#PC + $02, $01)"
  $BE39,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BE3A,$01 LOCATION_PROP_VOLUME
  $BE3B,$06,$02 #TEXTTOKEN(#PC)
W $BE41,$02 front gate lonely mountain
  $BE43,$03 #MOVEMENT(#PC)
L $BE43,$03,$03
  $BE4C,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BE4D Location $28 - "#TEXTTOKEN(#PC + $02, $01)"
  $BE4D,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BE4E,$01 LOCATION_PROP_VOLUME
  $BE4F,$06,$02 #TEXTTOKEN(#PC)
W $BE55,$02 west side ravenhill
  $BE57,$03 #MOVEMENT(#PC)
L $BE57,$03,$03
  $BE60,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BE61 Location $29 - "#TEXTTOKEN(#PC + $02, $01)"
  $BE61,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BE62,$01 LOCATION_PROP_VOLUME
  $BE63,$06,$02 #TEXTTOKEN(#PC)
W $BE69,$02 halls where /3.Person/sleeps  [16]
  $BE6B,$03 #MOVEMENT(#PC)
L $BE6B,$03,$03
  $BE74,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BE75 Location $2A - "#TEXTTOKEN(#PC + $02, $01)"
  $BE75,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BE76,$01 LOCATION_PROP_VOLUME
  $BE77,$06,$02 #TEXTTOKEN(#PC)
W $BE7D,$02 little steep bay ,still untie quiet ,an over hanging cliff
  $BE7F,$03 #MOVEMENT(#PC)
L $BE7F,$03,$03
  $BE88,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BE89 Location $2B - "#TEXTTOKEN(#PC + $02, $01)"
  $BE89,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BE8A,$01 LOCATION_PROP_VOLUME
  $BE8B,$06,$02 #TEXTTOKEN(#PC)
W $BE91,$02 smooth straight passage
  $BE93,$03 #MOVEMENT(#PC)
L $BE93,$03,$02
  $BE99,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BE9A Location $2C - "#TEXTTOKEN(#PC + $02, $01)"
  $BE9A,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BE9B,$01 LOCATION_PROP_VOLUME
  $BE9C,$06,$02 #TEXTTOKEN(#PC)
W $BEA2,$02 lonely mountain
  $BEA4,$03 #MOVEMENT(#PC)
L $BEA4,$03,$04
  $BEB0,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BEB1 Location $2E - "#TEXTTOKEN(#PC + $02, $01)"
  $BEB1,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BEB2,$01 LOCATION_PROP_VOLUME
  $BEB3,$06,$02 #TEXTTOKEN(#PC)
W $BEB9,$02 ---
  $BEBB,$03 #MOVEMENT(#PC)
L $BEBB,$03,$02
  $BEC1,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BEC2 Location $2D - "#TEXTTOKEN(#PC + $02, $01)"
  $BEC2,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BEC3,$01 LOCATION_PROP_VOLUME
  $BEC4,$06,$02 #TEXTTOKEN(#PC)
W $BECA,$02 ---
  $BECC,$03 #MOVEMENT(#PC)
L $BECC,$03,$02
  $BED2,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BED3 Location $02 - "#TEXTTOKEN(#PC + $02, $01)"
  $BED3,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BED4,$01 LOCATION_PROP_VOLUME
  $BED5,$06,$02 #TEXTTOKEN(#PC)
W $BEDB,$02 ---
  $BEDD,$03 #MOVEMENT(#PC)
L $BEDD,$03,$02
  $BEE3,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BEE4 Location $03 - "#TEXTTOKEN(#PC + $02, $01)"
  $BEE4,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BEE5,$01 LOCATION_PROP_VOLUME
  $BEE6,$06,$02 #TEXTTOKEN(#PC)
W $BEEC,$02 ---
  $BEEE,$03 #MOVEMENT(#PC)
L $BEEE,$03,$02
  $BEF4,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BEF5 Location $08 - "#TEXTTOKEN(#PC + $02, $01)"
  $BEF5,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BEF6,$01 LOCATION_PROP_VOLUME
  $BEF7,$06,$02 #TEXTTOKEN(#PC)
W $BEFD,$02 ---
  $BEFF,$03 #MOVEMENT(#PC)
L $BEFF,$03,$02
  $BF05,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BF06 Location $17 - "#TEXTTOKEN(#PC + $02, $01)"
  $BF06,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BF07,$01 LOCATION_PROP_VOLUME
  $BF08,$06,$02 #TEXTTOKEN(#PC)
W $BF0E,$02 ---
  $BF10,$03 #MOVEMENT(#PC)
L $BF10,$03,$02
  $BF16,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BF17 Location $30 - "#TEXTTOKEN(#PC + $02, $01)"
  $BF17,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BF18,$01 LOCATION_PROP_VOLUME
  $BF19,$06,$02 #TEXTTOKEN(#PC)
W $BF1F,$02 ---
  $BF21,$03 #MOVEMENT(#PC)
L $BF21,$03,$03
  $BF2A,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BF2B Location $31 - "#TEXTTOKEN(#PC + $02, $01)"
  $BF2B,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BF2C,$01 LOCATION_PROP_VOLUME
  $BF2D,$06,$02 #TEXTTOKEN(#PC)
W $BF33,$02 ---
  $BF35,$03 #MOVEMENT(#PC)
L $BF35,$03,$04
  $BF41,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BF42 Location $2F - "#TEXTTOKEN(#PC + $02, $01)"
  $BF42,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BF43,$01 LOCATION_PROP_VOLUME
  $BF44,$06,$02 #TEXTTOKEN(#PC)
W $BF4A,$02 ---
  $BF4C,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BF4D Location $32 - "#TEXTTOKEN(#PC + $02, $01)"
  $BF4D,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BF4E,$01 LOCATION_PROP_VOLUME
  $BF4F,$06,$02 #TEXTTOKEN(#PC)
W $BF55,$02 ---
  $BF57,$03 #MOVEMENT(#PC)
L $BF57,$03,$02
  $BF5D,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BF5E Location $33 - "#TEXTTOKEN(#PC + $02, $01)"
  $BF5E,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BF5F,$01 LOCATION_PROP_VOLUME
  $BF60,$06,$02 #TEXTTOKEN(#PC)
W $BF66,$02 ---
  $BF68,$03 #MOVEMENT(#PC)
L $BF68,$03,$03
  $BF71,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BF72 Location $42 - "#TEXTTOKEN(#PC + $02, $01)"
  $BF72,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BF73,$01 LOCATION_PROP_VOLUME
  $BF74,$06,$02 #TEXTTOKEN(#PC)
W $BF7A,$02 west  [02] [04]east bank black river
  $BF7C,$03 #MOVEMENT(#PC)
L $BF7C,$03,$02
  $BF82,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BF83 Location $43 - "#TEXTTOKEN(#PC + $02, $01)"
  $BF83,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BF84,$01 LOCATION_PROP_VOLUME
  $BF85,$06,$02 #TEXTTOKEN(#PC)
W $BF8B,$02 east bank black river
  $BF8D,$03 #MOVEMENT(#PC)
L $BF8D,$03,$02
  $BF93,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BF94 Location $44 - "#TEXTTOKEN(#PC + $02, $01)"
  $BF94,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BF95,$01 LOCATION_PROP_VOLUME
  $BF96,$06,$02 #TEXTTOKEN(#PC)
W $BF9C,$02 ---
  $BF9E,$03 #MOVEMENT(#PC)
L $BF9E,$03,$03
  $BFA7,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BFA8 Location $45 - "#TEXTTOKEN(#PC + $02, $01)"
  $BFA8,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BFA9,$01 LOCATION_PROP_VOLUME
  $BFAA,$06,$02 #TEXTTOKEN(#PC)
W $BFB0,$02 ---
  $BFB2,$03 #MOVEMENT(#PC)
L $BFB2,$03,$03
  $BFBB,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BFBC Location $46 - "#TEXTTOKEN(#PC + $02, $01)"
  $BFBC,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BFBD,$01 LOCATION_PROP_VOLUME
  $BFBE,$06,$02 #TEXTTOKEN(#PC)
W $BFC4,$02 ---
  $BFC6,$03 #MOVEMENT(#PC)
L $BFC6,$03,$02
  $BFCC,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BFCD Location $47 - "#TEXTTOKEN(#PC + $02, $01)"
  $BFCD,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BFCE,$01 LOCATION_PROP_VOLUME
  $BFCF,$06,$02 #TEXTTOKEN(#PC)
W $BFD5,$02 ---
  $BFD7,$03 #MOVEMENT(#PC)
L $BFD7,$03,$03
  $BFE0,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BFE1 Location $48 - "#TEXTTOKEN(#PC + $02, $01)"
  $BFE1,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BFE2,$01 LOCATION_PROP_VOLUME
  $BFE3,$06,$02 #TEXTTOKEN(#PC)
W $BFE9,$02 ---
  $BFEB,$03 #MOVEMENT(#PC)
L $BFEB,$03,$03
  $BFF4,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $BFF5 Location $49 - "#TEXTTOKEN(#PC + $02, $01)"
  $BFF5,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $BFF6,$01 LOCATION_PROP_VOLUME
  $BFF7,$06,$02 #TEXTTOKEN(#PC)
W $BFFD,$02 ---
  $BFFF,$03 #MOVEMENT(#PC)
L $BFFF,$03,$02
  $C005,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C006 Location $4A - "#TEXTTOKEN(#PC + $02, $01)"
  $C006,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $C007,$01 LOCATION_PROP_VOLUME
  $C008,$06,$02 #TEXTTOKEN(#PC)
W $C00E,$02 ---
  $C010,$03 #MOVEMENT(#PC)
L $C010,$03,$02
  $C016,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C017 Location $4B - "#TEXTTOKEN(#PC + $02, $01)"
  $C017,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $C018,$01 LOCATION_PROP_VOLUME
  $C019,$06,$02 #TEXTTOKEN(#PC)
W $C01F,$02 ---
  $C021,$03 #MOVEMENT(#PC)
  $C024,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C025 Location $4C - "#TEXTTOKEN(#PC + $02, $01)"
  $C025,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $C026,$01 LOCATION_PROP_VOLUME
  $C027,$06,$02 #TEXTTOKEN(#PC)
W $C02D,$02 ---
  $C02F,$03 #MOVEMENT(#PC)
  $C032,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C033 Location $4D - "#TEXTTOKEN(#PC + $02, $01)"
  $C033,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $C034,$01 LOCATION_PROP_VOLUME
  $C035,$06,$02 #TEXTTOKEN(#PC)
W $C03B,$02 ---
  $C03D,$03 #MOVEMENT(#PC)
  $C040,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C041 Location $4E - "#TEXTTOKEN(#PC + $02, $01)"
  $C041,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $C042,$01 LOCATION_PROP_VOLUME
  $C043,$06,$02 #TEXTTOKEN(#PC)
W $C049,$02 ---
  $C04B,$03 #MOVEMENT(#PC)
L $C04B,$03,$02
  $C051,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C052 Location $4F - "#TEXTTOKEN(#PC + $02, $01)"
  $C052,b$01 #LOCATIONATTRIBUTE(#PEEK(#PC))
  $C053,$01 LOCATION_PROP_VOLUME
  $C054,$06,$02 #TEXTTOKEN(#PC)
W $C05A,$02 ---
  $C05C,$03 #MOVEMENT(#PC)
L $C05C,$03,$02
  $C062,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).

b $C063 Object Table
@ $C063 label=ObjectTable
N $C063 Object ID #OBJECT(#PEEK(#PC), 1, 1)($).
  $C063,$01 Object ID.
W $C064,$02 Object address.
L $C063,$03,$3D
N $C11A End of table.
  $C11A,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).

b $C11B Objects
@ $C11B label=Objects
N $C11B Object $00 - "#TEXTTOKEN(#PC + $08, 1)"
  $C11B,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C11C,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C11D,$01 Volume (?)
  $C11E,$01 Mass (?)
  $C11F,$01
  $C120,$01 Strength (?)
  $C121,$01
  $C122,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C123,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C129,$02 Help Message (none).
  $C12B,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C12C,$06
  $C132,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C133 Object $3C - "#TEXTTOKEN(#PC + $08, 1)"
  $C133,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C134,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C135,$01 Volume (?)
  $C136,$01 Mass (?)
  $C137,$01
  $C138,$01 Strength (?)
  $C139,$01
  $C13A,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C13B,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C141,$02 Help Message (none).
  $C143,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C144,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C145 Object $05 - "#TEXTTOKEN(#PC + $08, 1)"
  $C145,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C146,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C147,$01 Volume (?)
  $C148,$01 Mass (?)
  $C149,$01
  $C14A,$01 Strength (?)
  $C14B,$01
  $C14C,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C14D,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C153,$02 Help Message (none).
  $C155,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C156,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C157,$18,$06
  $C16F,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C170 Object $01 - "#TEXTTOKEN(#PC + $08, 1)"
  $C170,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C171,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C172,$01 Volume (?)
  $C173,$01 Mass (?)
  $C174,$01
  $C175,$01 Strength (?)
  $C176,$01
  $C177,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C178,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C17E,$02 Help Message (none).
  $C180,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C181,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C182,$18,$06
  $C19A,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C19B Object $2B - "#TEXTTOKEN(#PC + $08, 1)"
  $C19B,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C19C,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C19D,$01 Volume (?)
  $C19E,$01 Mass (?)
  $C19F,$01
  $C1A0,$01 Strength (?)
  $C1A1,$01
  $C1A2,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C1A3,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C1A9,$02 Help Message (none).
  $C1AB,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C1AC,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C1AD Object $02 - "#TEXTTOKEN(#PC + $08, 1)"
  $C1AD,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C1AE,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C1AF,$01 Volume (?)
  $C1B0,$01 Mass (?)
  $C1B1,$01
  $C1B2,$01 Strength (?)
  $C1B3,$01
  $C1B4,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C1B5,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C1BB,$02 Help Message (none).
  $C1BD,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C1BE,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C1BF Object $04 - "#TEXTTOKEN(#PC + $08, 1)"
  $C1BF,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C1C0,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C1C1,$01 Volume (?)
  $C1C2,$01 Mass (?)
  $C1C3,$01
  $C1C4,$01 Strength (?)
  $C1C5,$01
  $C1C6,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C1C7,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C1CD,$02 Help Message (none).
  $C1CF,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C1D0,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C1D1 Object $03 - "#TEXTTOKEN(#PC + $08, 1)"
  $C1D1,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C1D2,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C1D3,$01 Volume (?)
  $C1D4,$01 Mass (?)
  $C1D5,$01
  $C1D6,$01 Strength (?)
  $C1D7,$01
  $C1D8,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C1D9,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C1DF,$02 Help Message (#R(#EVAL(#PEEK(#PC)+#PEEK(#PC+1)*256))).
  $C1E1,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C1E5,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C1E6 Object $06 - "#TEXTTOKEN(#PC + $08, 1)"
  $C1E6,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C1E7,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C1E8,$01 Volume (?)
  $C1E9,$01 Mass (?)
  $C1EA,$01
  $C1EB,$01 Strength (?)
  $C1EC,$01
  $C1ED,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C1EE,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C1F4,$02 Help Message (none).
  $C1F6,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C1F7,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C204,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C205 Object $07 - "#TEXTTOKEN(#PC + $08, 1)"
  $C205,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C206,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C207,$01 Volume (?)
  $C208,$01 Mass (?)
  $C209,$01
  $C20A,$01 Strength (?)
  $C20B,$01
  $C20C,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C20D,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C213,$02 Help Message (none).
  $C215,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C216,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C217,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C218,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C219,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C223,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C224 Object $08 - "#TEXTTOKEN(#PC + $08, 1)"
  $C224,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C225,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C226,$01 Volume (?)
  $C227,$01 Mass (?)
  $C228,$01
  $C229,$01 Strength (?)
  $C22A,$01
  $C22B,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C22C,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C232,$02 Help Message (none).
  $C234,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C235,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C236,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C24C,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C24D Object $09 - "#TEXTTOKEN(#PC + $08, 1)"
  $C24D,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C24E,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C24F,$01 Volume (?)
  $C250,$01 Mass (?)
  $C251,$01
  $C252,$01 Strength (?)
  $C253,$01
  $C254,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C255,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C25B,$02 Help Message (#R(#EVAL(#PEEK(#PC) + #PEEK(#PC + 1) * 256))).
  $C25D,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C25E,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C25F,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C26C,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C26D Object $2A - "#TEXTTOKEN(#PC + $08, 1)"
  $C26D,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C26E,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C26F,$01 Volume (?)
  $C270,$01 Mass (?)
  $C271,$01
  $C272,$01 Strength (?)
  $C273,$01
  $C274,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C275,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C27B,$02 Help Message (none).
  $C27D,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C27E,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C27F,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C28C,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C28D Object $0A - "#TEXTTOKEN(#PC + $08, 1)"
  $C28D,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C28E,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C28F,$01 Volume (?)
  $C290,$01 Mass (?)
  $C291,$01
  $C292,$01 Strength (?)
  $C293,$01
  $C294,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C295,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C29B,$02 Help Message (none).
  $C29D,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C29E,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C2B4,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C2B5 Object $0B - "#TEXTTOKEN(#PC + $08, 1)"
  $C2B5,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C2B6,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C2B7,$01 Volume (?)
  $C2B8,$01 Mass (?)
  $C2B9,$01
  $C2BA,$01 Strength (?)
  $C2BB,$01
  $C2BC,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C2BD,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C2C3,$02 Help Message (none).
  $C2C5,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C2C6,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C2DC,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C2DD Object $0C - "#TEXTTOKEN(#PC + $08, 1)"
  $C2DD,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C2DE,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C2DF,$01 Volume (?)
  $C2E0,$01 Mass (?)
  $C2E1,$01
  $C2E2,$01 Strength (?)
  $C2E3,$01
  $C2E4,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C2E5,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C2EB,$02 Help Message (none).
  $C2ED,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C2EE,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C304,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C305 Object $0E - "#TEXTTOKEN(#PC + $08, 1)"
  $C305,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C306,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C307,$01 Volume (?)
  $C308,$01 Mass (?)
  $C309,$01
  $C30A,$01 Strength (?)
  $C30B,$01
  $C30C,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C30D,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C313,$02 Help Message (none).
  $C315,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C319,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C31A Object $10 - "#TEXTTOKEN(#PC + $08, 1)"
  $C31A,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C31B,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C31C,$01 Volume (?)
  $C31D,$01 Mass (?)
  $C31E,$01
  $C31F,$01 Strength (?)
  $C320,$01
  $C321,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C322,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C328,$02 Help Message (none).
  $C32A,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C331,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C332 Object $0F - "#TEXTTOKEN(#PC + $08, 1)"
  $C332,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C333,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C334,$01 Volume (?)
  $C335,$01 Mass (?)
  $C336,$01
  $C337,$01 Strength (?)
  $C338,$01
  $C339,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C33A,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C340,$02 Help Message (none).
  $C342,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C343,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C344 Object $11 - "#TEXTTOKEN(#PC + $08, 1)"
  $C344,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C345,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C346,$01 Volume (?)
  $C347,$01 Mass (?)
  $C348,$01
  $C349,$01 Strength (?)
  $C34A,$01
  $C34B,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C34C,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C352,$02 Help Message (none).
  $C354,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C355,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C365,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C366 Object $12 - "#TEXTTOKEN(#PC + $08, 1)"
  $C366,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C367,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C368,$01 Volume (?)
  $C369,$01 Mass (?)
  $C36A,$01
  $C36B,$01 Strength (?)
  $C36C,$01
  $C36D,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C36E,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C374,$02 Help Message (none).
  $C376,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C380,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C381 Object $0D - "#TEXTTOKEN(#PC + $08, 1)"
  $C381,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C382,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C383,$01 Volume (?)
  $C384,$01 Mass (?)
  $C385,$01
  $C386,$01 Strength (?)
  $C387,$01
  $C388,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C389,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C38F,$02 Help Message (none).
  $C391,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C392,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C39F,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C3A0 Object $3E - "#TEXTTOKEN(#PC + $08, 1)"
  $C3A0,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C3A1,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C3A2,$01 Volume (?)
  $C3A3,$01 Mass (?)
  $C3A4,$01
  $C3A5,$01 Strength (?)
  $C3A6,$01
  $C3A7,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C3A8,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C3AE,$02 Help Message (none).
  $C3B0,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C3B1,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C3B2 Object $3F - "#TEXTTOKEN(#PC + $08, 1)"
  $C3B2,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C3B3,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C3B4,$01 Volume (?)
  $C3B5,$01 Mass (?)
  $C3B6,$01
  $C3B7,$01 Strength (?)
  $C3B8,$01
  $C3B9,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C3BA,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C3C0,$02 Help Message (none).
  $C3C2,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C3C9,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C3CA Object $40 - "#TEXTTOKEN(#PC + $08, 1)"
  $C3CA,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C3CB,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C3CC,$01 Volume (?)
  $C3CD,$01 Mass (?)
  $C3CE,$01
  $C3CF,$01 Strength (?)
  $C3D0,$01
  $C3D1,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C3D2,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C3D8,$02 Help Message (none).
  $C3DA,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C3DB,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C3DC Object $41 - "#TEXTTOKEN(#PC + $08, 1)"
  $C3DC,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C3DD,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C3DE,$01 Volume (?)
  $C3DF,$01 Mass (?)
  $C3E0,$01
  $C3E1,$01 Strength (?)
  $C3E2,$01
  $C3E3,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C3E4,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C3EA,$02 Help Message (none).
  $C3EC,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C3ED,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C3EE Object $13 - "#TEXTTOKEN(#PC + $08, 1)"
  $C3EE,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C3EF,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C3F0,$01 Volume (?)
  $C3F1,$01 Mass (?)
  $C3F2,$01
  $C3F3,$01 Strength (?)
  $C3F4,$01
  $C3F5,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C3F6,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C3FC,$02 Help Message (none).
  $C3FE,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C417,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C418 Object $14 - "#TEXTTOKEN(#PC + $08, 1)"
  $C418,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C419,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C41A,$01 Volume (?)
  $C41B,$01 Mass (?)
  $C41C,$01
  $C41D,$01 Strength (?)
  $C41E,$01
  $C41F,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C420,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C426,$02 Help Message (none).
  $C428,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C42F,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C430 Object $42 - "#TEXTTOKEN(#PC + $08, 1)"
  $C430,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C431,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C432,$01 Volume (?)
  $C433,$01 Mass (?)
  $C434,$01
  $C435,$01 Strength (?)
  $C436,$01
  $C437,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C438,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C43E,$02 Help Message (none).
  $C440,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C441,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C442 Object $43 - "#TEXTTOKEN(#PC + $08, 1)"
  $C442,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C443,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C444,$01 Volume (?)
  $C445,$01 Mass (?)
  $C446,$01
  $C447,$01 Strength (?)
  $C448,$01
  $C449,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C44A,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C450,$02 Help Message (none).
  $C452,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C453,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C454 Object $15 - "#TEXTTOKEN(#PC + $08, 1)"
  $C454,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C455,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C456,$01 Volume (?)
  $C457,$01 Mass (?)
  $C458,$01
  $C459,$01 Strength (?)
  $C45A,$01
  $C45B,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C45C,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C462,$02 Help Message (none).
  $C464,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C468,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C469 Object $16 - "#TEXTTOKEN(#PC + $08, 1)"
  $C469,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C46A,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C46B,$01 Volume (?)
  $C46C,$01 Mass (?)
  $C46D,$01
  $C46E,$01 Strength (?)
  $C46F,$01
  $C470,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C471,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C477,$02 Help Message (none).
  $C479,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C47D,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C47E Object $17 - "#TEXTTOKEN(#PC + $08, 1)"
  $C47E,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C47F,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C480,$01 Volume (?)
  $C481,$01 Mass (?)
  $C482,$01
  $C483,$01 Strength (?)
  $C484,$01
  $C485,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C486,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C48C,$02 Help Message (none).
  $C48E,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C48F,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C490,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C491,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C492,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C493,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C494,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C495,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C499,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C49A Object $18 - "#TEXTTOKEN(#PC + $08, 1)"
  $C49A,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C49B,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C49C,$01 Volume (?)
  $C49D,$01 Mass (?)
  $C49E,$01
  $C49F,$01 Strength (?)
  $C4A0,$01
  $C4A1,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C4A2,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C4A8,$02 Help Message (none).
  $C4AA,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C4AB,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C4AC,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C4B0,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C4B1 Object $44 - "#TEXTTOKEN(#PC + $08, 1)"
  $C4B1,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C4B2,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C4B3,$01 Volume (?)
  $C4B4,$01 Mass (?)
  $C4B5,$01
  $C4B6,$01 Strength (?)
  $C4B7,$01
  $C4B8,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C4B9,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C4BF,$02 Help Message (none).
  $C4C1,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C4C2,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C4C3 Object $46 - "#TEXTTOKEN(#PC + $08, 1)"
  $C4C3,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C4C4,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C4C5,$01 Volume (?)
  $C4C6,$01 Mass (?)
  $C4C7,$01
  $C4C8,$01 Strength (?)
  $C4C9,$01
  $C4CA,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C4CB,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C4D1,$02 Help Message (none).
  $C4D3,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C4D4,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C4D5 Object $19 - "#TEXTTOKEN(#PC + $08, 1)"
  $C4D5,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C4D6,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C4D7,$01 Volume (?)
  $C4D8,$01 Mass (?)
  $C4D9,$01
  $C4DA,$01 Strength (?)
  $C4DB,$01
  $C4DC,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C4DD,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C4E3,$02 Help Message (none).
  $C4E5,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C4E9,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C4EA Object $1A - "#TEXTTOKEN(#PC + $08, 1)"
  $C4EA,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C4EB,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C4EC,$01 Volume (?)
  $C4ED,$01 Mass (?)
  $C4EE,$01
  $C4EF,$01 Strength (?)
  $C4F0,$01
  $C4F1,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C4F2,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C4F8,$02 Help Message (none).
  $C4FA,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C4FE,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C4FF Object $1B - "#TEXTTOKEN(#PC + $08, 1)"
  $C4FF,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C500,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C501,$01 Volume (?)
  $C502,$01 Mass (?)
  $C503,$01
  $C504,$01 Strength (?)
  $C505,$01
  $C506,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C507,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C50D,$02 Help Message (none).
  $C50F,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C510,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C520,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C521 Object $1C - "#TEXTTOKEN(#PC + $08, 1)"
  $C521,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C522,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C523,$01 Volume (?)
  $C524,$01 Mass (?)
  $C525,$01
  $C526,$01 Strength (?)
  $C527,$01
  $C528,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C529,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C52F,$02 Help Message (none).
  $C531,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C532,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C533,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C534 Object $1D - "#TEXTTOKEN(#PC + $08, 1)"
  $C534,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C535,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C536,$01 Volume (?)
  $C537,$01 Mass (?)
  $C538,$01
  $C539,$01 Strength (?)
  $C53A,$01
  $C53B,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C53C,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C542,$02 Help Message (none).
  $C544,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C54B,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C54C Object $1E - "#TEXTTOKEN(#PC + $08, 1)"
  $C54C,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C54D,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C54E,$01 Volume (?)
  $C54F,$01 Mass (?)
  $C550,$01
  $C551,$01 Strength (?)
  $C552,$01
  $C553,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C554,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C55A,$02 Help Message (none).
  $C55C,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C566,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C567 Object $1F - "#TEXTTOKEN(#PC + $08, 1)"
  $C567,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C568,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C569,$01 Volume (?)
  $C56A,$01 Mass (?)
  $C56B,$01
  $C56C,$01 Strength (?)
  $C56D,$01
  $C56E,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C56F,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C575,$02 Help Message (none).
  $C577,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C57E,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C57F Object $20 - "#TEXTTOKEN(#PC + $08, 1)"
  $C57F,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C580,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C581,$01 Volume (?)
  $C582,$01 Mass (?)
  $C583,$01
  $C584,$01 Strength (?)
  $C585,$01
  $C586,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C587,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C58D,$02 Help Message (none).
  $C58F,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C596,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C597 Object $21 - "#TEXTTOKEN(#PC + $08, 1)"
  $C597,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C598,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C599,$01 Volume (?)
  $C59A,$01 Mass (?)
  $C59B,$01
  $C59C,$01 Strength (?)
  $C59D,$01
  $C59E,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C59F,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C5A5,$02 Help Message (none).
  $C5A7,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C5B7,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C5B8 Object $22 - "#TEXTTOKEN(#PC + $08, 1)"
  $C5B8,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C5B9,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C5BA,$01 Volume (?)
  $C5BB,$01 Mass (?)
  $C5BC,$01
  $C5BD,$01 Strength (?)
  $C5BE,$01
  $C5BF,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C5C0,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C5C6,$02 Help Message (none).
  $C5C8,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C5CC,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C5CD Object $23 - "#TEXTTOKEN(#PC + $08, 1)"
  $C5CD,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C5CE,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C5CF,$01 Volume (?)
  $C5D0,$01 Mass (?)
  $C5D1,$01
  $C5D2,$01 Strength (?)
  $C5D3,$01
  $C5D4,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C5D5,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C5DB,$02 Help Message (none).
  $C5DD,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C5DE,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C5DF Object $24 - "#TEXTTOKEN(#PC + $08, 1)"
  $C5DF,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C5E0,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C5E1,$01 Volume (?)
  $C5E2,$01 Mass (?)
  $C5E3,$01
  $C5E4,$01 Strength (?)
  $C5E5,$01
  $C5E6,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C5E7,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C5ED,$02 Help Message (none).
  $C5EF,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C5F3,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C5F4 Object $25 - "#TEXTTOKEN(#PC + $08, 1)"
  $C5F4,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C5F5,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C5F6,$01 Volume (?)
  $C5F7,$01 Mass (?)
  $C5F8,$01
  $C5F9,$01 Strength (?)
  $C5FA,$01
  $C5FB,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C5FC,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C602,$02 Help Message (none).
  $C604,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C61A,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C61B Object $29 - "#TEXTTOKEN(#PC + $08, 1)"
  $C61B,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C61C,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C61D,$01 Volume (?)
  $C61E,$01 Mass (?)
  $C61F,$01
  $C620,$01 Strength (?)
  $C621,$01
  $C622,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C623,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C629,$02 Help Message (none).
  $C62B,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C63E,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C63F Object $47 - "#TEXTTOKEN(#PC + $08, 1)"
  $C63F,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C640,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C641,$01 Volume (?)
  $C642,$01 Mass (?)
  $C643,$01
  $C644,$01 Strength (?)
  $C645,$01
  $C646,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C647,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C64D,$02 Help Message (none).
  $C64F,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C650,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C651 Object $48 - "#TEXTTOKEN(#PC + $08, 1)"
  $C651,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C652,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C653,$01 Volume (?)
  $C654,$01 Mass (?)
  $C655,$01
  $C656,$01 Strength (?)
  $C657,$01
  $C658,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C659,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C65F,$02 Help Message (none).
  $C661,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C662,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C663 Object $26 - "#TEXTTOKEN(#PC + $08, 1)"
  $C663,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C664,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C665,$01 Volume (?)
  $C666,$01 Mass (?)
  $C667,$01
  $C668,$01 Strength (?)
  $C669,$01
  $C66A,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C66B,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C671,$02 Help Message (none).
  $C673,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C677,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C678 Object $27 - "#TEXTTOKEN(#PC + $08, 1)"
  $C678,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C679,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C67A,$01 Volume (?)
  $C67B,$01 Mass (?)
  $C67C,$01
  $C67D,$01 Strength (?)
  $C67E,$01
  $C67F,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C680,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C686,$02 Help Message (none).
  $C688,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C689,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C68D,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C68E Object $28 - "#TEXTTOKEN(#PC + $08, 1)"
  $C68E,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C68F,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C690,$01 Volume (?)
  $C691,$01 Mass (?)
  $C692,$01
  $C693,$01 Strength (?)
  $C694,$01
  $C695,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C696,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C69C,$02 Help Message (none).
  $C69E,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C69F,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C6A0 Object $3D - "#TEXTTOKEN(#PC + $08, 1)"
  $C6A0,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C6A1,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C6A2,$01 Volume (?)
  $C6A3,$01 Mass (?)
  $C6A4,$01
  $C6A5,$01 Strength (?)
  $C6A6,$01
  $C6A7,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C6A8,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C6AE,$02 Help Message (none).
  $C6B0,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C6B7,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C6B8 Object $45 - "#TEXTTOKEN(#PC + $08, 1)"
  $C6B8,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C6B9,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C6BA,$01 Volume (?)
  $C6BB,$01 Mass (?)
  $C6BC,$01
  $C6BD,$01 Strength (?)
  $C6BE,$01
  $C6BF,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C6C0,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C6C6,$02 Help Message (none).
  $C6C8,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C6CF,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C6D0 Object $49 - "#TEXTTOKEN(#PC + $08, 1)"
  $C6D0,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C6D1,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C6D2,$01 Volume (?)
  $C6D3,$01 Mass (?)
  $C6D4,$01
  $C6D5,$01 Strength (?)
  $C6D6,$01
  $C6D7,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C6D8,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C6DE,$02 Help Message (none).
  $C6E0,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C6E7,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C6E8 Object $4A - "#TEXTTOKEN(#PC + $08, 1)"
  $C6E8,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C6E9,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C6EA,$01 Volume (?)
  $C6EB,$01 Mass (?)
  $C6EC,$01
  $C6ED,$01 Strength (?)
  $C6EE,$01
  $C6EF,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C6F0,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C6F6,$02 Help Message (none).
  $C6F8,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C6FF,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C700 Object $4B - "#TEXTTOKEN(#PC + $08, 1)"
  $C700,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C701,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C702,$01 Volume (?)
  $C703,$01 Mass (?)
  $C704,$01
  $C705,$01 Strength (?)
  $C706,$01
  $C707,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C708,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C70E,$02 Help Message (none).
  $C710,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C717,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
N $C718 Object $4C - "#TEXTTOKEN(#PC + $08, 1)"
  $C718,$01 Appears in the game #PEEK(#PC) #IF(#PEEK(#PC)>1)(times,time).
  $C719,$01 Mother object (#OBJECT(#PEEK(#PC), 1, 1)($)).
  $C71A,$01 Volume (?)
  $C71B,$01 Mass (?)
  $C71C,$01
  $C71D,$01 Strength (?)
  $C71E,$01
  $C71F,b Attributes:
. #TABLE(default,centre,centre,centre,centre,centre,centre,centre,centre)
. { =h Visible | =h Animal | =h Open | =h Gives Light | =h Broken | =h Full | =h Fluid | =h Locked }
. { #IF(#PEEK(#PC) & 1 << 7)(yes,no) | #IF(#PEEK(#PC) & 1 << 6)(yes,no) | #IF(#PEEK(#PC) & 1 << 5)(yes,no) | #IF(#PEEK(#PC) & 1 << 4)(yes,no) | #IF(#PEEK(#PC) & 1 << 3)(yes,no) | #IF(#PEEK(#PC) & 1 << 2)(yes,no) | #IF(#PEEK(#PC) & 1 << 1)(yes,no) | #IF(#PEEK(#PC) & 1 << 0)(yes,no) }
. TABLE#
  $C720,$06,$02 Object Name: "#TEXTTOKEN(#PC)".
W $C726,$02 Help Message (none).
  $C728,$01 Location #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
  $C72F,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).

b $C730 Action Table
@ $C730 label=ActionTable
N $C730 Action: "#ACTION".
B $C730,$01 Action ID.
W $C731,$02 Action routine.
L $C730,$03,$1F
N $C78D End of table.
B $C78D,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).

b $C78E Event Jump Table
N $C78E #LOCATION(#PEEK(#PC), 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
B $C78E,$01 Location ID.
W $C78F,$02 Event address.
L $C78E,$03,$07
N $C7A3 End of table.
B $C7A3,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).

c $C7A4 Event: #LOCATIONNAME($16)
N $C7A4 At the start of the game, the #TEXTTOKEN($C430 + $08, 1) is invisible (!) and only becomes visible after
.       entering #LOCATIONNAME($16).
@ $C7A4 label=EventBeornsHouse
  $C7A4,$03 #REGhl=#R$C437(attributes) of object $42 - "#TEXTTOKEN($C430 + $08, 1)".
  $C7A7,$03 Return if the "#TEXTTOKEN($C430 + $08, 1)" is "broken" (bit 3 is set).
  $C7AA,$05 Write $42 to #R$CAE7.
  $C7AF,$02 Set "visible" bit for "#TEXTTOKEN($C430 + $08, 1)".
  $C7B1,$01 Return.

c $C7B2 Event: #LOCATIONNAME($1A)
@ $C7B2 label=EventSpiderThreadsPlace
  $C7B2,$06 Copy #R$CA92 to #R$CA93.
  $C7B8,$01 Return.

c $C7B9 Event: #LOCATIONNAME($1D)
@ $C7B9 label=EventDeepBog
  $C7B9,$06 Copy #R$CAA0 to #R$CAA1.
  $C7BF,$01 Return.

c $C7C0 Event: #LOCATIONNAME($20)
@ $C7C0 label=EventElvenkingsCellar
  $C7C0,$05 Write $03 to #R$CAC4.
  $C7C5,$03 #REGhl=#R$C13A(attributes) of object $3C - "#TEXTTOKEN($C133 + $08, 1)".
  $C7C8,$04 Jump to #R$C7D1 if "#TEXTTOKEN($C133 + $08, 1)" is "broken" (bit 3 is set).
  $C7CC,$05 Write $3C to #R$CB03.
@ $C7D1 label=EventElvenkingsCellar_Skip
  $C7D1,$03 #REGhl=#R$C4CA(attributes) of object $46 - "#TEXTTOKEN($C4C3 + $08, 1)".
  $C7D4,$03 Return if the "#TEXTTOKEN($C4C3 + $08, 1)" is "broken" (bit 3 is set).
  $C7D7,$05 Write $46 to #R$CAFC.
  $C7DC,$01 Return.

c $C7DD Event: #LOCATIONNAME($03)
@ $C7DD label=EventForest
  $C7DD,$06 Copy #R$8D9B to #R$B6F3.
  $C7E3,$06 Copy #R$CABC to #R$CABD.
  $C7E9,$01 Return.

c $C7EA Event: #LOCATIONNAME($21)
N $C7EA Is Player Protected in "#TEXTTOKEN($C3EE + $08, 1)"
@ $C7EA label=EventForestriver
  $C7EA,$06 If #R$C11C(player mother object) is object $13 - "#TEXTTOKEN($C3EE + $08, 1)" then return.
N $C7F0 Uh oh ... you dead.
  $C7F0,$03 Call #R$8E39.
  $C7F3,$03 #REGhl=#R$B26D("You are swept forcefully against the portcullis")
  $C7F6,$03 Call #R$72DD.
  $C7F9,$03 Jump to #R$90D2.

b $C7FC Gollums Riddles
  $C7FC,$01
  $C7FD,$01
W $C7FE,$02
  $C800,$01
  $C801,$01
W $C802,$02
  $C804,$01
  $C805,$01
W $C806,$02
  $C808,$01
  $C809,$01
W $C80A,$02
  $C80C,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
  $C80D,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).

b $C80E
D $C80E See #R$9C9F.
N $C80E "#LOCATIONNAME(#PEEK(#PC))".
  $C80E,$01 Location #LOCATION(#PEEK(#PC), 1, 1)($).
W $C80F,$02 The direction for #R(#PEEK(#PC + 1) * $100 + #PEEK(#PC))(#LOCATIONNAME(#PEEK(#PC - 1))).
  $C811,$03 #MOVEMENT(#PC)
L $C80E,$06,$05
  $C82C,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).

b $C82D
  $C82D,$01
W $C82E,$02
  $C830,$01
W $C831,$02
  $C833,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
  $C834,$01
W $C835,$02
  $C837,$01
W $C838,$02
  $C83A,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
  $C83B,$01
W $C83C,$02
  $C83E,$01
W $C83F,$02
  $C841,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
  $C842,$01
  $C843,$01
  $C844,$01 #OBJECT(#PEEK(#PC), 1, 1)($)
  $C845,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
  $C846,$01
  $C847,$01
W $C848,$02
  $C84A,$01
W $C84B,$02
  $C84D,$01
  $C84E,$01
  $C84F,$01
  $C850,$01
W $C851,$02
  $C853,$01
W $C854,$02
  $C856,$01
  $C857,$01
  $C858,$01
  $C859,$01
W $C85A,$02
  $C85C,$01
W $C85D,$02
  $C85F,$01
  $C860,$01
  $C861,$01 #OBJECT(#PEEK(#PC), 1, 1)($)
  $C862,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
  $C863,$01
  $C864,$01
  $C865,$01
  $C866,$01
W $C867,$02
  $C869,$01
W $C86A,$02
  $C86C,$01
  $C86D,$01
  $C86E,$01
W $C86F,$02
  $C871,$01
  $C872,$01
  $C873,$01
  $C874,$01
W $C875,$02
  $C877,$01
W $C878,$02
  $C87A,$01
  $C87B,$01
  $C87C,$01
  $C87D,$01
W $C87E,$02
  $C880,$01
W $C881,$02
  $C883,$01
  $C884,$01
  $C885,$01
  $C886,$01
W $C887,$02
  $C889,$01
W $C88A,$02
  $C88C,$01
  $C88D,$01
  $C88E,$01
  $C88F,$01
W $C890,$02
  $C892,$01
W $C893,$02
  $C895,$01
  $C896,$01
  $C897,$01
  $C898,$01
  $C899,$01
  $C89A,$01
  $C89B,$01
W $C89C,$02

N $C8A1 Gandalf.
  $C8A1,$01
W $C8A2,$02
  $C8A4,$01
W $C8A5,$02
  $C8A7,$01
W $C8A8,$02
  $C8AA,$01
W $C8AB,$02
  $C8AD,$01
W $C8AE,$02
  $C8B0,$01
W $C8B1,$02
  $C8B3,$01
W $C8B4,$02
  $C8B6,$01
W $C8B7,$02
  $C8B9,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).

N $C8BA Gandalfs initial actions.
  $C8BA,$01
  $C8BB,$01 #ACTION
  $C8BC,$01 #OBJECT(#PEEK(#PC), 1, 1)($)
  $C8BD,$01 #OBJECT(#PEEK(#PC), 1, 1)($)

  $C8BE,$01
  $C8BF,$01 #ACTION
  $C8C0,$01 #OBJECT(#PEEK(#PC), 1, 1)($)
  $C8C1,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).

  $CA53,$29
  $CA7C,$08

N $CA84 Barrel.
  $CA84,$01
  $CA85,$01
W $CA86,$02
  $CA88,$01
W $CA89,$02
N $CA8B Spider Web.
  $CA8B,$01
  $CA8C,$01
W $CA8D,$02
  $CA8F,$01
W $CA90,$02
N $CA92 Spider Web.
  $CA92,$01
  $CA93,$01
W $CA94,$02
  $CA96,$01
W $CA97,$02
N $CA99 Goblins Door.
  $CA99,$01
  $CA9A,$01
W $CA9B,$02
  $CA9D,$01
W $CA9E,$02
N $CAA0 Deep Bog.
  $CAA0,$01
  $CAA1,$01
W $CAA2,$02
  $CAA4,$01
W $CAA5,$02
N $CAA7 Magic Door.
  $CAA7,$01
  $CAA8,$01
W $CAA9,$02
  $CAAB,$01
W $CAAC,$02
N $CAAE Ring.
  $CAAE,$01
  $CAAF,$01
W $CAB0,$02
  $CAB2,$01
W $CAB3,$02
N $CAB5 ???
  $CAB5,$01
  $CAB6,$01
W $CAB7,$02
  $CAB9,$01
W $CABA,$02
N $CABC Forest.
  $CABC,$01
  $CABD,$01
W $CABE,$02
  $CAC0,$01
W $CAC1,$02
N $CAC3 Hole.
  $CAC3,$01
  $CAC4,$01
W $CAC5,$02
  $CAC7,$01
W $CAC8,$02

  $CACA,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).

b $CACB
  $CACB,$77,$07
  $CB42,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).
  $CB43

b $CC00 Location Graphics Table
@ $CC00 label=LocGFXTable
  $CC00,$01 Location #LOCATION(#PEEK(#PC), 1, 1)($) - "#LOCATIONNAME(#PEEK(#PC))".
W $CC01,$02 Location graphics data address.
L $CC00,$03,$16
  $CC42,$01 Termination character (#N(#PEEK(#PC), 2, 3, 1, 1)($)).

b $CC43 Start of location graphics
@ $CC43 label=LocGFX
N $CC43 #LOCATION($01, 1, 1)($) - "#LOCATIONNAME$01".
N $CE77 #LOCATION($31, 1, 1)($) - "#LOCATIONNAME$31".
N $CFB2 #LOCATION($06, 1, 1)($) - "#LOCATIONNAME$06".
N $D24E #LOCATION($0B, 1, 1)($) - "#LOCATIONNAME$0B".
N $D367 #LOCATION($25, 1, 1)($) - "#LOCATIONNAME$25".
N $D5B5 #LOCATION($2B, 1, 1)($) - "#LOCATIONNAME$2B".
N $D713 #LOCATION($26, 1, 1)($) - "#LOCATIONNAME$26".
N $D92A #LOCATION($07, 1, 1)($) - "#LOCATIONNAME$07".
N $DBA8 #LOCATION($18, 1, 1)($) - "#LOCATIONNAME$18".
N $DD79 #LOCATION($23, 1, 1)($) - "#LOCATIONNAME$23".
N $E02C #LOCATION($0D, 1, 1)($) - "#LOCATIONNAME$0D".
N $E049 #LOCATION($1F, 1, 1)($) - "#LOCATIONNAME$1F".
N $E142 #LOCATION($05, 1, 1)($) - "#LOCATIONNAME$05".
N $E19F #LOCATION($1C, 1, 1)($) - "#LOCATIONNAME$1C".
N $E3FE #LOCATION($04, 1, 1)($) - "#LOCATIONNAME$04".
N $E47A #LOCATION($20, 1, 1)($) - "#LOCATIONNAME$20".
N $E6E4 #LOCATION($10, 1, 1)($) - "#LOCATIONNAME$10".
N $E9EE #LOCATION($19, 1, 1)($) - "#LOCATIONNAME$19".
N $EC3E #LOCATION($08, 1, 1)($) - "#LOCATIONNAME$08".
N $EE43 #LOCATION($29, 1, 1)($) - "#LOCATIONNAME$29".
N $F001 #LOCATION($1A, 1, 1)($) - "#LOCATIONNAME$1A".
N $F1E6 #LOCATION($27, 1, 1)($) - "#LOCATIONNAME$27".

b $F400 Copy of original objects
@ $F400 label=CopyOfObjects

b $FA15 Copy of original locations
@ $FA15 label=CopyOfLocations
